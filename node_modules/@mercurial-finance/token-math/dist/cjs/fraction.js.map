{"version":3,"file":"fraction.js","sourceRoot":"","sources":["../../src/fraction.ts"],"names":[],"mappings":"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","sourcesContent":["import { default as Big } from \"big.js\";\nimport { default as invariant } from \"tiny-invariant\";\n\nimport { ONE, Rounding, ZERO } from \"./constants.js\";\nimport type { NumberFormat } from \"./format.js\";\nimport { formatBig } from \"./format.js\";\nimport type { BigintIsh } from \"./utils.js\";\nimport { parseBigintIsh } from \"./utils.js\";\n\n/**\n * Attempts to parse a {@link Fraction}.\n * @param fractionish Fraction or BigintIsh.\n * @returns\n */\nconst tryParseFraction = (fractionish: BigintIsh | Fraction): Fraction => {\n  if (Fraction.isFraction(fractionish)) {\n    return fractionish;\n  }\n\n  try {\n    return new Fraction(parseBigintIsh(fractionish));\n  } catch (e) {\n    if (e instanceof Error) {\n      throw new Error(`Could not parse fraction: ${e.message}`);\n    }\n    throw new Error(`Could not parse fraction`);\n  }\n};\n\n/**\n * Interface representing a Fraction.\n */\nexport interface FractionObject {\n  /**\n   * This boolean checks to see if this is actually a {@link Fraction}.\n   */\n  readonly isFraction: true;\n\n  /**\n   * Fraction numerator.\n   */\n  readonly numeratorStr: string;\n\n  /**\n   * Fraction denominator.\n   */\n  readonly denominatorStr: string;\n}\n\n/**\n * Creates a {@link Fraction} from a {@link FractionObject}.\n * @param param0\n * @returns\n */\nexport const fractionFromObject = ({\n  numeratorStr,\n  denominatorStr,\n}: FractionObject): Fraction => {\n  return new Fraction(numeratorStr, denominatorStr);\n};\n\n/**\n * Number with an integer numerator and denominator.\n */\nexport class Fraction implements FractionObject {\n  readonly isFraction = true as const;\n  get numeratorStr(): string {\n    return this.numerator.toString();\n  }\n  get denominatorStr(): string {\n    return this.numerator.toString();\n  }\n\n  readonly numerator: bigint;\n  readonly denominator: bigint;\n\n  static readonly ZERO: Fraction = new Fraction(0);\n  static readonly ONE: Fraction = new Fraction(1);\n\n  constructor(numerator: BigintIsh, denominator: BigintIsh = ONE) {\n    this.numerator = parseBigintIsh(numerator);\n    this.denominator = parseBigintIsh(denominator);\n  }\n\n  /**\n   * Ensures the other object is of this {@link Fraction} type.\n   * @param other\n   * @returns\n   */\n  static fromObject(other: FractionObject): Fraction {\n    if (other instanceof Fraction) {\n      return other;\n    }\n    return fractionFromObject(other);\n  }\n\n  /**\n   * JSON representation of the {@link Fraction}.\n   */\n  toJSON(): FractionObject {\n    return {\n      isFraction: true,\n      numeratorStr: this.numerator.toString(),\n      denominatorStr: this.denominator.toString(),\n    };\n  }\n\n  /**\n   * Returns true if the other object is a {@link Fraction}.\n   *\n   * @param other\n   * @returns\n   */\n  static isFraction(other: unknown): other is Fraction {\n    return (\n      typeof other === \"object\" &&\n      other !== null &&\n      \"numerator\" in other &&\n      \"denominator\" in other\n    );\n  }\n\n  /**\n   * Compares this {@link Fraction} to the other {@link Fraction}.\n   */\n  compareTo(other: Fraction): -1 | 0 | 1 {\n    if (this.equalTo(other)) {\n      return 0;\n    }\n    return this.greaterThan(other) ? 1 : -1;\n  }\n\n  /**\n   * Parses a {@link Fraction} from a float.\n   * @param number Number to parse.\n   * @param decimals Number of decimals of precision. (default 10)\n   * @returns Fraction\n   */\n  static fromNumber(number: number, decimals = 10): Fraction {\n    const multiplier = Math.pow(10, decimals);\n    return new Fraction(Math.floor(number * multiplier), multiplier);\n  }\n\n  /**\n   * Performs floor division.\n   */\n  get quotient(): bigint {\n    return this.numerator / this.denominator;\n  }\n\n  /**\n   * Remainder after floor division.\n   */\n  get remainder(): Fraction {\n    return new Fraction(this.numerator % this.denominator, this.denominator);\n  }\n\n  /**\n   * Swaps the numerator and denominator of the {@link Fraction}.\n   * @returns\n   */\n  invert(): Fraction {\n    return new Fraction(this.denominator, this.numerator);\n  }\n\n  add(other: Fraction | BigintIsh): Fraction {\n    const otherParsed = tryParseFraction(other);\n    if (this.denominator === otherParsed.denominator) {\n      return new Fraction(\n        this.numerator + otherParsed.numerator,\n        this.denominator,\n      );\n    }\n    return new Fraction(\n      this.numerator * otherParsed.denominator +\n        otherParsed.numerator * this.denominator,\n      this.denominator * otherParsed.denominator,\n    );\n  }\n\n  subtract(other: Fraction | BigintIsh): Fraction {\n    const otherParsed = tryParseFraction(other);\n    if (this.denominator === otherParsed.denominator) {\n      return new Fraction(\n        this.numerator - otherParsed.numerator,\n        this.denominator,\n      );\n    }\n    return new Fraction(\n      this.numerator * otherParsed.denominator -\n        otherParsed.numerator * this.denominator,\n      this.denominator * otherParsed.denominator,\n    );\n  }\n\n  lessThan(other: Fraction | BigintIsh): boolean {\n    const otherParsed = tryParseFraction(other);\n    return (\n      this.numerator * otherParsed.denominator <\n      otherParsed.numerator * this.denominator\n    );\n  }\n\n  equalTo(other: Fraction | BigintIsh): boolean {\n    const otherParsed = tryParseFraction(other);\n    return (\n      this.numerator * otherParsed.denominator ===\n      otherParsed.numerator * this.denominator\n    );\n  }\n\n  greaterThan(other: Fraction | BigintIsh): boolean {\n    const otherParsed = tryParseFraction(other);\n    return (\n      this.numerator * otherParsed.denominator >\n      otherParsed.numerator * this.denominator\n    );\n  }\n\n  multiply(other: Fraction | BigintIsh): Fraction {\n    const otherParsed = tryParseFraction(other);\n    return new Fraction(\n      this.numerator * otherParsed.numerator,\n      this.denominator * otherParsed.denominator,\n    );\n  }\n\n  /**\n   * Divides this {@link Fraction} by another {@link Fraction}.\n   */\n  divide(other: Fraction | BigintIsh): Fraction {\n    const otherParsed = tryParseFraction(other);\n    return new Fraction(\n      this.numerator * otherParsed.denominator,\n      this.denominator * otherParsed.numerator,\n    );\n  }\n\n  /**\n   * Converts this {@link Fraction} to a string with the specified significant digits.\n   * @param significantDigits\n   * @param format\n   * @param rounding\n   * @returns\n   */\n  toSignificant(significantDigits: number): string {\n    invariant(\n      Number.isInteger(significantDigits),\n      `${significantDigits} is not an integer.`,\n    );\n    invariant(significantDigits > 0, `${significantDigits} is not positive.`);\n\n    return this.asNumber.toLocaleString(\"en-US\", {\n      useGrouping: false,\n      minimumSignificantDigits: significantDigits,\n      maximumSignificantDigits: significantDigits,\n    });\n  }\n\n  toFixed(\n    decimalPlaces: number,\n    format: NumberFormat = { groupSeparator: \"\" },\n    rounding: Rounding = Rounding.ROUND_HALF_UP,\n  ): string {\n    invariant(\n      Number.isInteger(decimalPlaces),\n      `${decimalPlaces} is not an integer.`,\n    );\n    invariant(decimalPlaces >= 0, `${decimalPlaces} is negative.`);\n\n    return formatBig(\n      new Big(this.numerator.toString()).div(this.denominator.toString()),\n      decimalPlaces,\n      { ...format, rounding },\n    );\n  }\n\n  /**\n   * Helper method for converting any super class back to a fraction\n   */\n  get asFraction(): Fraction {\n    return new Fraction(this.numerator, this.denominator);\n  }\n\n  /**\n   * Gets the value of this {@link Fraction} as a number.\n   */\n  get asNumber(): number {\n    if (this.denominator === ZERO) {\n      return this.numerator > ZERO\n        ? Number.POSITIVE_INFINITY\n        : this.numerator < ZERO\n          ? Number.NEGATIVE_INFINITY\n          : Number.NaN;\n    }\n    const result =\n      parseFloat(this.numerator.toString()) /\n      parseFloat(this.denominator.toString());\n    if (!Number.isNaN(result)) {\n      return result;\n    }\n    return parseFloat(this.toFixed(10));\n  }\n\n  /**\n   * Returns true if this number (the numerator) is equal to zero and the denominator is non-zero.\n   * @returns\n   */\n  isZero(): boolean {\n    return this.numerator === ZERO && this.denominator !== ZERO;\n  }\n\n  /**\n   * Returns true if this number (the numerator) is not equal to zero.\n   * @returns\n   */\n  isNonZero(): boolean {\n    return !this.isZero();\n  }\n}\n"]}