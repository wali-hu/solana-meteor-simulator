var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
import { Connection, PublicKey, Keypair } from '@solana/web3.js';
import { Wallet, AnchorProvider } from '@coral-xyz/anchor';
import AmmImpl from '../amm';
const mainnetConnection = new Connection('https://api.mainnet-beta.solana.com');
const provider = new AnchorProvider(mainnetConnection, new Wallet(Keypair.generate()), {
    commitment: 'confirmed',
});
function getClaimableFee(poolAddress, owner) {
    return __awaiter(this, void 0, void 0, function* () {
        var _a;
        const pool = yield AmmImpl.create(provider.connection, poolAddress);
        let result = yield pool.getUserLockEscrow(owner);
        console.log('unClaimed: %s', (_a = result === null || result === void 0 ? void 0 : result.fee.unClaimed.lp) === null || _a === void 0 ? void 0 : _a.toString());
        console.log(result);
    });
}
function main() {
    return __awaiter(this, void 0, void 0, function* () {
        // mainnet-beta, SOL-USDC
        const poolAddress = 'FRd5CJfLU2TDAUK2m3onvwqXs5md3y96Ad1RUMB5fyii';
        const owner = '3CCocQighVbWdoav1Fhp6t2K6v7kWtUEd6Sp59UU77Vt';
        yield getClaimableFee(new PublicKey(poolAddress), new PublicKey(owner));
    });
}
main();
//# sourceMappingURL=get_claimable_fee.js.map