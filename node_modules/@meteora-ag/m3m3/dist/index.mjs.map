{"version":3,"sources":["../src/stake-for-fee/index.ts","../src/stake-for-fee/constants/index.ts","../src/stake-for-fee/helpers/decoder.ts","../src/stake-for-fee/helpers/dynamic_amm.ts","../src/stake-for-fee/types/index.ts","../src/stake-for-fee/helpers/dynamic_vault.ts","../src/stake-for-fee/helpers/pda.ts","../src/stake-for-fee/helpers/program.ts","../src/stake-for-fee/idls/stake_for_fee.ts","../src/stake-for-fee/idls/dynamic_amm.ts","../src/stake-for-fee/idls/dynamic_vault.ts","../src/stake-for-fee/helpers/staker_for_fee.ts","../src/stake-for-fee/helpers/tx.ts","../src/stake-for-fee/helpers/compute.ts","../src/index.ts"],"sourcesContent":["import { BN } from \"@coral-xyz/anchor\";\nimport {\n  AccountLayout,\n  ASSOCIATED_TOKEN_PROGRAM_ID,\n  getAssociatedTokenAddressSync,\n  MintLayout,\n  RawAccount,\n  RawMint,\n  TOKEN_PROGRAM_ID,\n} from \"@solana/spl-token\";\nimport {\n  AccountMeta,\n  Connection,\n  PublicKey,\n  SystemProgram,\n  SYSVAR_CLOCK_PUBKEY,\n  Transaction,\n  TransactionInstruction,\n} from \"@solana/web3.js\";\nimport {\n  DYNAMIC_AMM_PROGRAM_ID,\n  DYNAMIC_VAULT_PROGRAM_ID,\n  STAKE_FOR_FEE_PROGRAM_ID,\n  U64_MAX,\n} from \"./constants\";\nimport {\n  decodeFullBalanceState,\n  decodeTopStakerListState,\n} from \"./helpers/decoder\";\nimport { getLockedEscrowPendingFee } from \"./helpers/dynamic_amm\";\nimport {\n  deriveFeeVault,\n  deriveFullBalanceList,\n  deriveLockEscrowPda,\n  deriveLpMint,\n  deriveStakeEscrow,\n  deriveTopStakerList,\n} from \"./helpers/pda\";\nimport {\n  createDynamicAmmProgram,\n  createDynamicVaultProgram,\n  createStakeFeeProgram,\n  getOrCreateATAInstruction,\n  getOrCreateStakeEscrowInstruction,\n} from \"./helpers/program\";\nimport {\n  findLargestStakerNotInTopListFromFullBalanceList,\n  findReplaceableTopStaker,\n  getTopStakerListStateEntryStakeAmount,\n} from \"./helpers/staker_for_fee\";\nimport {\n  AccountStates,\n  Clock,\n  ClockLayout,\n  DynamicAmmProgram,\n  DynamicPool,\n  DynamicVault,\n  DynamicVaultProgram,\n  FeeVault,\n  FullBalanceListState,\n  InitializeVaultParams,\n  LockEscrow,\n  StakeEscrow,\n  StakeForFeeProgram,\n  StakerMetadata,\n  TopStakerListState,\n} from \"./types\";\nimport { computeUnitIx, unwrapSOLInstruction } from \"./helpers/tx\";\nimport { getSimulationComputeUnits } from \"@solana-developers/helpers\";\nimport { getEstimatedComputeUnitIxWithBuffer } from \"./helpers/compute\";\n\ntype Opt = {\n  stakeForFeeProgramId?: PublicKey;\n  dynamicAmmProgramId?: PublicKey;\n  dynamicVaultProgramId?: PublicKey;\n};\n\nexport class StakeForFee {\n  constructor(\n    public connection: Connection,\n    public stakeForFeeProgram: StakeForFeeProgram,\n    public dynamicAmmProgram: DynamicAmmProgram,\n    public dynamicVaultProgram: DynamicVaultProgram,\n    public feeVaultKey: PublicKey,\n    public escrowVaultKey: PublicKey,\n    public accountStates: AccountStates\n  ) {}\n\n  static async create(\n    connection: Connection,\n    pool: PublicKey,\n    opt?: Opt\n  ): Promise<StakeForFee> {\n    const stakeForFeeProgram = createStakeFeeProgram(\n      connection,\n      opt?.stakeForFeeProgramId ?? STAKE_FOR_FEE_PROGRAM_ID\n    );\n\n    const dynamicVaultProgram = createDynamicVaultProgram(\n      connection,\n      opt?.dynamicVaultProgramId ?? DYNAMIC_VAULT_PROGRAM_ID\n    );\n\n    const dynamicAmmProgram = createDynamicAmmProgram(\n      connection,\n      opt?.dynamicAmmProgramId ?? DYNAMIC_AMM_PROGRAM_ID\n    );\n\n    const feeVaultKey = deriveFeeVault(pool, stakeForFeeProgram.programId);\n    const fullBalanceListKey = deriveFullBalanceList(\n      feeVaultKey,\n      stakeForFeeProgram.programId\n    );\n    const topStakerListKey = deriveTopStakerList(\n      feeVaultKey,\n      stakeForFeeProgram.programId\n    );\n\n    const accountStates = await this.fetchAccountStates(\n      connection,\n      feeVaultKey,\n      topStakerListKey,\n      fullBalanceListKey,\n      pool,\n      opt\n    );\n\n    const [lockEscrowPK] = deriveLockEscrowPda(\n      pool,\n      feeVaultKey,\n      dynamicAmmProgram.programId\n    );\n    const escrowVaultKey = getAssociatedTokenAddressSync(\n      accountStates.ammPool.lpMint,\n      lockEscrowPK,\n      true\n    );\n\n    return new StakeForFee(\n      connection,\n      stakeForFeeProgram,\n      dynamicAmmProgram,\n      dynamicVaultProgram,\n      feeVaultKey,\n      escrowVaultKey,\n      accountStates\n    );\n  }\n\n  /**\n   * Fetches all account states required for a given stake-for-fee pool\n   *\n   * @param connection The connection to the Solana cluster\n   * @param feeVaultKey The public key of the fee vault\n   * @param topStakerListKey The public key of the top staker list\n   * @param fullBalanceListKey The public key of the full balance list\n   * @param pool The public key of the pool\n   * @param opt An optional object containing the IDs of the programs that\n   *            manage the pool. If not provided, the default program IDs\n   *            will be used.\n   * @returns An object containing all the required account states\n   */\n  static async fetchAccountStates(\n    connection: Connection,\n    feeVaultKey: PublicKey,\n    topStakerListKey: PublicKey,\n    fullBalanceListKey: PublicKey,\n    pool: PublicKey,\n    opt?: Opt\n  ): Promise<AccountStates> {\n    const stakeForFeeProgram = createStakeFeeProgram(\n      connection,\n      opt?.stakeForFeeProgramId ?? STAKE_FOR_FEE_PROGRAM_ID\n    );\n\n    const dynamicVaultProgram = createDynamicVaultProgram(\n      connection,\n      opt?.dynamicVaultProgramId ?? DYNAMIC_VAULT_PROGRAM_ID\n    );\n\n    const dynamicAmmProgram = createDynamicAmmProgram(\n      connection,\n      opt?.dynamicAmmProgramId ?? DYNAMIC_AMM_PROGRAM_ID\n    );\n\n    const [\n      feeVaultAccount,\n      fullBalanceListAccount,\n      topStakerAccount,\n      poolAccount,\n      clockAccount,\n    ] = await connection.getMultipleAccountsInfo([\n      feeVaultKey,\n      fullBalanceListKey,\n      topStakerListKey,\n      pool,\n      SYSVAR_CLOCK_PUBKEY,\n    ]);\n\n    const feeVaultState: FeeVault = stakeForFeeProgram.coder.accounts.decode(\n      \"feeVault\",\n      feeVaultAccount.data\n    );\n\n    const fullBalanceListState: FullBalanceListState = decodeFullBalanceState(\n      stakeForFeeProgram,\n      fullBalanceListAccount\n    );\n\n    const topStakerListState: TopStakerListState = decodeTopStakerListState(\n      stakeForFeeProgram,\n      feeVaultState,\n      topStakerAccount\n    );\n\n    const poolState: DynamicPool = dynamicAmmProgram.coder.accounts.decode(\n      \"pool\",\n      poolAccount.data\n    );\n\n    const clockState: Clock = ClockLayout.decode(clockAccount.data);\n\n    const [\n      aVaultAccount,\n      bVaultAccount,\n      lockEscrowAccount,\n      aVaultLpAccount,\n      bVaultLpAccount,\n      tokenAMintAccount,\n      tokenBMintAccount,\n      poolLpMintAccount,\n    ] = await connection.getMultipleAccountsInfo([\n      poolState.aVault,\n      poolState.bVault,\n      feeVaultState.lockEscrow,\n      poolState.aVaultLp,\n      poolState.bVaultLp,\n      poolState.tokenAMint,\n      poolState.tokenBMint,\n      poolState.lpMint,\n    ]);\n\n    const aVaultState: DynamicVault = dynamicVaultProgram.coder.accounts.decode(\n      \"vault\",\n      aVaultAccount.data\n    );\n\n    const bVaultState: DynamicVault = dynamicVaultProgram.coder.accounts.decode(\n      \"vault\",\n      bVaultAccount.data\n    );\n\n    const lockEscrowState: LockEscrow = dynamicAmmProgram.coder.accounts.decode(\n      \"lockEscrow\",\n      lockEscrowAccount.data\n    );\n\n    const aVaultLpState: RawAccount = AccountLayout.decode(\n      new Uint8Array(aVaultLpAccount.data)\n    );\n\n    const bVaultLpState: RawAccount = AccountLayout.decode(\n      new Uint8Array(bVaultLpAccount.data)\n    );\n\n    const tokenAMintState: RawMint = MintLayout.decode(\n      new Uint8Array(tokenAMintAccount.data)\n    );\n\n    const tokenBMintState: RawMint = MintLayout.decode(\n      new Uint8Array(tokenBMintAccount.data)\n    );\n\n    const poolLpMintState: RawMint = MintLayout.decode(\n      new Uint8Array(poolLpMintAccount.data)\n    );\n\n    const stakeMintState = feeVaultState.stakeMint.equals(poolState.tokenAMint)\n      ? tokenAMintState\n      : tokenBMintState;\n\n    const escrowVaultKey = getAssociatedTokenAddressSync(\n      poolState.lpMint,\n      feeVaultKey,\n      true\n    );\n\n    const [aVaultLpMintAccount, bVaultLpMintAccount] =\n      await connection.getMultipleAccountsInfo([\n        aVaultState.lpMint,\n        bVaultState.lpMint,\n      ]);\n\n    const aVaultLpMintState: RawMint = MintLayout.decode(\n      new Uint8Array(aVaultLpMintAccount.data)\n    );\n\n    const bVaultLpMintState: RawMint = MintLayout.decode(\n      new Uint8Array(bVaultLpMintAccount.data)\n    );\n\n    let accountStates: AccountStates = {\n      feeVault: feeVaultState,\n      fullBalanceListState,\n      topStakerListState,\n      ammPool: poolState,\n      aVault: aVaultState,\n      bVault: bVaultState,\n      aVaultLp: aVaultLpState,\n      bVaultLp: bVaultLpState,\n      lockEscrow: lockEscrowState,\n      tokenAMint: tokenAMintState,\n      tokenBMint: tokenBMintState,\n      stakeMint: stakeMintState,\n      aVaultLpMint: aVaultLpMintState,\n      bVaultLpMint: bVaultLpMintState,\n      clock: clockState,\n      poolLpMint: poolLpMintState,\n    };\n\n    return accountStates;\n  }\n\n  /**\n   * Creates a fee vault for the given pool.\n   *\n   * @param connection Solana connection\n   * @param pool The pool to create the fee vault for\n   * @param stakeMint The mint of the stake token\n   * @param lockEscrow The lock escrow account. The owner of the lock escrow must be the fee vault. Integrator must create lock escrow account before calling this instruction.\n   * @param payer The payer of the transaction. Signer.\n   * @param config The configuration account for the fee vault. Get from `getConfigs`\n   * @param customStartClaimFeeTimestamp The custom start claim fee timestamp. If not passed, it will default to current timestamp. Else, lock escrow can only claim fee after this timestamp. Constraint: currentTimestamp <= `customStartClaimFeeTimestamp` <= currentTimestamp + configAccount.joinWindowDuration\n   * @param opt Optional options\n   *\n   * @returns A transaction that can be signed and sent to the network\n   */\n  public static async createFeeVault(\n    connection: Connection,\n    pool: PublicKey,\n    stakeMint: PublicKey,\n    payer: PublicKey,\n    param?: Exclude<InitializeVaultParams, \"padding\">,\n    opt?: Opt\n  ): Promise<Transaction> {\n    const stakeForFeeProgram = createStakeFeeProgram(\n      connection,\n      opt?.stakeForFeeProgramId ?? STAKE_FOR_FEE_PROGRAM_ID\n    );\n\n    const ammProgram = createDynamicAmmProgram(\n      connection,\n      opt?.dynamicAmmProgramId ?? DYNAMIC_AMM_PROGRAM_ID\n    );\n\n    const poolState = await ammProgram.account.pool.fetch(pool);\n\n    const quoteMint = poolState.tokenAMint.equals(stakeMint)\n      ? poolState.tokenBMint\n      : poolState.tokenAMint;\n\n    const feeVaultKey = deriveFeeVault(pool, stakeForFeeProgram.programId);\n    const stakeTokenVaultKey = getAssociatedTokenAddressSync(\n      stakeMint,\n      feeVaultKey,\n      true\n    );\n\n    const quoteTokenVaultKey = getAssociatedTokenAddressSync(\n      quoteMint,\n      feeVaultKey,\n      true\n    );\n\n    const topStakerListKey = deriveTopStakerList(\n      feeVaultKey,\n      stakeForFeeProgram.programId\n    );\n    const fullBalanceListKey = deriveFullBalanceList(\n      feeVaultKey,\n      stakeForFeeProgram.programId\n    );\n\n    const [lockEscrowPK] = deriveLockEscrowPda(\n      pool,\n      feeVaultKey,\n      ammProgram.programId\n    );\n    const lockEscrowAccount = await connection.getAccountInfo(lockEscrowPK);\n    const preInstructions: TransactionInstruction[] = [];\n    if (lockEscrowAccount === null) {\n      const createLockEscrowIx = await ammProgram.methods\n        .createLockEscrow()\n        .accounts({\n          pool,\n          lockEscrow: lockEscrowPK,\n          owner: feeVaultKey,\n          lpMint: poolState.lpMint,\n          payer,\n          systemProgram: SystemProgram.programId,\n        })\n        .instruction();\n      preInstructions.push(createLockEscrowIx);\n      const { ix: createEscrowAtaIx } = await getOrCreateATAInstruction(\n        connection,\n        poolState.lpMint,\n        lockEscrowPK,\n        payer\n      );\n\n      createEscrowAtaIx && preInstructions.push(createEscrowAtaIx);\n    }\n\n    const transaction = await stakeForFeeProgram.methods\n      .initializeVault({\n        ...param,\n        padding: new Array(64).fill(0),\n      })\n      .accounts({\n        vault: feeVaultKey,\n        stakeMint,\n        stakeTokenVault: stakeTokenVaultKey,\n        quoteMint,\n        quoteTokenVault: quoteTokenVaultKey,\n        topStakerList: topStakerListKey,\n        fullBalanceList: fullBalanceListKey,\n        pool,\n        tokenProgram: TOKEN_PROGRAM_ID,\n        associatedTokenProgram: ASSOCIATED_TOKEN_PROGRAM_ID,\n        lockEscrow: lockEscrowPK,\n        payer,\n        systemProgram: SystemProgram.programId,\n      })\n      .preInstructions(preInstructions)\n      .transaction();\n\n    const { blockhash, lastValidBlockHeight } =\n      await connection.getLatestBlockhash();\n\n    return new Transaction({\n      blockhash,\n      lastValidBlockHeight,\n      feePayer: payer,\n    }).add(transaction);\n  }\n\n  /**\n   * Creates a fee vault for the given pool.\n   *\n   * @param connection Solana connection\n   * @param pool The pool to create the fee vault for\n   * @param payer The payer of the transaction. Signer.\n   * @param config The configuration account for the fee vault. Get from `getConfigs`\n   * @param stakeMint The mint of the stake token. Must be token A/B of the pool.\n   * @param quoteMint The mint of the quote token. Must be token A/B of the pool.\n   * @param customStartClaimFeeTimestamp The custom start claim fee timestamp. If not passed, it will default to current timestamp. Else, lock escrow can only claim fee after this timestamp. Constraint: currentTimestamp <= `customStartClaimFeeTimestamp` <= currentTimestamp + configAccount.joinWindowDuration\n   * @param opt Optional options\n   *\n   * @returns A transaction that can be signed and sent to the network\n   */\n  public static async createFeeVaultWithParams(\n    connection: Connection,\n    pool: PublicKey,\n    payer: PublicKey,\n    stakeMint: PublicKey,\n    quoteMint: PublicKey,\n    param?: Exclude<InitializeVaultParams, \"padding\">,\n    opt?: Opt\n  ): Promise<Transaction> {\n    const stakeForFeeProgram = createStakeFeeProgram(\n      connection,\n      opt?.stakeForFeeProgramId ?? STAKE_FOR_FEE_PROGRAM_ID\n    );\n\n    const ammProgram = createDynamicAmmProgram(\n      connection,\n      opt?.dynamicAmmProgramId ?? DYNAMIC_AMM_PROGRAM_ID\n    );\n    const feeVaultKey = deriveFeeVault(pool, stakeForFeeProgram.programId);\n    const lpMint = deriveLpMint(pool, ammProgram.programId);\n\n    const topStakerListKey = deriveTopStakerList(\n      feeVaultKey,\n      stakeForFeeProgram.programId\n    );\n    const fullBalanceListKey = deriveFullBalanceList(\n      feeVaultKey,\n      stakeForFeeProgram.programId\n    );\n    const stakeTokenVaultKey = getAssociatedTokenAddressSync(\n      stakeMint,\n      feeVaultKey,\n      true\n    );\n    const quoteTokenVaultKey = getAssociatedTokenAddressSync(\n      quoteMint,\n      feeVaultKey,\n      true\n    );\n\n    const [lockEscrowPK] = deriveLockEscrowPda(\n      pool,\n      feeVaultKey,\n      ammProgram.programId\n    );\n\n    const lockEscrowAccount = await connection.getAccountInfo(lockEscrowPK);\n    const preInstructions: TransactionInstruction[] = [];\n\n    if (lockEscrowAccount === null) {\n      const createLockEscrowIx = await ammProgram.methods\n        .createLockEscrow()\n        .accounts({\n          pool,\n          lockEscrow: lockEscrowPK,\n          owner: feeVaultKey,\n          lpMint,\n          payer,\n          systemProgram: SystemProgram.programId,\n        })\n        .instruction();\n\n      preInstructions.push(createLockEscrowIx);\n    }\n\n    const transaction = await stakeForFeeProgram.methods\n      .initializeVault({\n        ...param,\n        padding: new Array(64).fill(0),\n      })\n      .accounts({\n        vault: feeVaultKey,\n        stakeTokenVault: stakeTokenVaultKey,\n        quoteTokenVault: quoteTokenVaultKey,\n        stakeMint,\n        quoteMint,\n        topStakerList: topStakerListKey,\n        fullBalanceList: fullBalanceListKey,\n        pool,\n        tokenProgram: TOKEN_PROGRAM_ID,\n        associatedTokenProgram: ASSOCIATED_TOKEN_PROGRAM_ID,\n        lockEscrow: lockEscrowPK,\n        payer,\n        systemProgram: SystemProgram.programId,\n      })\n      .preInstructions(preInstructions)\n      .transaction();\n\n    const { blockhash, lastValidBlockHeight } =\n      await connection.getLatestBlockhash();\n\n    return new Transaction({\n      blockhash,\n      lastValidBlockHeight,\n      feePayer: payer,\n    }).add(transaction);\n  }\n  /**\n   * Creates a fee vault for the given pool.\n   *\n   * @param connection Solana connection\n   * @param pool The pool to create the fee vault for\n   * @param payer The payer of the transaction. Signer.\n   * @param config The configuration account for the fee vault. Get from `getConfigs`\n   * @param stakeMint The mint of the stake token. Must be token A/B of the pool.\n   * @param quoteMint The mint of the quote token. Must be token A/B of the pool.\n   * @param customStartClaimFeeTimestamp The custom start claim fee timestamp. If not passed, it will default to current timestamp. Else, lock escrow can only claim fee after this timestamp. Constraint: currentTimestamp <= `customStartClaimFeeTimestamp` <= currentTimestamp + configAccount.joinWindowDuration\n   * @param opt Optional options\n   *\n   * @returns An instruction\n   */\n  public static async createFeeVaultInstructions(\n    connection: Connection,\n    pool: PublicKey,\n    payer: PublicKey,\n    stakeMint: PublicKey,\n    quoteMint: PublicKey,\n    param?: Exclude<InitializeVaultParams, \"padding\">,\n    opt?: Opt\n  ): Promise<TransactionInstruction[]> {\n    const stakeForFeeProgram = createStakeFeeProgram(\n      connection,\n      opt?.stakeForFeeProgramId ?? STAKE_FOR_FEE_PROGRAM_ID\n    );\n\n    const ammProgram = createDynamicAmmProgram(\n      connection,\n      opt?.dynamicAmmProgramId ?? DYNAMIC_AMM_PROGRAM_ID\n    );\n    const feeVaultKey = deriveFeeVault(pool, stakeForFeeProgram.programId);\n    const lpMint = deriveLpMint(pool, ammProgram.programId);\n\n    const topStakerListKey = deriveTopStakerList(\n      feeVaultKey,\n      stakeForFeeProgram.programId\n    );\n    const fullBalanceListKey = deriveFullBalanceList(\n      feeVaultKey,\n      stakeForFeeProgram.programId\n    );\n    const stakeTokenVaultKey = getAssociatedTokenAddressSync(\n      stakeMint,\n      feeVaultKey,\n      true\n    );\n    const quoteTokenVaultKey = getAssociatedTokenAddressSync(\n      quoteMint,\n      feeVaultKey,\n      true\n    );\n\n    const [lockEscrowPK] = deriveLockEscrowPda(\n      pool,\n      feeVaultKey,\n      ammProgram.programId\n    );\n\n    const lockEscrowAccount = await connection.getAccountInfo(lockEscrowPK);\n    const instructions: TransactionInstruction[] = [];\n\n    if (lockEscrowAccount === null) {\n      const createLockEscrowIx = await ammProgram.methods\n        .createLockEscrow()\n        .accounts({\n          pool,\n          lockEscrow: lockEscrowPK,\n          owner: feeVaultKey,\n          lpMint,\n          payer,\n          systemProgram: SystemProgram.programId,\n        })\n        .instruction();\n\n      instructions.push(createLockEscrowIx);\n    }\n\n    const createFeeVaultIx = await stakeForFeeProgram.methods\n      .initializeVault({\n        ...param,\n        padding: new Array(64).fill(0),\n      })\n      .accounts({\n        vault: feeVaultKey,\n        stakeTokenVault: stakeTokenVaultKey,\n        quoteTokenVault: quoteTokenVaultKey,\n        stakeMint,\n        quoteMint,\n        topStakerList: topStakerListKey,\n        fullBalanceList: fullBalanceListKey,\n        pool,\n        tokenProgram: TOKEN_PROGRAM_ID,\n        associatedTokenProgram: ASSOCIATED_TOKEN_PROGRAM_ID,\n        lockEscrow: lockEscrowPK,\n        payer,\n        systemProgram: SystemProgram.programId,\n      })\n      .instruction();\n\n    instructions.push(createFeeVaultIx);\n\n    return instructions;\n  }\n\n  /**\n   * Initializes a stake escrow for the given owner.\n   *\n   * @param connection Solana connection\n   * @param owner The owner of the stake escrow. Signer.\n   *\n   * @returns A transaction that can be signed and sent to the network\n   */\n  public async initializeStakeEscrow(owner: PublicKey): Promise<Transaction> {\n    const stakeEscrowKey = deriveStakeEscrow(\n      this.feeVaultKey,\n      owner,\n      this.stakeForFeeProgram.programId\n    );\n\n    const transaction = await this.stakeForFeeProgram.methods\n      .initializeStakeEscrow()\n      .accounts({\n        vault: this.feeVaultKey,\n        fullBalanceList: this.accountStates.feeVault.fullBalanceList,\n        topStakerList: this.accountStates.feeVault.topStakerList,\n        escrow: stakeEscrowKey,\n        owner,\n        systemProgram: SystemProgram.programId,\n      })\n      .transaction();\n\n    const { blockhash, lastValidBlockHeight } =\n      await this.connection.getLatestBlockhash();\n\n    return new Transaction({\n      blockhash,\n      lastValidBlockHeight,\n      feePayer: owner,\n    }).add(transaction);\n  }\n\n  findSmallestStakeEscrowInFullBalanceList(\n    skipOwner: PublicKey\n  ): PublicKey | null {\n    if (this.accountStates.fullBalanceListState.stakers.length == 0) {\n      return null;\n    }\n\n    const endIdx = this.accountStates.fullBalanceListState.stakers.length - 1;\n    let smallestBalance = U64_MAX;\n    let smallestOwner: PublicKey = null;\n\n    for (let i = endIdx; i >= 0; i--) {\n      const staker = this.accountStates.fullBalanceListState.stakers[i];\n      if (staker.owner.equals(skipOwner)) {\n        continue;\n      }\n\n      if (staker.balance.isZero()) {\n        smallestOwner = staker.owner;\n        break;\n      }\n\n      if (staker.balance.lt(smallestBalance)) {\n        smallestOwner = staker.owner;\n        smallestBalance = staker.balance;\n      }\n    }\n\n    return smallestOwner\n      ? deriveStakeEscrow(\n          this.feeVaultKey,\n          smallestOwner,\n          this.stakeForFeeProgram.programId\n        )\n      : null;\n  }\n\n  findLargestStakerNotInTopListFromFullBalanceList(lookupNumber: number) {\n    return findLargestStakerNotInTopListFromFullBalanceList(\n      lookupNumber,\n      this.accountStates.fullBalanceListState\n    ).map((s) => {\n      return deriveStakeEscrow(\n        this.feeVaultKey,\n        s.owner,\n        this.stakeForFeeProgram.programId\n      );\n    });\n  }\n\n  findReplaceableTopStaker(lookupNumber: number) {\n    return findReplaceableTopStaker(\n      lookupNumber,\n      this.accountStates.topStakerListState\n    ).map((s) => {\n      return deriveStakeEscrow(\n        this.feeVaultKey,\n        s.owner,\n        this.stakeForFeeProgram.programId\n      );\n    });\n  }\n\n  /**\n   * Withdraws the tokens from the given unstake key and sends them to the given owner.\n   * @param unstakeKey The public key of the unstake account to withdraw from.\n   * @param owner The public key of the account to send the withdrawn tokens to.\n   * @returns A transaction that can be signed and sent to the network.\n   */\n  public async withdraw(\n    unstakeKey: PublicKey,\n    owner: PublicKey\n  ): Promise<Transaction> {\n    const stakeEscrowKey = deriveStakeEscrow(\n      this.feeVaultKey,\n      owner,\n      this.stakeForFeeProgram.programId\n    );\n\n    const preInstructions = [];\n\n    const { ataPubKey: userStakeToken, ix: initializeUserStakeTokenIx } =\n      await getOrCreateATAInstruction(\n        this.connection,\n        this.accountStates.feeVault.stakeMint,\n        owner\n      );\n\n    initializeUserStakeTokenIx &&\n      preInstructions.push(initializeUserStakeTokenIx);\n\n    const transaction = await this.stakeForFeeProgram.methods\n      .withdraw()\n      .accounts({\n        unstake: unstakeKey,\n        stakeEscrow: stakeEscrowKey,\n        stakeTokenVault: this.accountStates.feeVault.stakeTokenVault,\n        vault: this.feeVaultKey,\n        userStakeToken,\n        tokenProgram: TOKEN_PROGRAM_ID,\n        owner,\n      })\n      .preInstructions(preInstructions)\n      .transaction();\n\n    const { blockhash, lastValidBlockHeight } =\n      await this.connection.getLatestBlockhash();\n\n    return new Transaction({\n      blockhash,\n      lastValidBlockHeight,\n      feePayer: owner,\n    }).add(transaction);\n  }\n\n  /**\n   * Requests to unstake a given amount of tokens from the vault.\n   * Creates a new `Unstake` account and initializes it to the given owner.\n   *\n   * @param amount The amount of tokens to unstake\n   * @param unstakeKeypair The new unstake account. Arbitrarily generated. Signer.\n   * @param owner The owner of the stake. Signer.\n   * @returns The transaction to execute the unstake instruction\n   */\n  public async unstake(\n    amount: BN,\n    unstakeKeypair: PublicKey,\n    owner: PublicKey\n  ): Promise<Transaction> {\n    const stakeEscrowKey = deriveStakeEscrow(\n      this.feeVaultKey,\n      owner,\n      this.stakeForFeeProgram.programId\n    );\n\n    const stakeEscrowState =\n      await this.stakeForFeeProgram.account.stakeEscrow.fetch(stakeEscrowKey);\n\n    const remainingAccounts: Array<AccountMeta> = [];\n\n    if (Boolean(stakeEscrowState.inTopList)) {\n      const candidateToEnterTopList: Array<AccountMeta> =\n        this.findLargestStakerNotInTopListFromFullBalanceList(3).map((key) => {\n          return {\n            pubkey: key,\n            isSigner: false,\n            isWritable: true,\n          };\n        });\n\n      remainingAccounts.push(...candidateToEnterTopList);\n    }\n\n    const transaction = await this.stakeForFeeProgram.methods\n      .requestUnstake(amount)\n      .accounts({\n        unstake: unstakeKeypair,\n        vault: this.feeVaultKey,\n        topStakerList: this.accountStates.feeVault.topStakerList,\n        fullBalanceList: this.accountStates.feeVault.fullBalanceList,\n        stakeEscrow: stakeEscrowKey,\n        stakeTokenVault: this.accountStates.feeVault.stakeTokenVault,\n        quoteTokenVault: this.accountStates.feeVault.quoteTokenVault,\n        owner,\n        pool: this.accountStates.feeVault.pool,\n        lpMint: this.accountStates.ammPool.lpMint,\n        lockEscrow: this.accountStates.feeVault.lockEscrow,\n        escrowVault: this.escrowVaultKey,\n        aTokenVault: this.accountStates.aVault.tokenVault,\n        bTokenVault: this.accountStates.bVault.tokenVault,\n        aVault: this.accountStates.ammPool.aVault,\n        bVault: this.accountStates.ammPool.bVault,\n        aVaultLp: this.accountStates.ammPool.aVaultLp,\n        bVaultLp: this.accountStates.ammPool.bVaultLp,\n        aVaultLpMint: this.accountStates.aVault.lpMint,\n        bVaultLpMint: this.accountStates.bVault.lpMint,\n        ammProgram: this.dynamicAmmProgram.programId,\n        vaultProgram: this.dynamicVaultProgram.programId,\n        tokenProgram: TOKEN_PROGRAM_ID,\n      })\n      .remainingAccounts(remainingAccounts)\n      .transaction();\n\n    const [{ blockhash, lastValidBlockHeight }, setCUIx] =\n      await Promise.all([\n        this.connection.getLatestBlockhash(), \n        getEstimatedComputeUnitIxWithBuffer(\n          this.stakeForFeeProgram.provider.connection,\n          transaction.instructions,\n          owner,\n        )\n      ]);\n    transaction.instructions.unshift(setCUIx);\n\n    return new Transaction({\n      blockhash,\n      lastValidBlockHeight,\n      feePayer: owner,\n    }).add(transaction);\n  }\n\n  /**\n   * @description\n   * Claim fee from stake escrow.\n   *\n   * @param owner Owner of stake escrow.\n   * @param maxFee Max fee\n   * @returns Transaction\n   */\n  public async claimFee(owner: PublicKey, maxFee: BN): Promise<Transaction> {\n    const stakeEscrowKey = deriveStakeEscrow(\n      this.feeVaultKey,\n      owner,\n      this.stakeForFeeProgram.programId\n    );\n\n    const quoteTokenMint = this.accountStates.ammPool.tokenAMint.equals(\n      this.accountStates.feeVault.stakeMint\n    )\n      ? this.accountStates.ammPool.tokenBMint\n      : this.accountStates.ammPool.tokenAMint;\n\n    const preInstructions = [];\n\n    const { ataPubKey: userQuoteToken, ix: initializeUserQuoteTokenIx } =\n      await getOrCreateATAInstruction(this.connection, quoteTokenMint, owner);\n\n    initializeUserQuoteTokenIx &&\n      preInstructions.push(initializeUserQuoteTokenIx);\n\n    const remainingAccounts: Array<AccountMeta> = [];\n\n    const smallestStakeEscrows: Array<AccountMeta> =\n      this.findReplaceableTopStaker(2).map((key) => {\n        return {\n          pubkey: key,\n          isWritable: true,\n          isSigner: false,\n        };\n      });\n\n    remainingAccounts.push(...smallestStakeEscrows);\n\n    const smallestStakeEscrow =\n      this.findSmallestStakeEscrowInFullBalanceList(owner);\n\n    const postInstructions = [await unwrapSOLInstruction(owner)];\n\n    const transaction = await this.stakeForFeeProgram.methods\n      .claimFee(maxFee)\n      .accounts({\n        userQuoteToken,\n        vault: this.feeVaultKey,\n        fullBalanceList: this.accountStates.feeVault.fullBalanceList,\n        topStakerList: this.accountStates.feeVault.topStakerList,\n        stakeEscrow: stakeEscrowKey,\n        stakeTokenVault: this.accountStates.feeVault.stakeTokenVault,\n        quoteTokenVault: this.accountStates.feeVault.quoteTokenVault,\n        owner,\n        pool: this.accountStates.feeVault.pool,\n        lpMint: this.accountStates.ammPool.lpMint,\n        lockEscrow: this.accountStates.feeVault.lockEscrow,\n        escrowVault: this.escrowVaultKey,\n        aTokenVault: this.accountStates.aVault.tokenVault,\n        bTokenVault: this.accountStates.bVault.tokenVault,\n        aVault: this.accountStates.ammPool.aVault,\n        bVault: this.accountStates.ammPool.bVault,\n        aVaultLp: this.accountStates.ammPool.aVaultLp,\n        bVaultLp: this.accountStates.ammPool.bVaultLp,\n        aVaultLpMint: this.accountStates.aVault.lpMint,\n        bVaultLpMint: this.accountStates.bVault.lpMint,\n        ammProgram: this.dynamicAmmProgram.programId,\n        vaultProgram: this.dynamicVaultProgram.programId,\n        smallestStakeEscrow,\n        tokenProgram: TOKEN_PROGRAM_ID,\n      })\n      .preInstructions(preInstructions)\n      .postInstructions(postInstructions)\n      .remainingAccounts(remainingAccounts)\n      .transaction();\n\n      const [{ blockhash, lastValidBlockHeight }, setCUIx] =\n      await Promise.all([\n        this.connection.getLatestBlockhash(), \n        getEstimatedComputeUnitIxWithBuffer(\n          this.stakeForFeeProgram.provider.connection,\n          transaction.instructions,\n          owner,\n        )\n      ]);\n    transaction.instructions.unshift(setCUIx);\n\n    return new Transaction({\n        blockhash,\n        lastValidBlockHeight,\n        feePayer: owner,\n      }).add(transaction);\n  }\n\n  /**\n   * Stake tokens in the vault for the given owner.\n   *\n   * Creates a new stake escrow if one doesn't exist.\n   *\n   * @param maxAmount The max amount of tokens to stake\n   * @param owner The owner of the stake. Signer.\n   * @param owner The payer for fee and account rental. Signer.\n   * @param replaceableTopStakerCount The number of top stakers that can be replaced. Default is 2 (Max = 2).\n   * @returns The transaction to execute the stake instruction\n   */\n  public async stake(\n    maxAmount: BN,\n    owner: PublicKey,\n    replaceableTopStakerCount = 2\n  ): Promise<Transaction> {\n    if (replaceableTopStakerCount > 2) {\n      throw new Error(\n        \"replaceableTopStakerCount must be less than or equal to 2\"\n      );\n    }\n    const preInstructions: Array<TransactionInstruction> = [];\n    const { stakeEscrowKey, ix: initializeStakeEscrowIx } =\n      await getOrCreateStakeEscrowInstruction(\n        this.connection,\n        this.feeVaultKey,\n        owner,\n        this.stakeForFeeProgram.programId\n      );\n\n    initializeStakeEscrowIx && preInstructions.push(initializeStakeEscrowIx);\n\n    const userStakeTokenKey = getAssociatedTokenAddressSync(\n      this.accountStates.feeVault.stakeMint,\n      owner\n    );\n\n    const remainingAccounts: Array<AccountMeta> = [];\n\n    const smallestStakeEscrows: Array<AccountMeta> =\n      this.findReplaceableTopStaker(replaceableTopStakerCount).map((key) => {\n        return {\n          pubkey: key,\n          isWritable: true,\n          isSigner: false,\n        };\n      });\n\n    remainingAccounts.push(...smallestStakeEscrows);\n\n    const smallestStakeEscrow =\n      this.findSmallestStakeEscrowInFullBalanceList(owner);\n\n    const transaction = await this.stakeForFeeProgram.methods\n      .stake(maxAmount)\n      .accounts({\n        vault: this.feeVaultKey,\n        stakeTokenVault: this.accountStates.feeVault.stakeTokenVault,\n        quoteTokenVault: this.accountStates.feeVault.quoteTokenVault,\n        topStakerList: this.accountStates.feeVault.topStakerList,\n        fullBalanceList: this.accountStates.feeVault.fullBalanceList,\n        stakeEscrow: stakeEscrowKey,\n        smallestStakeEscrow,\n        userStakeToken: userStakeTokenKey,\n        owner,\n        pool: this.accountStates.feeVault.pool,\n        lpMint: this.accountStates.ammPool.lpMint,\n        lockEscrow: this.accountStates.feeVault.lockEscrow,\n        escrowVault: this.escrowVaultKey,\n        aTokenVault: this.accountStates.aVault.tokenVault,\n        bTokenVault: this.accountStates.bVault.tokenVault,\n        aVault: this.accountStates.ammPool.aVault,\n        bVault: this.accountStates.ammPool.bVault,\n        aVaultLp: this.accountStates.ammPool.aVaultLp,\n        bVaultLp: this.accountStates.ammPool.bVaultLp,\n        aVaultLpMint: this.accountStates.aVault.lpMint,\n        bVaultLpMint: this.accountStates.bVault.lpMint,\n        ammProgram: this.dynamicAmmProgram.programId,\n        vaultProgram: this.dynamicVaultProgram.programId,\n        tokenProgram: TOKEN_PROGRAM_ID,\n      })\n      .preInstructions(preInstructions)\n      .remainingAccounts(remainingAccounts)\n      .transaction();\n\n      const [{ blockhash, lastValidBlockHeight }, setCUIx] =\n      await Promise.all([\n        this.connection.getLatestBlockhash(), \n        getEstimatedComputeUnitIxWithBuffer(\n          this.stakeForFeeProgram.provider.connection,\n          transaction.instructions,\n          owner,\n        )\n      ]);\n    transaction.instructions.unshift(setCUIx);\n\n    return new Transaction({\n      blockhash,\n      lastValidBlockHeight,\n      feePayer: owner,\n    }).add(transaction);\n  }\n\n  /**\n   * Cancels an unstake request, given the public key of the unstake account.\n   * @param unstakeKey The public key of the unstake account to cancel.\n   * @param owner The public key of the owner of the stake.\n   * @returns A transaction to execute the cancel unstake instruction.\n   */\n  public async cancelUnstake(\n    unstakeKey: PublicKey,\n    owner: PublicKey\n  ): Promise<Transaction> {\n    const stakeEscrowKey = deriveStakeEscrow(\n      this.feeVaultKey,\n      owner,\n      this.stakeForFeeProgram.programId\n    );\n\n    const remainingAccounts: Array<AccountMeta> = [];\n    const stakeEscrowState =\n      await this.stakeForFeeProgram.account.stakeEscrow.fetch(stakeEscrowKey);\n\n    if (!Boolean(stakeEscrowState.inTopList)) {\n      const smallestStakeEscrows: Array<AccountMeta> =\n        this.findReplaceableTopStaker(3).map((key) => {\n          return {\n            pubkey: key,\n            isWritable: true,\n            isSigner: false,\n          };\n        });\n\n      remainingAccounts.push(...smallestStakeEscrows);\n    }\n\n    const smallestStakeEscrow =\n      this.findSmallestStakeEscrowInFullBalanceList(owner);\n\n    const preInstructions: Array<TransactionInstruction> = [];\n    const transaction = await this.stakeForFeeProgram.methods\n      .cancelUnstake()\n      .accounts({\n        unstake: unstakeKey,\n        vault: this.feeVaultKey,\n        topStakerList: this.accountStates.feeVault.topStakerList,\n        fullBalanceList: this.accountStates.feeVault.fullBalanceList,\n        stakeEscrow: stakeEscrowKey,\n        smallestStakeEscrow,\n        stakeTokenVault: this.accountStates.feeVault.stakeTokenVault,\n        quoteTokenVault: this.accountStates.feeVault.quoteTokenVault,\n        owner,\n        pool: this.accountStates.feeVault.pool,\n        lpMint: this.accountStates.ammPool.lpMint,\n        lockEscrow: this.accountStates.feeVault.lockEscrow,\n        escrowVault: this.escrowVaultKey,\n        aTokenVault: this.accountStates.aVault.tokenVault,\n        bTokenVault: this.accountStates.bVault.tokenVault,\n        aVault: this.accountStates.ammPool.aVault,\n        bVault: this.accountStates.ammPool.bVault,\n        aVaultLp: this.accountStates.ammPool.aVaultLp,\n        bVaultLp: this.accountStates.ammPool.bVaultLp,\n        aVaultLpMint: this.accountStates.aVault.lpMint,\n        bVaultLpMint: this.accountStates.bVault.lpMint,\n        ammProgram: this.dynamicAmmProgram.programId,\n        vaultProgram: this.dynamicVaultProgram.programId,\n        tokenProgram: TOKEN_PROGRAM_ID,\n      })\n      .remainingAccounts(remainingAccounts)\n      .preInstructions(preInstructions)\n      .transaction();\n\n      const [{ blockhash, lastValidBlockHeight }, setCUIx] =\n      await Promise.all([\n        this.connection.getLatestBlockhash(), \n        getEstimatedComputeUnitIxWithBuffer(\n          this.stakeForFeeProgram.provider.connection,\n          transaction.instructions,\n          owner,\n        )\n      ]);\n    transaction.instructions.unshift(setCUIx);\n\n    return new Transaction({\n      blockhash,\n      lastValidBlockHeight,\n      feePayer: owner,\n    }).add(transaction);\n  }\n\n  /**\n   * Refreshes the account states and returns the old states.\n   *\n   * @returns Old AccountStates object\n   */\n  public async refreshStates(): Promise<AccountStates> {\n    const oldAccountStates = this.accountStates;\n    this.accountStates = await StakeForFee.fetchAccountStates(\n      this.connection,\n      this.feeVaultKey,\n      this.accountStates.feeVault.topStakerList,\n      this.accountStates.feeVault.fullBalanceList,\n      this.accountStates.feeVault.pool,\n      {\n        stakeForFeeProgramId: this.stakeForFeeProgram.programId,\n        dynamicAmmProgramId: this.dynamicAmmProgram.programId,\n        dynamicVaultProgramId: this.dynamicVaultProgram.programId,\n      }\n    );\n    return oldAccountStates;\n  }\n\n  /** Start of helper functions */\n\n  /**\n   * Gets all staked info for the given owner.\n   *\n   * @param connection The connection to use.\n   * @param owner The owner's pubkey.\n   * @returns A promise that resolves with an array of stake escrows that match the given owner.\n   */\n  static async getAllStakedVaultByUser(\n    connection: Connection,\n    owner: PublicKey\n  ) {\n    const stakeForFeeProgram = createStakeFeeProgram(\n      connection,\n      STAKE_FOR_FEE_PROGRAM_ID\n    );\n\n    const [stakeEscrow, unstakeList] = await Promise.all([\n      stakeForFeeProgram.account.stakeEscrow.all([\n        { memcmp: { offset: 8, bytes: owner.toBase58() } },\n      ]),\n      stakeForFeeProgram.account.unstake.all([\n        { memcmp: { offset: 8 + 32 + 8 * 3, bytes: owner.toBase58() } },\n      ]),\n    ]);\n    const vaultsKey = stakeEscrow.map((stake) => stake.account.vault);\n    const vaults = await stakeForFeeProgram.account.feeVault.fetchMultiple(\n      vaultsKey\n    );\n    return stakeEscrow.map((stake, index) => {\n      const vault = vaults[index];\n      const unstake = unstakeList\n        .filter(({ account }) => account.stakeEscrow.equals(stake.publicKey))\n        .map(({ account }) => account);\n      return { stake: stake.account, vault, unstake };\n    });\n  }\n\n  /**\n   * Gets all unstake records for the given stake escrow.\n   *\n   * @param connection The connection to use.\n   * @param owner The owner's pubkey.\n   * @returns A promise that resolves with an array of unstake records that match the given stake escrow.\n   */\n  static async getUnstakeByUser(\n    connection: Connection,\n    owner: PublicKey,\n    feeVault: PublicKey\n  ) {\n    const stakeForFeeProgram = createStakeFeeProgram(\n      connection,\n      STAKE_FOR_FEE_PROGRAM_ID\n    );\n\n    const [{ publicKey: stakeEscrow }] =\n      await stakeForFeeProgram.account.stakeEscrow.all([\n        { memcmp: { offset: 8, bytes: owner.toBase58() } },\n        { memcmp: { offset: 8 + 32, bytes: feeVault.toBase58() } },\n      ]);\n\n    return await stakeForFeeProgram.account.unstake.all([\n      {\n        memcmp: {\n          offset: 8,\n          bytes: stakeEscrow.toBase58(),\n        },\n      },\n    ]);\n  }\n\n  /**\n   * Gets all fee vault accounts for the given stake-for-fee program.\n   * @param connection The connection to use.\n   * @param programId The program id of the stake-for-fee program. Defaults to the idl program id.\n   * @returns A promise that resolves with an array of fee vault accounts.\n   */\n  static async getAllFeeVault(connection: Connection, programId?: PublicKey) {\n    const stakeForFeeProgram = createStakeFeeProgram(\n      connection,\n      programId ?? STAKE_FOR_FEE_PROGRAM_ID\n    );\n\n    return stakeForFeeProgram.account.feeVault.all();\n  }\n\n  /**\n   * Calculates the minimum stake amount required to enter the top staker list.\n   * @returns The minimum stake amount required to enter the top staker list.\n   */\n  public getTopStakerListEntryStakeAmount() {\n    return getTopStakerListStateEntryStakeAmount(\n      this.accountStates.topStakerListState\n    );\n  }\n\n  /**\n   * Calculates the total amount of fees that are pending to be claimed from the locked escrow for the farm.\n   * @returns The total amount of fees that are pending to be claimed from the locked escrow for the farm.\n   */\n  public getFarmPendingClaimFees() {\n    return getLockedEscrowPendingFee(\n      this.accountStates.clock.unixTimestamp,\n      this.accountStates.feeVault,\n      this.accountStates.lockEscrow,\n      this.accountStates.aVault,\n      this.accountStates.bVault,\n      this.accountStates.aVaultLp,\n      this.accountStates.bVaultLp,\n      this.accountStates.aVaultLpMint,\n      this.accountStates.bVaultLpMint,\n      this.accountStates.poolLpMint\n    );\n  }\n\n  /**\n   * Calculates the total amount of fees that have been released from the locked escrow to the top staker list for the farm.\n   * @returns An array of two BNs. The first element is the total amount of token A fees that have been released. The second element is the total amount of token B fees that have been released.\n   */\n  public getFarmReleasedFees() {\n    const [newFeeA, newFeeB] = this.getFarmPendingClaimFees();\n\n    const newLockedFeeA =\n      this.accountStates.feeVault.topStakerInfo.lockedFeeA.add(newFeeA);\n    const newLockedFeeB =\n      this.accountStates.feeVault.topStakerInfo.lockedFeeB.add(newFeeB);\n\n    const currentTime = this.accountStates.clock.unixTimestamp;\n    const secondsElapsed = currentTime.sub(\n      this.accountStates.feeVault.topStakerInfo.lastUpdatedAt\n    );\n\n    const secondsToFullUnlock =\n      this.accountStates.feeVault.configuration.secondsToFullUnlock;\n\n    if (secondsElapsed.gte(secondsToFullUnlock)) {\n      return [newLockedFeeA, newLockedFeeB];\n    }\n\n    const releasedFeeA = newLockedFeeA\n      .mul(secondsElapsed)\n      .div(secondsToFullUnlock);\n\n    const releasedFeeB = newLockedFeeB\n      .mul(secondsElapsed)\n      .div(secondsToFullUnlock);\n\n    return [releasedFeeA, releasedFeeB];\n  }\n\n  /**\n   * The function `getUserStakeAndClaimBalance` calculates the stake amount and unclaimed fees for a\n   * user in a staking program.\n   * @param {PublicKey} user - The `getUserStakeAndClaimBalance` function calculates the stake amount\n   * and unclaimed fees for a specific user. Here's a breakdown of the parameters used in the function:\n   * @returns The function `getUserStakeAndClaimBalance` returns an object with two properties:\n   * 1. `stakedAmount`: The amount of stake in the stake escrow account for the specified user.\n   * 2. `unclaimFe`: An object containing two properties:\n   *    - `feeA`: The total amount of fee A that can be claimed by the user, which includes both the\n   * new fee A calculated\n   *    - `feeB`: The total amount of fee B that can be claimed by the user, which includes both the\n   * new fee B calculated\n   */\n  public async getUserStakeAndClaimBalance(user: PublicKey) {\n    const stakeEscrowKey = deriveStakeEscrow(\n      this.feeVaultKey,\n      user,\n      this.stakeForFeeProgram.programId\n    );\n\n    const stakeEscrow =\n      await this.stakeForFeeProgram.account.stakeEscrow.fetchNullable(\n        stakeEscrowKey\n      );\n\n    if (!stakeEscrow) {\n      return {\n        stakeEscrow: null,\n        unclaimFee: {\n          feeA: null,\n          feeB: null,\n        },\n      };\n    }\n\n    if (!Boolean(stakeEscrow.inTopList)) {\n      return {\n        stakeEscrow,\n        unclaimFee: {\n          feeA: stakeEscrow.feeAPending,\n          feeB: stakeEscrow.feeBPending,\n        },\n      };\n    }\n\n    const [releasedFeeA, releasedFeeB] = this.getFarmReleasedFees();\n\n    const effectiveStakeAmount =\n      this.accountStates.feeVault.topStakerInfo.effectiveStakeAmount;\n\n    const newFeeAPerLiquidity =\n      releasedFeeA.isNeg() || effectiveStakeAmount.isZero()\n        ? new BN(0)\n        : releasedFeeA.shln(64).div(effectiveStakeAmount);\n    const newFeeBPerLiquidity =\n      releasedFeeB.isNeg() || effectiveStakeAmount.isZero()\n        ? new BN(0)\n        : releasedFeeB.shln(64).div(effectiveStakeAmount);\n\n    const newCumulativeFeeAPerLiquidity =\n      this.accountStates.feeVault.topStakerInfo.cumulativeFeeAPerLiquidity.add(\n        newFeeAPerLiquidity\n      );\n    const newCumulativeFeeBPerLiquidity =\n      this.accountStates.feeVault.topStakerInfo.cumulativeFeeBPerLiquidity.add(\n        newFeeBPerLiquidity\n      );\n\n    const newFeeA = newCumulativeFeeAPerLiquidity\n      .sub(stakeEscrow.feeAPerLiquidityCheckpoint)\n      .mul(stakeEscrow.stakeAmount)\n      .shrn(64);\n\n    const newFeeB = newCumulativeFeeBPerLiquidity\n      .sub(stakeEscrow.feeBPerLiquidityCheckpoint)\n      .mul(stakeEscrow.stakeAmount)\n      .shrn(64);\n\n    return {\n      stakeEscrow,\n      unclaimFee: {\n        feeA: newFeeA.add(stakeEscrow.feeAPending),\n        feeB: newFeeB.add(stakeEscrow.feeBPending),\n      },\n    };\n  }\n\n  /**\n   * Calculates the total amount of fees that are pending to be claimed for the given stake escrow.\n   * @param stakeEscrow The stake escrow to calculate the pending fees for.\n   * @returns An array of two BNs. The first element is the total amount of token A fees that are pending to be claimed. The second element is the total amount of token B fees that are pending to be claimed.\n   */\n  public getStakeEscrowPendingFees(stakeEscrow: StakeEscrow) {\n    const [releasedFeeA, releasedFeeB] = this.getFarmReleasedFees();\n\n    const effectiveStakeAmount =\n      this.accountStates.feeVault.topStakerInfo.effectiveStakeAmount;\n\n    const newFeeAPerLiquidity = releasedFeeA.shln(64).div(effectiveStakeAmount);\n    const newFeeBPerLiquidity = releasedFeeB.shln(64).div(effectiveStakeAmount);\n\n    const newCumulativeFeeAPerLiquidity =\n      this.accountStates.feeVault.topStakerInfo.cumulativeFeeAPerLiquidity.add(\n        newFeeAPerLiquidity\n      );\n    const newCumulativeFeeBPerLiquidity =\n      this.accountStates.feeVault.topStakerInfo.cumulativeFeeBPerLiquidity.add(\n        newFeeBPerLiquidity\n      );\n\n    const newFeeA = newCumulativeFeeAPerLiquidity\n      .sub(stakeEscrow.feeAPerLiquidityCheckpoint)\n      .mul(stakeEscrow.stakeAmount)\n      .shrn(64);\n\n    const newFeeB = newCumulativeFeeBPerLiquidity\n      .sub(stakeEscrow.feeBPerLiquidityCheckpoint)\n      .mul(stakeEscrow.stakeAmount)\n      .shrn(64);\n\n    return [\n      newFeeA.add(stakeEscrow.feeAPending),\n      newFeeB.add(stakeEscrow.feeBPending),\n    ];\n  }\n}\n","import { PublicKey } from \"@solana/web3.js\";\nimport { BN } from \"bn.js\";\n\nexport const STAKE_FOR_FEE_PROGRAM_ID = new PublicKey(\n  \"FEESngU3neckdwib9X3KWqdL7Mjmqk9XNp3uh5JbP4KP\"\n);\n\nexport const DYNAMIC_AMM_PROGRAM_ID = new PublicKey(\n  \"Eo7WjKq67rjJQSZxS6z3YkapzY3eMj6Xy8X5EQVn5UaB\"\n);\n\nexport const DYNAMIC_VAULT_PROGRAM_ID = new PublicKey(\n  \"24Uqj9JCLxUeoC3hGfh5W3s9FM9uCHDS2SG3LYwBpyTi\"\n);\n\nexport const FULL_BALANCE_LIST_HARD_LIMIT = new BN(10000);\nexport const U64_MAX = new BN(\"18446744073709551615\");\n","import { AccountInfo } from \"@solana/web3.js\";\nimport {\n  FeeVault,\n  FullBalanceListMetadata,\n  FullBalanceListState,\n  StakeForFeeProgram,\n  StakerBalance,\n  TopListMetadata,\n  TopStakerListState,\n} from \"../types\";\n\nexport function decodeFullBalanceState(\n  stakeForFeeProgram: StakeForFeeProgram,\n  account: AccountInfo<Buffer>\n): FullBalanceListState {\n  const metadata: FullBalanceListMetadata =\n    stakeForFeeProgram.coder.accounts.decode(\n      \"fullBalanceListMetadata\",\n      account.data\n    );\n\n  const stakerBalances: Array<StakerBalance> = [];\n  const stakerBalanceSize = 48;\n\n  const fullBalanceListSlice = account.data.slice(8 + 40);\n  for (let i = 0; i < metadata.length.toNumber(); i++) {\n    const offset = i * stakerBalanceSize;\n    const slice = fullBalanceListSlice.slice(\n      offset,\n      offset + stakerBalanceSize\n    );\n    const stakerBalance: StakerBalance = stakeForFeeProgram.coder.types.decode(\n      \"StakerBalance\",\n      Buffer.from(slice)\n    );\n    stakerBalances.push(stakerBalance);\n  }\n\n  return {\n    metadata,\n    stakers: stakerBalances,\n  };\n}\n\nexport function decodeTopStakerListState(\n  stakeForFeeProgram: StakeForFeeProgram,\n  feeVault: FeeVault,\n  account: AccountInfo<Buffer>\n): TopStakerListState {\n  const topStakerMetadataState: TopListMetadata =\n    stakeForFeeProgram.coder.accounts.decode(\"topListMetadata\", account.data);\n\n  const topStakerListSlice = account.data.slice(8 + 32);\n  const stakerMetadataSize = 48;\n\n  const topStakerList: TopStakerListState = {\n    metadata: topStakerMetadataState,\n    stakers: [],\n  };\n\n  for (let i = 0; i < feeVault.topStakerInfo.currentLength.toNumber(); i++) {\n    const offset = i * stakerMetadataSize;\n    const slice = topStakerListSlice.slice(offset, offset + stakerMetadataSize);\n\n    const stakerMetadata = stakeForFeeProgram.coder.types.decode(\n      \"StakerMetadata\",\n      Buffer.from(slice)\n    );\n\n    topStakerList.stakers.push(stakerMetadata);\n  }\n\n  return topStakerList;\n}\n","import BN from \"bn.js\";\nimport {\n  DynamicPool,\n  DynamicVault,\n  FeeVault,\n  LockEscrow,\n  MIN_LOCK_ESCROW_CLAIM_FEE_DURATION,\n} from \"../types\";\nimport {\n  getAmountByShare,\n  getAmountByShare as getAmountByShareWithLockedProfit,\n} from \"./dynamic_vault\";\nimport { RawAccount, RawMint } from \"@solana/spl-token\";\nimport Decimal from \"decimal.js\";\n\nexport function getTokenBalances(\n  currentTime: BN,\n  aVault: DynamicVault,\n  bVault: DynamicVault,\n  aVaultLp: RawAccount,\n  bVaultLp: RawAccount,\n  aVaultLpMint: RawMint,\n  bVaultLpMint: RawMint\n) {\n  const tokenAAmount = getAmountByShareWithLockedProfit(\n    currentTime,\n    aVault,\n    new BN(aVaultLp.amount.toString()),\n    new BN(aVaultLpMint.supply.toString())\n  );\n\n  const tokenBAmount = getAmountByShareWithLockedProfit(\n    currentTime,\n    bVault,\n    new BN(bVaultLp.amount.toString()),\n    new BN(bVaultLpMint.supply.toString())\n  );\n\n  return [tokenAAmount, tokenBAmount];\n}\n\nexport function getVirtualPrice(\n  tokenAAmount: BN,\n  tokenBAmount: BN,\n  lpSupply: BN\n) {\n  if (lpSupply.isZero()) {\n    return new BN(0);\n  }\n\n  // Stake for fee only support constant product pool\n  const k = tokenAAmount.mul(tokenBAmount);\n  const d = new BN(new Decimal(k.toString()).sqrt().floor().toString());\n  return d.shln(64).div(lpSupply);\n}\n\nexport function getLockedEscrowPendingFee(\n  currentTime: BN,\n  feeVault: FeeVault,\n  lockEscrow: LockEscrow,\n  aVault: DynamicVault,\n  bVault: DynamicVault,\n  aVaultLp: RawAccount,\n  bVaultLp: RawAccount,\n  aVaultLpMint: RawMint,\n  bVaultLpMint: RawMint,\n  poolLpMint: RawMint\n) {\n  if (currentTime.lte(feeVault.topStakerInfo.lastClaimFeeAt)) {\n    return [new BN(0), new BN(0)];\n  }\n\n  const secondsElapsedSinceLastClaim = currentTime.sub(\n    feeVault.topStakerInfo.lastClaimFeeAt\n  );\n\n  if (secondsElapsedSinceLastClaim.lt(MIN_LOCK_ESCROW_CLAIM_FEE_DURATION)) {\n    return [new BN(0), new BN(0)];\n  }\n\n  const [tokenAAmount, tokenBAmount] = getTokenBalances(\n    currentTime,\n    aVault,\n    bVault,\n    aVaultLp,\n    bVaultLp,\n    aVaultLpMint,\n    bVaultLpMint\n  );\n\n  const currentLpPerToken = getVirtualPrice(\n    tokenAAmount,\n    tokenBAmount,\n    new BN(poolLpMint.supply.toString())\n  );\n\n  const newFee = currentLpPerToken.gt(lockEscrow.lpPerToken)\n    ? lockEscrow.totalLockedAmount\n        .mul(currentLpPerToken.sub(lockEscrow.lpPerToken))\n        .div(currentLpPerToken)\n    : new BN(0);\n\n  if (newFee.isZero()) {\n    return [new BN(0), new BN(0)];\n  }\n\n  const aVaultLpToBurn = newFee\n    .mul(new BN(aVaultLp.amount.toString()))\n    .div(new BN(poolLpMint.supply.toString()));\n\n  const bVaultLpToBurn = newFee\n    .mul(new BN(bVaultLp.amount.toString()))\n    .div(new BN(poolLpMint.supply.toString()));\n\n  const feeA = getAmountByShare(\n    currentTime,\n    aVault,\n    aVaultLpToBurn,\n    new BN(aVaultLpMint.supply.toString())\n  );\n\n  const feeB = getAmountByShare(\n    currentTime,\n    bVault,\n    bVaultLpToBurn,\n    new BN(bVaultLpMint.supply.toString())\n  );\n\n  return [feeA, feeB];\n}\n","import { BN, IdlAccounts, IdlTypes, Program } from \"@coral-xyz/anchor\";\nimport { StakeForFee } from \"../idls/stake_for_fee\";\nimport { Amm } from \"../idls/dynamic_amm\";\nimport { Vault } from \"../idls/dynamic_vault\";\nimport { i64, struct, u64 } from \"@coral-xyz/borsh\";\nimport { RawAccount, RawMint } from \"@solana/spl-token\";\nimport { PublicKey } from \"@solana/web3.js\";\nimport Decimal from \"decimal.js\";\n\nexport interface AccountStates {\n  feeVault: FeeVault;\n  fullBalanceListState: FullBalanceListState;\n  topStakerListState: TopStakerListState;\n  aVault: DynamicVault;\n  bVault: DynamicVault;\n  aVaultLp: RawAccount;\n  bVaultLp: RawAccount;\n  aVaultLpMint: RawMint;\n  bVaultLpMint: RawMint;\n  tokenAMint: RawMint;\n  tokenBMint: RawMint;\n  stakeMint: RawMint;\n  ammPool: DynamicPool;\n  poolLpMint: RawMint;\n  lockEscrow: LockEscrow;\n  clock: Clock;\n}\n\n// Stake for fee program\nexport type StakeForFeeProgram = Program<StakeForFee>;\nexport type FeeVault = IdlAccounts<StakeForFee>[\"feeVault\"];\nexport type Unstake = IdlAccounts<StakeForFee>[\"unstake\"];\nexport type FullBalanceListMetadata =\n  IdlAccounts<StakeForFee>[\"fullBalanceListMetadata\"];\nexport type StakeEscrow = IdlAccounts<StakeForFee>[\"stakeEscrow\"];\nexport type TopListMetadata = IdlAccounts<StakeForFee>[\"topListMetadata\"];\nexport type StakerMetadata = IdlTypes<StakeForFee>[\"StakerMetadata\"];\nexport type StakerBalance = IdlTypes<StakeForFee>[\"StakerBalance\"];\nexport type Metrics = IdlTypes<StakeForFee>[\"Metrics\"];\nexport type TopStakerInfo = IdlTypes<StakeForFee>[\"TopStakerInfo\"];\nexport type InitializeVaultParams =\n  IdlTypes<StakeForFee>[\"InitializeVaultParams\"];\n\nexport interface FullBalanceListState {\n  metadata: FullBalanceListMetadata;\n  stakers: Array<StakerBalance>;\n}\n\nexport interface TopStakerListState {\n  metadata: TopListMetadata;\n  stakers: Array<StakerMetadata>;\n}\n\nexport const MIN_LOCK_ESCROW_CLAIM_FEE_DURATION: BN = new BN(300);\n\n// Dynamic amm program\nexport type DynamicAmmProgram = Program<Amm>;\nexport type DynamicPool = IdlAccounts<Amm>[\"pool\"];\nexport type LockEscrow = IdlAccounts<Amm>[\"lockEscrow\"];\n\n// Dynamic vault program\nexport type DynamicVaultProgram = Program<Vault>;\nexport type DynamicVault = IdlAccounts<Vault>[\"vault\"];\n\n// Misc\nexport const ClockLayout = struct([\n  u64(\"slot\"),\n  i64(\"epochStartTimestamp\"),\n  u64(\"epoch\"),\n  u64(\"leaderScheduleEpoch\"),\n  i64(\"unixTimestamp\"),\n]);\n\nexport interface Clock {\n  slot: BN;\n  epochStartTimestamp: BN;\n  epoch: BN;\n  leaderScheduleEpoch: BN;\n  unixTimestamp: BN;\n}\n\nexport interface TopStakerListStateContext {\n  rank: number;\n  wallet: PublicKey;\n  totalStaked: Decimal;\n  earning: Decimal;\n}\n","import BN from \"bn.js\";\nimport { DynamicVault } from \"../types\";\n\nconst LOCKED_PROFIT_DEGRADATION_DENOMINATOR = new BN(1_000_000_000_000);\n\nfunction calculateLockedProfit(currentTime: BN, dynamicVault: DynamicVault) {\n  const duration = currentTime.sub(dynamicVault.lockedProfitTracker.lastReport);\n  const lockedFundRatio = duration.mul(\n    dynamicVault.lockedProfitTracker.lockedProfitDegradation\n  );\n\n  if (lockedFundRatio.gt(LOCKED_PROFIT_DEGRADATION_DENOMINATOR)) {\n    return new BN(0);\n  }\n\n  const lockedProfit = dynamicVault.lockedProfitTracker.lastUpdatedLockedProfit\n    .mul(LOCKED_PROFIT_DEGRADATION_DENOMINATOR.sub(lockedFundRatio))\n    .div(LOCKED_PROFIT_DEGRADATION_DENOMINATOR);\n\n  return lockedProfit;\n}\n\nexport function getUnlockedAmount(currentTime: BN, dynamicVault: DynamicVault) {\n  return dynamicVault.totalAmount.sub(\n    calculateLockedProfit(currentTime, dynamicVault)\n  );\n}\n\nexport function getAmountByShare(\n  currentTime: BN,\n  dynamicVault: DynamicVault,\n  share: BN,\n  totalSupply: BN\n) {\n  const totalAmount = getUnlockedAmount(currentTime, dynamicVault);\n  return totalAmount.mul(share).div(totalSupply);\n}\n","import { PublicKey } from \"@solana/web3.js\";\nimport { DYNAMIC_AMM_PROGRAM_ID } from \"../constants\";\n\nexport const deriveLockEscrowPda = (\n  pool: PublicKey,\n  owner: PublicKey,\n  ammProgram: PublicKey\n) => {\n  return PublicKey.findProgramAddressSync(\n    [Buffer.from(\"lock_escrow\"), pool.toBuffer(), owner.toBuffer()],\n    ammProgram\n  );\n};\n\nexport const deriveFeeVault = (pool: PublicKey, programId: PublicKey) => {\n  return PublicKey.findProgramAddressSync(\n    [Buffer.from(\"vault\"), pool.toBytes()],\n    programId\n  )[0];\n};\n\nexport const deriveTopStakerList = (vault: PublicKey, programId: PublicKey) => {\n  return PublicKey.findProgramAddressSync(\n    [Buffer.from(\"list\"), vault.toBytes()],\n    programId\n  )[0];\n};\n\nexport const deriveFullBalanceList = (\n  vault: PublicKey,\n  programId: PublicKey\n) => {\n  return PublicKey.findProgramAddressSync(\n    [Buffer.from(\"balance\"), vault.toBytes()],\n    programId\n  )[0];\n};\n\nexport const deriveStakeEscrow = (\n  vault: PublicKey,\n  owner: PublicKey,\n  programId: PublicKey\n) => {\n  return PublicKey.findProgramAddressSync(\n    [Buffer.from(\"escrow\"), vault.toBytes(), owner.toBytes()],\n    programId\n  )[0];\n};\n\nexport const deriveLpMint = (poolAddress: PublicKey, programId: PublicKey) => {\n  return PublicKey.findProgramAddressSync(\n    [Buffer.from(\"lp_mint\"), poolAddress.toBuffer()],\n    new PublicKey(programId || DYNAMIC_AMM_PROGRAM_ID)\n  )[0];\n};\n","import { AnchorProvider, Program } from \"@coral-xyz/anchor\";\nimport {\n  Connection,\n  PublicKey,\n  SystemProgram,\n  TransactionInstruction,\n} from \"@solana/web3.js\";\nimport { StakeForFee, IDL as StakeForFeeIDL } from \"../idls/stake_for_fee\";\nimport { Amm, IDL as DynamicAmmIDL } from \"../idls/dynamic_amm\";\nimport { Vault, IDL as DynamicVaultIDL } from \"../idls/dynamic_vault\";\n\nimport {\n  deriveFullBalanceList,\n  deriveStakeEscrow,\n  deriveTopStakerList,\n} from \"./pda\";\nimport {\n  createAssociatedTokenAccountInstruction,\n  getAssociatedTokenAddressSync,\n  TokenAccountNotFoundError,\n  TokenInvalidAccountOwnerError,\n} from \"@solana/spl-token\";\n\nexport interface GetOrCreateStakeEscrowResponse {\n  stakeEscrowKey: PublicKey;\n  ix: TransactionInstruction;\n}\n\nexport interface GetOrCreateATAResponse {\n  ataPubKey: PublicKey;\n  ix?: TransactionInstruction;\n}\n\n/**\n * Creates an anchor program instance for the stake-for-fee program.\n *\n * @param connection The connection to use.\n * @param programId The program id of the stake-for-fee program. Defaults to the idl program id.\n * @returns A Program instance for the stake-for-fee program.\n */\nexport function createStakeFeeProgram(\n  connection: Connection,\n  programId: PublicKey\n): Program<StakeForFee> {\n  const provider = new AnchorProvider(\n    connection,\n    {} as any,\n    AnchorProvider.defaultOptions()\n  );\n\n  return new Program(StakeForFeeIDL, programId, provider);\n}\n/**\n * Creates an instance of the dynamic AMM program client.\n *\n * @param connection The Solana connection to use.\n * @param programId The program id of the dynamic AMM program.\n * @returns An instance of the dynamic AMM program client.\n */\n\nexport function createDynamicAmmProgram(\n  connection: Connection,\n  programId: PublicKey\n): Program<Amm> {\n  const provider = new AnchorProvider(\n    connection,\n    {} as any,\n    AnchorProvider.defaultOptions()\n  );\n\n  return new Program(DynamicAmmIDL, programId, provider);\n}\n\n/**\n * Creates an instance of the dynamic Vault program client.\n *\n * @param connection The Solana connection to use.\n * @param programId The program id of the dynamic Vault program.\n * @returns An instance of the dynamic Vault program client.\n */\nexport function createDynamicVaultProgram(\n  connection: Connection,\n  programId: PublicKey\n): Program<Vault> {\n  const provider = new AnchorProvider(\n    connection,\n    {} as any,\n    AnchorProvider.defaultOptions()\n  );\n\n  return new Program(DynamicVaultIDL, programId, provider);\n}\n\n/**\n * Gets the stake escrow key for the given owner and vault.\n *\n * If the stake escrow account does not exist, this instruction creates it.\n *\n * @param connection The solana connection to use.\n * @param feeVaultKey The vault to get the stake escrow key for.\n * @param ownerKey The owner to get the stake escrow key for.\n * @param payerKey The payer to pay for the account rent.\n * @param programId The program id of the stake-for-fee program.\n * @returns An object containing the stake escrow key and the instruction to create the account if it doesn't exist.\n */\nexport async function getOrCreateStakeEscrowInstruction(\n  connection: Connection,\n  feeVaultKey: PublicKey,\n  ownerKey: PublicKey,\n  programId: PublicKey\n): Promise<GetOrCreateStakeEscrowResponse> {\n  const stakeEscrowKey = deriveStakeEscrow(feeVaultKey, ownerKey, programId);\n  const fullBalanceListKey = deriveFullBalanceList(feeVaultKey, programId);\n  const topStakerListKey = deriveTopStakerList(feeVaultKey, programId);\n  const stakeEscrowAccount = await connection.getAccountInfo(stakeEscrowKey);\n\n  if (!stakeEscrowAccount) {\n    const stakeForFeeProgram = createStakeFeeProgram(connection, programId);\n    const ix = await stakeForFeeProgram.methods\n      .initializeStakeEscrow()\n      .accounts({\n        vault: feeVaultKey,\n        fullBalanceList: fullBalanceListKey,\n        topStakerList: topStakerListKey,\n        escrow: stakeEscrowKey,\n        owner: ownerKey,\n        systemProgram: SystemProgram.programId,\n        payer: ownerKey,\n      })\n      .instruction();\n    return {\n      stakeEscrowKey,\n      ix,\n    };\n  } else {\n    return {\n      stakeEscrowKey,\n      ix: null,\n    };\n  }\n}\n\n/**\n * Gets the associated token account for the given mint and owner, or creates\n * it if it doesn't exist.\n *\n * @param connection The solana connection to use.\n * @param tokenMint The mint of the token to get the associated token account for.\n * @param owner The owner of the associated token account.\n * @param payer The payer of the transaction if the account needs to be created.\n * @param allowOwnerOffCurve Allow the owner to be off the curve.\n * @returns An object containing the associated token account public key and the instruction to create the account if it doesn't exist.\n */\nexport const getOrCreateATAInstruction = async (\n  connection: Connection,\n  tokenMint: PublicKey,\n  owner: PublicKey,\n  payer: PublicKey = owner,\n  allowOwnerOffCurve = true\n): Promise<GetOrCreateATAResponse> => {\n  const toAccount = getAssociatedTokenAddressSync(\n    tokenMint,\n    owner,\n    allowOwnerOffCurve\n  );\n\n  try {\n    const account = await connection.getAccountInfo(toAccount);\n\n    if (!account) {\n      const ix = createAssociatedTokenAccountInstruction(\n        payer,\n        toAccount,\n        owner,\n        tokenMint\n      );\n\n      return { ataPubKey: toAccount, ix };\n    }\n\n    return { ataPubKey: toAccount, ix: undefined };\n  } catch (e) {\n    if (\n      e instanceof TokenAccountNotFoundError ||\n      e instanceof TokenInvalidAccountOwnerError\n    ) {\n      const ix = createAssociatedTokenAccountInstruction(\n        payer,\n        toAccount,\n        owner,\n        tokenMint\n      );\n\n      return { ataPubKey: toAccount, ix };\n    } else {\n      /* handle error */\n      console.error(\"Error::getOrCreateATAInstruction\", e);\n      throw e;\n    }\n  }\n};\n","export type StakeForFee = {\n  \"version\": \"0.1.1\",\n  \"name\": \"stake_for_fee\",\n  \"instructions\": [\n    {\n      \"name\": \"initializeVault\",\n      \"accounts\": [\n        {\n          \"name\": \"vault\",\n          \"isMut\": true,\n          \"isSigner\": false,\n          \"docs\": [\n            \"Vault account\"\n          ]\n        },\n        {\n          \"name\": \"stakeTokenVault\",\n          \"isMut\": true,\n          \"isSigner\": false,\n          \"docs\": [\n            \"Token a vault\"\n          ]\n        },\n        {\n          \"name\": \"quoteTokenVault\",\n          \"isMut\": true,\n          \"isSigner\": false,\n          \"docs\": [\n            \"Token b vault\"\n          ]\n        },\n        {\n          \"name\": \"topStakerList\",\n          \"isMut\": true,\n          \"isSigner\": false,\n          \"docs\": [\n            \"Top staker list account\"\n          ]\n        },\n        {\n          \"name\": \"fullBalanceList\",\n          \"isMut\": true,\n          \"isSigner\": false,\n          \"docs\": [\n            \"Full balance list account\"\n          ]\n        },\n        {\n          \"name\": \"pool\",\n          \"isMut\": false,\n          \"isSigner\": false,\n          \"docs\": [\n            \"Pool account\"\n          ]\n        },\n        {\n          \"name\": \"stakeMint\",\n          \"isMut\": false,\n          \"isSigner\": false,\n          \"docs\": [\n            \"Stake mint\"\n          ]\n        },\n        {\n          \"name\": \"quoteMint\",\n          \"isMut\": false,\n          \"isSigner\": false,\n          \"docs\": [\n            \"Quote mint\"\n          ]\n        },\n        {\n          \"name\": \"lockEscrow\",\n          \"isMut\": false,\n          \"isSigner\": false,\n          \"docs\": [\n            \"Escrow account\"\n          ]\n        },\n        {\n          \"name\": \"payer\",\n          \"isMut\": true,\n          \"isSigner\": true\n        },\n        {\n          \"name\": \"systemProgram\",\n          \"isMut\": false,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"tokenProgram\",\n          \"isMut\": false,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"associatedTokenProgram\",\n          \"isMut\": false,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"eventAuthority\",\n          \"isMut\": false,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"program\",\n          \"isMut\": false,\n          \"isSigner\": false\n        }\n      ],\n      \"args\": [\n        {\n          \"name\": \"params\",\n          \"type\": {\n            \"defined\": \"InitializeVaultParams\"\n          }\n        }\n      ]\n    },\n    {\n      \"name\": \"initializeStakeEscrow\",\n      \"accounts\": [\n        {\n          \"name\": \"vault\",\n          \"isMut\": true,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"escrow\",\n          \"isMut\": true,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"fullBalanceList\",\n          \"isMut\": true,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"topStakerList\",\n          \"isMut\": true,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"owner\",\n          \"isMut\": false,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"payer\",\n          \"isMut\": true,\n          \"isSigner\": true\n        },\n        {\n          \"name\": \"systemProgram\",\n          \"isMut\": false,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"eventAuthority\",\n          \"isMut\": false,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"program\",\n          \"isMut\": false,\n          \"isSigner\": false\n        }\n      ],\n      \"args\": []\n    },\n    {\n      \"name\": \"stake\",\n      \"accounts\": [\n        {\n          \"name\": \"vault\",\n          \"isMut\": true,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"stakeTokenVault\",\n          \"isMut\": true,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"quoteTokenVault\",\n          \"isMut\": true,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"topStakerList\",\n          \"isMut\": true,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"fullBalanceList\",\n          \"isMut\": true,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"stakeEscrow\",\n          \"isMut\": true,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"smallestStakeEscrow\",\n          \"isMut\": true,\n          \"isSigner\": false,\n          \"isOptional\": true\n        },\n        {\n          \"name\": \"userStakeToken\",\n          \"isMut\": true,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"owner\",\n          \"isMut\": false,\n          \"isSigner\": true\n        },\n        {\n          \"name\": \"pool\",\n          \"isMut\": true,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"lpMint\",\n          \"isMut\": true,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"lockEscrow\",\n          \"isMut\": true,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"escrowVault\",\n          \"isMut\": true,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"aTokenVault\",\n          \"isMut\": true,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"bTokenVault\",\n          \"isMut\": true,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"aVault\",\n          \"isMut\": true,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"bVault\",\n          \"isMut\": true,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"aVaultLp\",\n          \"isMut\": true,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"bVaultLp\",\n          \"isMut\": true,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"aVaultLpMint\",\n          \"isMut\": true,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"bVaultLpMint\",\n          \"isMut\": true,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"ammProgram\",\n          \"isMut\": false,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"vaultProgram\",\n          \"isMut\": false,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"tokenProgram\",\n          \"isMut\": false,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"eventAuthority\",\n          \"isMut\": false,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"program\",\n          \"isMut\": false,\n          \"isSigner\": false\n        }\n      ],\n      \"args\": [\n        {\n          \"name\": \"amount\",\n          \"type\": \"u64\"\n        }\n      ]\n    },\n    {\n      \"name\": \"claimFee\",\n      \"docs\": [\n        \"The endpoint will only claim the quote token (SOL or USDC). The meme token will be automatically restaked.\"\n      ],\n      \"accounts\": [\n        {\n          \"name\": \"vault\",\n          \"isMut\": true,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"topStakerList\",\n          \"isMut\": true,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"fullBalanceList\",\n          \"isMut\": true,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"stakeEscrow\",\n          \"isMut\": true,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"smallestStakeEscrow\",\n          \"isMut\": true,\n          \"isSigner\": false,\n          \"isOptional\": true\n        },\n        {\n          \"name\": \"userQuoteToken\",\n          \"isMut\": true,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"stakeTokenVault\",\n          \"isMut\": true,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"quoteTokenVault\",\n          \"isMut\": true,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"owner\",\n          \"isMut\": false,\n          \"isSigner\": true\n        },\n        {\n          \"name\": \"pool\",\n          \"isMut\": true,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"lpMint\",\n          \"isMut\": true,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"lockEscrow\",\n          \"isMut\": true,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"escrowVault\",\n          \"isMut\": true,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"aTokenVault\",\n          \"isMut\": true,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"bTokenVault\",\n          \"isMut\": true,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"aVault\",\n          \"isMut\": true,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"bVault\",\n          \"isMut\": true,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"aVaultLp\",\n          \"isMut\": true,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"bVaultLp\",\n          \"isMut\": true,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"aVaultLpMint\",\n          \"isMut\": true,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"bVaultLpMint\",\n          \"isMut\": true,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"ammProgram\",\n          \"isMut\": false,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"vaultProgram\",\n          \"isMut\": false,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"tokenProgram\",\n          \"isMut\": false,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"eventAuthority\",\n          \"isMut\": false,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"program\",\n          \"isMut\": false,\n          \"isSigner\": false\n        }\n      ],\n      \"args\": [\n        {\n          \"name\": \"maxFee\",\n          \"type\": \"u64\"\n        }\n      ]\n    },\n    {\n      \"name\": \"requestUnstake\",\n      \"accounts\": [\n        {\n          \"name\": \"unstake\",\n          \"isMut\": true,\n          \"isSigner\": true\n        },\n        {\n          \"name\": \"vault\",\n          \"isMut\": true,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"topStakerList\",\n          \"isMut\": true,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"fullBalanceList\",\n          \"isMut\": true,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"stakeEscrow\",\n          \"isMut\": true,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"stakeTokenVault\",\n          \"isMut\": true,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"quoteTokenVault\",\n          \"isMut\": true,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"owner\",\n          \"isMut\": true,\n          \"isSigner\": true\n        },\n        {\n          \"name\": \"pool\",\n          \"isMut\": true,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"lpMint\",\n          \"isMut\": true,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"lockEscrow\",\n          \"isMut\": true,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"escrowVault\",\n          \"isMut\": true,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"aTokenVault\",\n          \"isMut\": true,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"bTokenVault\",\n          \"isMut\": true,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"aVault\",\n          \"isMut\": true,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"bVault\",\n          \"isMut\": true,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"aVaultLp\",\n          \"isMut\": true,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"bVaultLp\",\n          \"isMut\": true,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"aVaultLpMint\",\n          \"isMut\": true,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"bVaultLpMint\",\n          \"isMut\": true,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"ammProgram\",\n          \"isMut\": false,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"vaultProgram\",\n          \"isMut\": false,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"tokenProgram\",\n          \"isMut\": false,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"systemProgram\",\n          \"isMut\": false,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"eventAuthority\",\n          \"isMut\": false,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"program\",\n          \"isMut\": false,\n          \"isSigner\": false\n        }\n      ],\n      \"args\": [\n        {\n          \"name\": \"unstakeAmount\",\n          \"type\": \"u64\"\n        }\n      ]\n    },\n    {\n      \"name\": \"cancelUnstake\",\n      \"accounts\": [\n        {\n          \"name\": \"unstake\",\n          \"isMut\": true,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"stakeEscrow\",\n          \"isMut\": true,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"smallestStakeEscrow\",\n          \"isMut\": true,\n          \"isSigner\": false,\n          \"isOptional\": true\n        },\n        {\n          \"name\": \"topStakerList\",\n          \"isMut\": true,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"fullBalanceList\",\n          \"isMut\": true,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"vault\",\n          \"isMut\": true,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"stakeTokenVault\",\n          \"isMut\": true,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"quoteTokenVault\",\n          \"isMut\": true,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"owner\",\n          \"isMut\": true,\n          \"isSigner\": true\n        },\n        {\n          \"name\": \"pool\",\n          \"isMut\": true,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"lpMint\",\n          \"isMut\": true,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"lockEscrow\",\n          \"isMut\": true,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"escrowVault\",\n          \"isMut\": true,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"aTokenVault\",\n          \"isMut\": true,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"bTokenVault\",\n          \"isMut\": true,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"aVault\",\n          \"isMut\": true,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"bVault\",\n          \"isMut\": true,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"aVaultLp\",\n          \"isMut\": true,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"bVaultLp\",\n          \"isMut\": true,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"aVaultLpMint\",\n          \"isMut\": true,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"bVaultLpMint\",\n          \"isMut\": true,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"ammProgram\",\n          \"isMut\": false,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"vaultProgram\",\n          \"isMut\": false,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"tokenProgram\",\n          \"isMut\": false,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"eventAuthority\",\n          \"isMut\": false,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"program\",\n          \"isMut\": false,\n          \"isSigner\": false\n        }\n      ],\n      \"args\": []\n    },\n    {\n      \"name\": \"withdraw\",\n      \"accounts\": [\n        {\n          \"name\": \"unstake\",\n          \"isMut\": true,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"stakeEscrow\",\n          \"isMut\": true,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"stakeTokenVault\",\n          \"isMut\": true,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"vault\",\n          \"isMut\": true,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"userStakeToken\",\n          \"isMut\": true,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"owner\",\n          \"isMut\": true,\n          \"isSigner\": true\n        },\n        {\n          \"name\": \"tokenProgram\",\n          \"isMut\": false,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"eventAuthority\",\n          \"isMut\": false,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"program\",\n          \"isMut\": false,\n          \"isSigner\": false\n        }\n      ],\n      \"args\": []\n    },\n    {\n      \"name\": \"claimFeeCrank\",\n      \"accounts\": [\n        {\n          \"name\": \"vault\",\n          \"isMut\": true,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"stakeTokenVault\",\n          \"isMut\": true,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"quoteTokenVault\",\n          \"isMut\": true,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"pool\",\n          \"isMut\": true,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"lpMint\",\n          \"isMut\": true,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"lockEscrow\",\n          \"isMut\": true,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"escrowVault\",\n          \"isMut\": true,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"aTokenVault\",\n          \"isMut\": true,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"bTokenVault\",\n          \"isMut\": true,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"aVault\",\n          \"isMut\": true,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"bVault\",\n          \"isMut\": true,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"aVaultLp\",\n          \"isMut\": true,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"bVaultLp\",\n          \"isMut\": true,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"aVaultLpMint\",\n          \"isMut\": true,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"bVaultLpMint\",\n          \"isMut\": true,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"ammProgram\",\n          \"isMut\": false,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"vaultProgram\",\n          \"isMut\": false,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"tokenProgram\",\n          \"isMut\": false,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"eventAuthority\",\n          \"isMut\": false,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"program\",\n          \"isMut\": false,\n          \"isSigner\": false\n        }\n      ],\n      \"args\": []\n    },\n    {\n      \"name\": \"updateUnstakeLockDuration\",\n      \"accounts\": [\n        {\n          \"name\": \"vault\",\n          \"isMut\": true,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"admin\",\n          \"isMut\": false,\n          \"isSigner\": true\n        },\n        {\n          \"name\": \"eventAuthority\",\n          \"isMut\": false,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"program\",\n          \"isMut\": false,\n          \"isSigner\": false\n        }\n      ],\n      \"args\": [\n        {\n          \"name\": \"unstakeLockDuration\",\n          \"type\": \"u64\"\n        }\n      ]\n    },\n    {\n      \"name\": \"updateSecondsToFullUnlock\",\n      \"accounts\": [\n        {\n          \"name\": \"vault\",\n          \"isMut\": true,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"instructionsSysvar\",\n          \"isMut\": false,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"admin\",\n          \"isMut\": false,\n          \"isSigner\": true\n        },\n        {\n          \"name\": \"eventAuthority\",\n          \"isMut\": false,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"program\",\n          \"isMut\": false,\n          \"isSigner\": false\n        }\n      ],\n      \"args\": [\n        {\n          \"name\": \"secondsToFullUnlock\",\n          \"type\": \"u64\"\n        }\n      ]\n    },\n    {\n      \"name\": \"dummy\",\n      \"docs\": [\n        \"To force IDL generation for some struct for easier TS decoding later\"\n      ],\n      \"accounts\": [\n        {\n          \"name\": \"stakerMetadata\",\n          \"isMut\": false,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"stakerBalance\",\n          \"isMut\": false,\n          \"isSigner\": false\n        }\n      ],\n      \"args\": []\n    }\n  ],\n  \"accounts\": [\n    {\n      \"name\": \"stakerMetadataDummyAccount\",\n      \"type\": {\n        \"kind\": \"struct\",\n        \"fields\": [\n          {\n            \"name\": \"stakerMetadata\",\n            \"type\": {\n              \"defined\": \"StakerMetadata\"\n            }\n          }\n        ]\n      }\n    },\n    {\n      \"name\": \"stakerBalanceDummyAccount\",\n      \"type\": {\n        \"kind\": \"struct\",\n        \"fields\": [\n          {\n            \"name\": \"stakerBalance\",\n            \"type\": {\n              \"defined\": \"StakerBalance\"\n            }\n          }\n        ]\n      }\n    },\n    {\n      \"name\": \"fullBalanceListMetadata\",\n      \"type\": {\n        \"kind\": \"struct\",\n        \"fields\": [\n          {\n            \"name\": \"vault\",\n            \"type\": \"publicKey\"\n          },\n          {\n            \"name\": \"length\",\n            \"type\": \"u64\"\n          }\n        ]\n      }\n    },\n    {\n      \"name\": \"stakeEscrow\",\n      \"type\": {\n        \"kind\": \"struct\",\n        \"fields\": [\n          {\n            \"name\": \"owner\",\n            \"type\": \"publicKey\"\n          },\n          {\n            \"name\": \"vault\",\n            \"type\": \"publicKey\"\n          },\n          {\n            \"name\": \"fullBalanceIndex\",\n            \"type\": \"u64\"\n          },\n          {\n            \"name\": \"stakeAmount\",\n            \"type\": \"u64\"\n          },\n          {\n            \"name\": \"inTopList\",\n            \"type\": \"u8\"\n          },\n          {\n            \"name\": \"padding0\",\n            \"type\": {\n              \"array\": [\n                \"u8\",\n                15\n              ]\n            }\n          },\n          {\n            \"name\": \"ongoingTotalPartialUnstakeAmount\",\n            \"type\": \"u64\"\n          },\n          {\n            \"name\": \"createdAt\",\n            \"type\": \"i64\"\n          },\n          {\n            \"name\": \"feeAClaimedAmount\",\n            \"type\": \"u128\"\n          },\n          {\n            \"name\": \"feeBClaimedAmount\",\n            \"type\": \"u128\"\n          },\n          {\n            \"name\": \"feeAPerLiquidityCheckpoint\",\n            \"type\": \"u128\"\n          },\n          {\n            \"name\": \"feeBPerLiquidityCheckpoint\",\n            \"type\": \"u128\"\n          },\n          {\n            \"name\": \"feeAPending\",\n            \"type\": \"u64\"\n          },\n          {\n            \"name\": \"feeBPending\",\n            \"type\": \"u64\"\n          },\n          {\n            \"name\": \"padding\",\n            \"type\": {\n              \"array\": [\n                \"u128\",\n                20\n              ]\n            }\n          }\n        ]\n      }\n    },\n    {\n      \"name\": \"topListMetadata\",\n      \"type\": {\n        \"kind\": \"struct\",\n        \"fields\": [\n          {\n            \"name\": \"vault\",\n            \"docs\": [\n              \"Vault\"\n            ],\n            \"type\": \"publicKey\"\n          }\n        ]\n      }\n    },\n    {\n      \"name\": \"unstake\",\n      \"type\": {\n        \"kind\": \"struct\",\n        \"fields\": [\n          {\n            \"name\": \"stakeEscrow\",\n            \"type\": \"publicKey\"\n          },\n          {\n            \"name\": \"unstakeAmount\",\n            \"type\": \"u64\"\n          },\n          {\n            \"name\": \"createdAt\",\n            \"type\": \"i64\"\n          },\n          {\n            \"name\": \"releaseAt\",\n            \"type\": \"i64\"\n          },\n          {\n            \"name\": \"owner\",\n            \"docs\": [\n              \"owner field, only be used for indexing\"\n            ],\n            \"type\": \"publicKey\"\n          },\n          {\n            \"name\": \"vault\",\n            \"docs\": [\n              \"vault field, only be used for indexing\"\n            ],\n            \"type\": \"publicKey\"\n          },\n          {\n            \"name\": \"padding\",\n            \"type\": {\n              \"array\": [\n                \"u64\",\n                22\n              ]\n            }\n          }\n        ]\n      }\n    },\n    {\n      \"name\": \"feeVault\",\n      \"type\": {\n        \"kind\": \"struct\",\n        \"fields\": [\n          {\n            \"name\": \"lockEscrow\",\n            \"docs\": [\n              \"Lock escrow account\"\n            ],\n            \"type\": \"publicKey\"\n          },\n          {\n            \"name\": \"stakeMint\",\n            \"docs\": [\n              \"Stake mint\"\n            ],\n            \"type\": \"publicKey\"\n          },\n          {\n            \"name\": \"quoteMint\",\n            \"docs\": [\n              \"Quote mint\"\n            ],\n            \"type\": \"publicKey\"\n          },\n          {\n            \"name\": \"pool\",\n            \"docs\": [\n              \"Pool\"\n            ],\n            \"type\": \"publicKey\"\n          },\n          {\n            \"name\": \"stakeTokenVault\",\n            \"docs\": [\n              \"Stake token vault\"\n            ],\n            \"type\": \"publicKey\"\n          },\n          {\n            \"name\": \"quoteTokenVault\",\n            \"docs\": [\n              \"Quote token vault\"\n            ],\n            \"type\": \"publicKey\"\n          },\n          {\n            \"name\": \"topStakerList\",\n            \"docs\": [\n              \"Top staker list\"\n            ],\n            \"type\": \"publicKey\"\n          },\n          {\n            \"name\": \"fullBalanceList\",\n            \"docs\": [\n              \"Full balance list\"\n            ],\n            \"type\": \"publicKey\"\n          },\n          {\n            \"name\": \"metrics\",\n            \"docs\": [\n              \"Metrics\"\n            ],\n            \"type\": {\n              \"defined\": \"Metrics\"\n            }\n          },\n          {\n            \"name\": \"configuration\",\n            \"docs\": [\n              \"Configuration parameters\"\n            ],\n            \"type\": {\n              \"defined\": \"Configuration\"\n            }\n          },\n          {\n            \"name\": \"topStakerInfo\",\n            \"docs\": [\n              \"Top staker info\"\n            ],\n            \"type\": {\n              \"defined\": \"TopStakerInfo\"\n            }\n          },\n          {\n            \"name\": \"creator\",\n            \"docs\": [\n              \"Creator\"\n            ],\n            \"type\": \"publicKey\"\n          },\n          {\n            \"name\": \"createdAt\",\n            \"docs\": [\n              \"Created at\"\n            ],\n            \"type\": \"i64\"\n          },\n          {\n            \"name\": \"bump\",\n            \"docs\": [\n              \"Bump\"\n            ],\n            \"type\": \"u8\"\n          },\n          {\n            \"name\": \"padding0\",\n            \"docs\": [\n              \"Padding\"\n            ],\n            \"type\": {\n              \"array\": [\n                \"u8\",\n                7\n              ]\n            }\n          },\n          {\n            \"name\": \"padding\",\n            \"docs\": [\n              \"Padding\"\n            ],\n            \"type\": {\n              \"array\": [\n                \"u128\",\n                20\n              ]\n            }\n          }\n        ]\n      }\n    }\n  ],\n  \"types\": [\n    {\n      \"name\": \"InitializeVaultParams\",\n      \"type\": {\n        \"kind\": \"struct\",\n        \"fields\": [\n          {\n            \"name\": \"topListLength\",\n            \"type\": \"u16\"\n          },\n          {\n            \"name\": \"secondsToFullUnlock\",\n            \"type\": \"u64\"\n          },\n          {\n            \"name\": \"unstakeLockDuration\",\n            \"type\": \"u64\"\n          },\n          {\n            \"name\": \"startFeeDistributeTimestamp\",\n            \"type\": {\n              \"option\": \"u64\"\n            }\n          },\n          {\n            \"name\": \"padding\",\n            \"type\": {\n              \"array\": [\n                \"u8\",\n                64\n              ]\n            }\n          }\n        ]\n      }\n    },\n    {\n      \"name\": \"StakerBalance\",\n      \"type\": {\n        \"kind\": \"struct\",\n        \"fields\": [\n          {\n            \"name\": \"balance\",\n            \"docs\": [\n              \"Balance\"\n            ],\n            \"type\": \"u64\"\n          },\n          {\n            \"name\": \"owner\",\n            \"docs\": [\n              \"Owner pubkey, we don't need this for logic, but it is useful for indexing\"\n            ],\n            \"type\": \"publicKey\"\n          },\n          {\n            \"name\": \"isInTopList\",\n            \"docs\": [\n              \"In top list\"\n            ],\n            \"type\": \"u8\"\n          },\n          {\n            \"name\": \"padding\",\n            \"docs\": [\n              \"Padding\"\n            ],\n            \"type\": {\n              \"array\": [\n                \"u8\",\n                7\n              ]\n            }\n          }\n        ]\n      }\n    },\n    {\n      \"name\": \"StakerMetadata\",\n      \"type\": {\n        \"kind\": \"struct\",\n        \"fields\": [\n          {\n            \"name\": \"stakeAmount\",\n            \"docs\": [\n              \"Staked amount\"\n            ],\n            \"type\": \"u64\"\n          },\n          {\n            \"name\": \"fullBalanceIndex\",\n            \"docs\": [\n              \"Full balance list index. When it's negative, the slot is empty\"\n            ],\n            \"type\": \"i64\"\n          },\n          {\n            \"name\": \"owner\",\n            \"docs\": [\n              \"Owner pubkey, we dont need this for logic, but it is useful for indexing\"\n            ],\n            \"type\": \"publicKey\"\n          }\n        ]\n      }\n    },\n    {\n      \"name\": \"Configuration\",\n      \"type\": {\n        \"kind\": \"struct\",\n        \"fields\": [\n          {\n            \"name\": \"secondsToFullUnlock\",\n            \"docs\": [\n              \"Time required for locked claim fee to be fully dripped\"\n            ],\n            \"type\": \"u64\"\n          },\n          {\n            \"name\": \"unstakeLockDuration\",\n            \"docs\": [\n              \"Unstake lock duration\"\n            ],\n            \"type\": \"u64\"\n          },\n          {\n            \"name\": \"startFeeDistributeTimestamp\",\n            \"docs\": [\n              \"When the fee start distributes\"\n            ],\n            \"type\": \"i64\"\n          },\n          {\n            \"name\": \"padding0\",\n            \"docs\": [\n              \"padding 0\"\n            ],\n            \"type\": \"u64\"\n          },\n          {\n            \"name\": \"padding\",\n            \"docs\": [\n              \"padding\"\n            ],\n            \"type\": {\n              \"array\": [\n                \"u128\",\n                4\n              ]\n            }\n          }\n        ]\n      }\n    },\n    {\n      \"name\": \"Metrics\",\n      \"type\": {\n        \"kind\": \"struct\",\n        \"fields\": [\n          {\n            \"name\": \"totalStakedAmount\",\n            \"docs\": [\n              \"Total staked amount\"\n            ],\n            \"type\": \"u64\"\n          },\n          {\n            \"name\": \"totalStakeEscrowCount\",\n            \"docs\": [\n              \"Total stake escrow count\"\n            ],\n            \"type\": \"u64\"\n          },\n          {\n            \"name\": \"ongoingTotalPartialUnstakeAmount\",\n            \"docs\": [\n              \"Ongoing total partial unstake amount\"\n            ],\n            \"type\": \"u64\"\n          },\n          {\n            \"name\": \"padding0\",\n            \"docs\": [\n              \"padding 0\"\n            ],\n            \"type\": \"u64\"\n          },\n          {\n            \"name\": \"totalFeeAAmount\",\n            \"docs\": [\n              \"Total claimed fee a amount\"\n            ],\n            \"type\": \"u128\"\n          },\n          {\n            \"name\": \"totalFeeBAmount\",\n            \"docs\": [\n              \"Total claimed fee b amount\"\n            ],\n            \"type\": \"u128\"\n          },\n          {\n            \"name\": \"userTotalClaimedFeeA\",\n            \"docs\": [\n              \"User total claimed fee a\"\n            ],\n            \"type\": \"u128\"\n          },\n          {\n            \"name\": \"userTotalClaimedFeeB\",\n            \"docs\": [\n              \"User total claimed fee b\"\n            ],\n            \"type\": \"u128\"\n          },\n          {\n            \"name\": \"padding\",\n            \"docs\": [\n              \"padding\"\n            ],\n            \"type\": {\n              \"array\": [\n                \"u128\",\n                4\n              ]\n            }\n          }\n        ]\n      }\n    },\n    {\n      \"name\": \"TopStakerInfo\",\n      \"type\": {\n        \"kind\": \"struct\",\n        \"fields\": [\n          {\n            \"name\": \"topListLength\",\n            \"docs\": [\n              \"Number of holder in the top list\"\n            ],\n            \"type\": \"u64\"\n          },\n          {\n            \"name\": \"currentLength\",\n            \"docs\": [\n              \"Current length, used for resize\"\n            ],\n            \"type\": \"u64\"\n          },\n          {\n            \"name\": \"effectiveStakeAmount\",\n            \"docs\": [\n              \"Effective stake amount. Total stake amount in the top list.\"\n            ],\n            \"type\": \"u64\"\n          },\n          {\n            \"name\": \"lastClaimFeeAt\",\n            \"docs\": [\n              \"Last claim fee at\"\n            ],\n            \"type\": \"i64\"\n          },\n          {\n            \"name\": \"lastUpdatedAt\",\n            \"docs\": [\n              \"Last fee drip updated at\"\n            ],\n            \"type\": \"i64\"\n          },\n          {\n            \"name\": \"lockedFeeA\",\n            \"docs\": [\n              \"Locked fee a\"\n            ],\n            \"type\": \"u64\"\n          },\n          {\n            \"name\": \"lockedFeeB\",\n            \"docs\": [\n              \"Locked fee b\"\n            ],\n            \"type\": \"u64\"\n          },\n          {\n            \"name\": \"padding0\",\n            \"docs\": [\n              \"Padding\"\n            ],\n            \"type\": \"u64\"\n          },\n          {\n            \"name\": \"cumulativeFeeAPerLiquidity\",\n            \"docs\": [\n              \"cumulative fee a per liquidity\"\n            ],\n            \"type\": \"u128\"\n          },\n          {\n            \"name\": \"cumulativeFeeBPerLiquidity\",\n            \"docs\": [\n              \"cumulative fee b per liquidity\"\n            ],\n            \"type\": \"u128\"\n          },\n          {\n            \"name\": \"padding\",\n            \"docs\": [\n              \"padding\"\n            ],\n            \"type\": {\n              \"array\": [\n                \"u128\",\n                4\n              ]\n            }\n          }\n        ]\n      }\n    },\n    {\n      \"name\": \"Rounding\",\n      \"docs\": [\n        \"Round up, down\"\n      ],\n      \"type\": {\n        \"kind\": \"enum\",\n        \"variants\": [\n          {\n            \"name\": \"Up\"\n          },\n          {\n            \"name\": \"Down\"\n          }\n        ]\n      }\n    }\n  ],\n  \"events\": [\n    {\n      \"name\": \"VaultCreated\",\n      \"fields\": [\n        {\n          \"name\": \"pool\",\n          \"type\": \"publicKey\",\n          \"index\": false\n        },\n        {\n          \"name\": \"tokenAMint\",\n          \"type\": \"publicKey\",\n          \"index\": false\n        },\n        {\n          \"name\": \"tokenBMint\",\n          \"type\": \"publicKey\",\n          \"index\": false\n        },\n        {\n          \"name\": \"vault\",\n          \"type\": \"publicKey\",\n          \"index\": false\n        },\n        {\n          \"name\": \"stakeMint\",\n          \"type\": \"publicKey\",\n          \"index\": false\n        },\n        {\n          \"name\": \"quoteMint\",\n          \"type\": \"publicKey\",\n          \"index\": false\n        },\n        {\n          \"name\": \"creator\",\n          \"type\": \"publicKey\",\n          \"index\": false\n        },\n        {\n          \"name\": \"topListLength\",\n          \"type\": \"u16\",\n          \"index\": false\n        },\n        {\n          \"name\": \"secondsToFullUnlock\",\n          \"type\": \"u64\",\n          \"index\": false\n        },\n        {\n          \"name\": \"unstakeLockDuration\",\n          \"type\": \"u64\",\n          \"index\": false\n        },\n        {\n          \"name\": \"startFeeDistributeTimestamp\",\n          \"type\": \"i64\",\n          \"index\": false\n        }\n      ]\n    },\n    {\n      \"name\": \"StakeEscrowCreated\",\n      \"fields\": [\n        {\n          \"name\": \"pool\",\n          \"type\": \"publicKey\",\n          \"index\": false\n        },\n        {\n          \"name\": \"vault\",\n          \"type\": \"publicKey\",\n          \"index\": false\n        },\n        {\n          \"name\": \"escrow\",\n          \"type\": \"publicKey\",\n          \"index\": false\n        },\n        {\n          \"name\": \"owner\",\n          \"type\": \"publicKey\",\n          \"index\": false\n        },\n        {\n          \"name\": \"fullBalanceIndex\",\n          \"type\": \"u64\",\n          \"index\": false\n        }\n      ]\n    },\n    {\n      \"name\": \"ConfigCreated\",\n      \"fields\": [\n        {\n          \"name\": \"config\",\n          \"type\": \"publicKey\",\n          \"index\": false\n        },\n        {\n          \"name\": \"index\",\n          \"type\": \"u64\",\n          \"index\": false\n        },\n        {\n          \"name\": \"secondsToFullUnlock\",\n          \"type\": \"u64\",\n          \"index\": false\n        },\n        {\n          \"name\": \"unstakeLockDuration\",\n          \"type\": \"u64\",\n          \"index\": false\n        },\n        {\n          \"name\": \"joinWindowDuration\",\n          \"type\": \"u64\",\n          \"index\": false\n        },\n        {\n          \"name\": \"topListLength\",\n          \"type\": \"u16\",\n          \"index\": false\n        }\n      ]\n    },\n    {\n      \"name\": \"ConfigClosed\",\n      \"fields\": [\n        {\n          \"name\": \"config\",\n          \"type\": \"publicKey\",\n          \"index\": false\n        },\n        {\n          \"name\": \"index\",\n          \"type\": \"u64\",\n          \"index\": false\n        }\n      ]\n    },\n    {\n      \"name\": \"UnstakeCreated\",\n      \"fields\": [\n        {\n          \"name\": \"unstake\",\n          \"type\": \"publicKey\",\n          \"index\": false\n        },\n        {\n          \"name\": \"pool\",\n          \"type\": \"publicKey\",\n          \"index\": false\n        },\n        {\n          \"name\": \"vault\",\n          \"type\": \"publicKey\",\n          \"index\": false\n        },\n        {\n          \"name\": \"owner\",\n          \"type\": \"publicKey\",\n          \"index\": false\n        },\n        {\n          \"name\": \"amount\",\n          \"type\": \"u64\",\n          \"index\": false\n        },\n        {\n          \"name\": \"newStakeEscrowAmount\",\n          \"type\": \"u64\",\n          \"index\": false\n        },\n        {\n          \"name\": \"newStakeEscrowOngoingTotalUnstakeAmount\",\n          \"type\": \"u64\",\n          \"index\": false\n        },\n        {\n          \"name\": \"feeAPending\",\n          \"type\": \"u64\",\n          \"index\": false\n        },\n        {\n          \"name\": \"feeBPending\",\n          \"type\": \"u64\",\n          \"index\": false\n        },\n        {\n          \"name\": \"feeAPerLiquidityCheckpoint\",\n          \"type\": \"u128\",\n          \"index\": false\n        },\n        {\n          \"name\": \"feeBPerLiquidityCheckpoint\",\n          \"type\": \"u128\",\n          \"index\": false\n        },\n        {\n          \"name\": \"startAt\",\n          \"type\": \"i64\",\n          \"index\": false\n        },\n        {\n          \"name\": \"endAt\",\n          \"type\": \"i64\",\n          \"index\": false\n        }\n      ]\n    },\n    {\n      \"name\": \"CancelUnstakeSucceed\",\n      \"fields\": [\n        {\n          \"name\": \"unstake\",\n          \"type\": \"publicKey\",\n          \"index\": false\n        },\n        {\n          \"name\": \"pool\",\n          \"type\": \"publicKey\",\n          \"index\": false\n        },\n        {\n          \"name\": \"vault\",\n          \"type\": \"publicKey\",\n          \"index\": false\n        },\n        {\n          \"name\": \"owner\",\n          \"type\": \"publicKey\",\n          \"index\": false\n        },\n        {\n          \"name\": \"amount\",\n          \"type\": \"u64\",\n          \"index\": false\n        },\n        {\n          \"name\": \"newStakeEscrowAmount\",\n          \"type\": \"u64\",\n          \"index\": false\n        },\n        {\n          \"name\": \"newStakeEscrowOngoingTotalUnstakeAmount\",\n          \"type\": \"u64\",\n          \"index\": false\n        },\n        {\n          \"name\": \"feeAPending\",\n          \"type\": \"u64\",\n          \"index\": false\n        },\n        {\n          \"name\": \"feeBPending\",\n          \"type\": \"u64\",\n          \"index\": false\n        },\n        {\n          \"name\": \"feeAPerLiquidityCheckpoint\",\n          \"type\": \"u128\",\n          \"index\": false\n        },\n        {\n          \"name\": \"feeBPerLiquidityCheckpoint\",\n          \"type\": \"u128\",\n          \"index\": false\n        }\n      ]\n    },\n    {\n      \"name\": \"WithdrawSucceed\",\n      \"fields\": [\n        {\n          \"name\": \"unstake\",\n          \"type\": \"publicKey\",\n          \"index\": false\n        },\n        {\n          \"name\": \"pool\",\n          \"type\": \"publicKey\",\n          \"index\": false\n        },\n        {\n          \"name\": \"vault\",\n          \"type\": \"publicKey\",\n          \"index\": false\n        },\n        {\n          \"name\": \"owner\",\n          \"type\": \"publicKey\",\n          \"index\": false\n        },\n        {\n          \"name\": \"amount\",\n          \"type\": \"u64\",\n          \"index\": false\n        },\n        {\n          \"name\": \"newStakeEscrowOngoingTotalUnstakeAmount\",\n          \"type\": \"u64\",\n          \"index\": false\n        }\n      ]\n    },\n    {\n      \"name\": \"ClaimFeeSucceed\",\n      \"fields\": [\n        {\n          \"name\": \"stakeEscrow\",\n          \"type\": \"publicKey\",\n          \"index\": false\n        },\n        {\n          \"name\": \"pool\",\n          \"type\": \"publicKey\",\n          \"index\": false\n        },\n        {\n          \"name\": \"vault\",\n          \"type\": \"publicKey\",\n          \"index\": false\n        },\n        {\n          \"name\": \"owner\",\n          \"type\": \"publicKey\",\n          \"index\": false\n        },\n        {\n          \"name\": \"feeAAmount\",\n          \"type\": \"u64\",\n          \"index\": false\n        },\n        {\n          \"name\": \"feeBAmount\",\n          \"type\": \"u64\",\n          \"index\": false\n        },\n        {\n          \"name\": \"totalFeeAAmount\",\n          \"type\": \"u128\",\n          \"index\": false\n        },\n        {\n          \"name\": \"totalFeeBAmount\",\n          \"type\": \"u128\",\n          \"index\": false\n        }\n      ]\n    },\n    {\n      \"name\": \"FeeEmission\",\n      \"fields\": [\n        {\n          \"name\": \"pool\",\n          \"type\": \"publicKey\",\n          \"index\": false\n        },\n        {\n          \"name\": \"vault\",\n          \"type\": \"publicKey\",\n          \"index\": false\n        },\n        {\n          \"name\": \"tokenAClaimed\",\n          \"type\": \"u64\",\n          \"index\": false\n        },\n        {\n          \"name\": \"tokenBClaimed\",\n          \"type\": \"u64\",\n          \"index\": false\n        },\n        {\n          \"name\": \"tokenAReleased\",\n          \"type\": \"u64\",\n          \"index\": false\n        },\n        {\n          \"name\": \"tokenBReleased\",\n          \"type\": \"u64\",\n          \"index\": false\n        },\n        {\n          \"name\": \"cumulativeFeeAPerLiquidity\",\n          \"type\": \"u128\",\n          \"index\": false\n        },\n        {\n          \"name\": \"cumulativeFeeBPerLiquidity\",\n          \"type\": \"u128\",\n          \"index\": false\n        },\n        {\n          \"name\": \"effectiveStakeAmount\",\n          \"type\": \"u64\",\n          \"index\": false\n        }\n      ]\n    },\n    {\n      \"name\": \"AddNewUserToTopHolder\",\n      \"fields\": [\n        {\n          \"name\": \"pool\",\n          \"type\": \"publicKey\",\n          \"index\": false\n        },\n        {\n          \"name\": \"vault\",\n          \"type\": \"publicKey\",\n          \"index\": false\n        },\n        {\n          \"name\": \"owner\",\n          \"type\": \"publicKey\",\n          \"index\": false\n        },\n        {\n          \"name\": \"stakeAmount\",\n          \"type\": \"u64\",\n          \"index\": false\n        },\n        {\n          \"name\": \"feeAPending\",\n          \"type\": \"u64\",\n          \"index\": false\n        },\n        {\n          \"name\": \"feeBPending\",\n          \"type\": \"u64\",\n          \"index\": false\n        },\n        {\n          \"name\": \"feeAPerLiquidityCheckpoint\",\n          \"type\": \"u128\",\n          \"index\": false\n        },\n        {\n          \"name\": \"feeBPerLiquidityCheckpoint\",\n          \"type\": \"u128\",\n          \"index\": false\n        }\n      ]\n    },\n    {\n      \"name\": \"RemoveUserFromTopHolder\",\n      \"fields\": [\n        {\n          \"name\": \"pool\",\n          \"type\": \"publicKey\",\n          \"index\": false\n        },\n        {\n          \"name\": \"vault\",\n          \"type\": \"publicKey\",\n          \"index\": false\n        },\n        {\n          \"name\": \"owner\",\n          \"type\": \"publicKey\",\n          \"index\": false\n        },\n        {\n          \"name\": \"stakeAmount\",\n          \"type\": \"u64\",\n          \"index\": false\n        },\n        {\n          \"name\": \"feeAPending\",\n          \"type\": \"u64\",\n          \"index\": false\n        },\n        {\n          \"name\": \"feeBPending\",\n          \"type\": \"u64\",\n          \"index\": false\n        },\n        {\n          \"name\": \"feeAPerLiquidityCheckpoint\",\n          \"type\": \"u128\",\n          \"index\": false\n        },\n        {\n          \"name\": \"feeBPerLiquidityCheckpoint\",\n          \"type\": \"u128\",\n          \"index\": false\n        }\n      ]\n    },\n    {\n      \"name\": \"UserStake\",\n      \"fields\": [\n        {\n          \"name\": \"pool\",\n          \"type\": \"publicKey\",\n          \"index\": false\n        },\n        {\n          \"name\": \"vault\",\n          \"type\": \"publicKey\",\n          \"index\": false\n        },\n        {\n          \"name\": \"owner\",\n          \"type\": \"publicKey\",\n          \"index\": false\n        },\n        {\n          \"name\": \"stakeAmount\",\n          \"type\": \"u64\",\n          \"index\": false\n        },\n        {\n          \"name\": \"totalStakeAmount\",\n          \"type\": \"u64\",\n          \"index\": false\n        },\n        {\n          \"name\": \"feeAPending\",\n          \"type\": \"u64\",\n          \"index\": false\n        },\n        {\n          \"name\": \"feeBPending\",\n          \"type\": \"u64\",\n          \"index\": false\n        },\n        {\n          \"name\": \"feeAPerLiquidityCheckpoint\",\n          \"type\": \"u128\",\n          \"index\": false\n        },\n        {\n          \"name\": \"feeBPerLiquidityCheckpoint\",\n          \"type\": \"u128\",\n          \"index\": false\n        }\n      ]\n    },\n    {\n      \"name\": \"ReclaimIndex\",\n      \"fields\": [\n        {\n          \"name\": \"vault\",\n          \"type\": \"publicKey\",\n          \"index\": false\n        },\n        {\n          \"name\": \"inOwner\",\n          \"type\": \"publicKey\",\n          \"index\": false\n        },\n        {\n          \"name\": \"inOwnerBalance\",\n          \"type\": \"u64\",\n          \"index\": false\n        },\n        {\n          \"name\": \"outOwner\",\n          \"type\": \"publicKey\",\n          \"index\": false\n        },\n        {\n          \"name\": \"outOwnerBalance\",\n          \"type\": \"u64\",\n          \"index\": false\n        },\n        {\n          \"name\": \"reclaimIndex\",\n          \"type\": \"u64\",\n          \"index\": false\n        }\n      ]\n    },\n    {\n      \"name\": \"UpdateUnstakeLockDuration\",\n      \"fields\": [\n        {\n          \"name\": \"vault\",\n          \"type\": \"publicKey\",\n          \"index\": false\n        },\n        {\n          \"name\": \"oldValue\",\n          \"type\": \"u64\",\n          \"index\": false\n        },\n        {\n          \"name\": \"newValue\",\n          \"type\": \"u64\",\n          \"index\": false\n        }\n      ]\n    },\n    {\n      \"name\": \"UpdateSecondsToFullUnlock\",\n      \"fields\": [\n        {\n          \"name\": \"vault\",\n          \"type\": \"publicKey\",\n          \"index\": false\n        },\n        {\n          \"name\": \"oldValue\",\n          \"type\": \"u64\",\n          \"index\": false\n        },\n        {\n          \"name\": \"newValue\",\n          \"type\": \"u64\",\n          \"index\": false\n        }\n      ]\n    }\n  ],\n  \"errors\": [\n    {\n      \"code\": 6000,\n      \"name\": \"InvalidEscrowOwner\",\n      \"msg\": \"Escrow owner is not vault\"\n    },\n    {\n      \"code\": 6001,\n      \"name\": \"InvalidTopListLength\",\n      \"msg\": \"Invalid top list length\"\n    },\n    {\n      \"code\": 6002,\n      \"name\": \"InvalidSecondsToFullUnlock\",\n      \"msg\": \"Invalid seconds to full unlock\"\n    },\n    {\n      \"code\": 6003,\n      \"name\": \"MustHaveQuoteTokenOrInvalidStakeMint\",\n      \"msg\": \"Pool missing SOL/USDC token or invalid stake mint\"\n    },\n    {\n      \"code\": 6004,\n      \"name\": \"MissingDroppedStakeEscrow\",\n      \"msg\": \"Missing dropped stake escrow\"\n    },\n    {\n      \"code\": 6005,\n      \"name\": \"InvalidStakeEscrow\",\n      \"msg\": \"Invalid stake escrow\"\n    },\n    {\n      \"code\": 6006,\n      \"name\": \"FullBalanceListFull\",\n      \"msg\": \"Full balance list is full\"\n    },\n    {\n      \"code\": 6007,\n      \"name\": \"MintDoesNotBelongToPool\",\n      \"msg\": \"Mint does not belong to the pool\"\n    },\n    {\n      \"code\": 6008,\n      \"name\": \"InsufficientStakeAmount\",\n      \"msg\": \"Insufficient stake amount\"\n    },\n    {\n      \"code\": 6009,\n      \"name\": \"CannotWithdrawUnstakeAmount\",\n      \"msg\": \"Unstake amount release date not reached\"\n    },\n    {\n      \"code\": 6010,\n      \"name\": \"InvalidAdmin\",\n      \"msg\": \"Invalid admin\"\n    },\n    {\n      \"code\": 6011,\n      \"name\": \"InvalidUnstakeLockDuration\",\n      \"msg\": \"Invalid unstake lock duration\"\n    },\n    {\n      \"code\": 6012,\n      \"name\": \"InvalidJoinWindowDuration\",\n      \"msg\": \"Invalid join window duration\"\n    },\n    {\n      \"code\": 6013,\n      \"name\": \"InvalidCustomStartFeeDistributeTimestamp\",\n      \"msg\": \"Invalid custom start fee distribute timestamp\"\n    },\n    {\n      \"code\": 6014,\n      \"name\": \"InvalidSmallestStakeEscrow\",\n      \"msg\": \"Invalid smallest stake escrow\"\n    },\n    {\n      \"code\": 6015,\n      \"name\": \"MathOverflow\",\n      \"msg\": \"MathOverflow\"\n    },\n    {\n      \"code\": 6016,\n      \"name\": \"TypeCastFailed\",\n      \"msg\": \"Type casting failed\"\n    },\n    {\n      \"code\": 6017,\n      \"name\": \"InvalidLockEscrowRelatedAccounts\",\n      \"msg\": \"Invalid lock escrow related accounts\"\n    },\n    {\n      \"code\": 6018,\n      \"name\": \"OnlyConstantProductPool\",\n      \"msg\": \"Only constant product pool is supported\"\n    },\n    {\n      \"code\": 6019,\n      \"name\": \"UndeterminedError\",\n      \"msg\": \"Undetermined error\"\n    },\n    {\n      \"code\": 6020,\n      \"name\": \"MissingSmallestStakeEscrow\",\n      \"msg\": \"Missing smallest stake escrow\"\n    },\n    {\n      \"code\": 6021,\n      \"name\": \"UpdatedValueIsTheSame\",\n      \"msg\": \"Updated value is the same as old value\"\n    },\n    {\n      \"code\": 6022,\n      \"name\": \"InvalidFeeCrankIx\",\n      \"msg\": \"Invalid fee crank instruction\"\n    }\n  ]\n};\n\nexport const IDL: StakeForFee = {\n  \"version\": \"0.1.1\",\n  \"name\": \"stake_for_fee\",\n  \"instructions\": [\n    {\n      \"name\": \"initializeVault\",\n      \"accounts\": [\n        {\n          \"name\": \"vault\",\n          \"isMut\": true,\n          \"isSigner\": false,\n          \"docs\": [\n            \"Vault account\"\n          ]\n        },\n        {\n          \"name\": \"stakeTokenVault\",\n          \"isMut\": true,\n          \"isSigner\": false,\n          \"docs\": [\n            \"Token a vault\"\n          ]\n        },\n        {\n          \"name\": \"quoteTokenVault\",\n          \"isMut\": true,\n          \"isSigner\": false,\n          \"docs\": [\n            \"Token b vault\"\n          ]\n        },\n        {\n          \"name\": \"topStakerList\",\n          \"isMut\": true,\n          \"isSigner\": false,\n          \"docs\": [\n            \"Top staker list account\"\n          ]\n        },\n        {\n          \"name\": \"fullBalanceList\",\n          \"isMut\": true,\n          \"isSigner\": false,\n          \"docs\": [\n            \"Full balance list account\"\n          ]\n        },\n        {\n          \"name\": \"pool\",\n          \"isMut\": false,\n          \"isSigner\": false,\n          \"docs\": [\n            \"Pool account\"\n          ]\n        },\n        {\n          \"name\": \"stakeMint\",\n          \"isMut\": false,\n          \"isSigner\": false,\n          \"docs\": [\n            \"Stake mint\"\n          ]\n        },\n        {\n          \"name\": \"quoteMint\",\n          \"isMut\": false,\n          \"isSigner\": false,\n          \"docs\": [\n            \"Quote mint\"\n          ]\n        },\n        {\n          \"name\": \"lockEscrow\",\n          \"isMut\": false,\n          \"isSigner\": false,\n          \"docs\": [\n            \"Escrow account\"\n          ]\n        },\n        {\n          \"name\": \"payer\",\n          \"isMut\": true,\n          \"isSigner\": true\n        },\n        {\n          \"name\": \"systemProgram\",\n          \"isMut\": false,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"tokenProgram\",\n          \"isMut\": false,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"associatedTokenProgram\",\n          \"isMut\": false,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"eventAuthority\",\n          \"isMut\": false,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"program\",\n          \"isMut\": false,\n          \"isSigner\": false\n        }\n      ],\n      \"args\": [\n        {\n          \"name\": \"params\",\n          \"type\": {\n            \"defined\": \"InitializeVaultParams\"\n          }\n        }\n      ]\n    },\n    {\n      \"name\": \"initializeStakeEscrow\",\n      \"accounts\": [\n        {\n          \"name\": \"vault\",\n          \"isMut\": true,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"escrow\",\n          \"isMut\": true,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"fullBalanceList\",\n          \"isMut\": true,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"topStakerList\",\n          \"isMut\": true,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"owner\",\n          \"isMut\": false,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"payer\",\n          \"isMut\": true,\n          \"isSigner\": true\n        },\n        {\n          \"name\": \"systemProgram\",\n          \"isMut\": false,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"eventAuthority\",\n          \"isMut\": false,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"program\",\n          \"isMut\": false,\n          \"isSigner\": false\n        }\n      ],\n      \"args\": []\n    },\n    {\n      \"name\": \"stake\",\n      \"accounts\": [\n        {\n          \"name\": \"vault\",\n          \"isMut\": true,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"stakeTokenVault\",\n          \"isMut\": true,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"quoteTokenVault\",\n          \"isMut\": true,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"topStakerList\",\n          \"isMut\": true,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"fullBalanceList\",\n          \"isMut\": true,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"stakeEscrow\",\n          \"isMut\": true,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"smallestStakeEscrow\",\n          \"isMut\": true,\n          \"isSigner\": false,\n          \"isOptional\": true\n        },\n        {\n          \"name\": \"userStakeToken\",\n          \"isMut\": true,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"owner\",\n          \"isMut\": false,\n          \"isSigner\": true\n        },\n        {\n          \"name\": \"pool\",\n          \"isMut\": true,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"lpMint\",\n          \"isMut\": true,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"lockEscrow\",\n          \"isMut\": true,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"escrowVault\",\n          \"isMut\": true,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"aTokenVault\",\n          \"isMut\": true,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"bTokenVault\",\n          \"isMut\": true,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"aVault\",\n          \"isMut\": true,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"bVault\",\n          \"isMut\": true,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"aVaultLp\",\n          \"isMut\": true,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"bVaultLp\",\n          \"isMut\": true,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"aVaultLpMint\",\n          \"isMut\": true,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"bVaultLpMint\",\n          \"isMut\": true,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"ammProgram\",\n          \"isMut\": false,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"vaultProgram\",\n          \"isMut\": false,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"tokenProgram\",\n          \"isMut\": false,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"eventAuthority\",\n          \"isMut\": false,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"program\",\n          \"isMut\": false,\n          \"isSigner\": false\n        }\n      ],\n      \"args\": [\n        {\n          \"name\": \"amount\",\n          \"type\": \"u64\"\n        }\n      ]\n    },\n    {\n      \"name\": \"claimFee\",\n      \"docs\": [\n        \"The endpoint will only claim the quote token (SOL or USDC). The meme token will be automatically restaked.\"\n      ],\n      \"accounts\": [\n        {\n          \"name\": \"vault\",\n          \"isMut\": true,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"topStakerList\",\n          \"isMut\": true,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"fullBalanceList\",\n          \"isMut\": true,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"stakeEscrow\",\n          \"isMut\": true,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"smallestStakeEscrow\",\n          \"isMut\": true,\n          \"isSigner\": false,\n          \"isOptional\": true\n        },\n        {\n          \"name\": \"userQuoteToken\",\n          \"isMut\": true,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"stakeTokenVault\",\n          \"isMut\": true,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"quoteTokenVault\",\n          \"isMut\": true,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"owner\",\n          \"isMut\": false,\n          \"isSigner\": true\n        },\n        {\n          \"name\": \"pool\",\n          \"isMut\": true,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"lpMint\",\n          \"isMut\": true,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"lockEscrow\",\n          \"isMut\": true,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"escrowVault\",\n          \"isMut\": true,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"aTokenVault\",\n          \"isMut\": true,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"bTokenVault\",\n          \"isMut\": true,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"aVault\",\n          \"isMut\": true,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"bVault\",\n          \"isMut\": true,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"aVaultLp\",\n          \"isMut\": true,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"bVaultLp\",\n          \"isMut\": true,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"aVaultLpMint\",\n          \"isMut\": true,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"bVaultLpMint\",\n          \"isMut\": true,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"ammProgram\",\n          \"isMut\": false,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"vaultProgram\",\n          \"isMut\": false,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"tokenProgram\",\n          \"isMut\": false,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"eventAuthority\",\n          \"isMut\": false,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"program\",\n          \"isMut\": false,\n          \"isSigner\": false\n        }\n      ],\n      \"args\": [\n        {\n          \"name\": \"maxFee\",\n          \"type\": \"u64\"\n        }\n      ]\n    },\n    {\n      \"name\": \"requestUnstake\",\n      \"accounts\": [\n        {\n          \"name\": \"unstake\",\n          \"isMut\": true,\n          \"isSigner\": true\n        },\n        {\n          \"name\": \"vault\",\n          \"isMut\": true,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"topStakerList\",\n          \"isMut\": true,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"fullBalanceList\",\n          \"isMut\": true,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"stakeEscrow\",\n          \"isMut\": true,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"stakeTokenVault\",\n          \"isMut\": true,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"quoteTokenVault\",\n          \"isMut\": true,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"owner\",\n          \"isMut\": true,\n          \"isSigner\": true\n        },\n        {\n          \"name\": \"pool\",\n          \"isMut\": true,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"lpMint\",\n          \"isMut\": true,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"lockEscrow\",\n          \"isMut\": true,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"escrowVault\",\n          \"isMut\": true,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"aTokenVault\",\n          \"isMut\": true,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"bTokenVault\",\n          \"isMut\": true,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"aVault\",\n          \"isMut\": true,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"bVault\",\n          \"isMut\": true,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"aVaultLp\",\n          \"isMut\": true,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"bVaultLp\",\n          \"isMut\": true,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"aVaultLpMint\",\n          \"isMut\": true,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"bVaultLpMint\",\n          \"isMut\": true,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"ammProgram\",\n          \"isMut\": false,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"vaultProgram\",\n          \"isMut\": false,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"tokenProgram\",\n          \"isMut\": false,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"systemProgram\",\n          \"isMut\": false,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"eventAuthority\",\n          \"isMut\": false,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"program\",\n          \"isMut\": false,\n          \"isSigner\": false\n        }\n      ],\n      \"args\": [\n        {\n          \"name\": \"unstakeAmount\",\n          \"type\": \"u64\"\n        }\n      ]\n    },\n    {\n      \"name\": \"cancelUnstake\",\n      \"accounts\": [\n        {\n          \"name\": \"unstake\",\n          \"isMut\": true,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"stakeEscrow\",\n          \"isMut\": true,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"smallestStakeEscrow\",\n          \"isMut\": true,\n          \"isSigner\": false,\n          \"isOptional\": true\n        },\n        {\n          \"name\": \"topStakerList\",\n          \"isMut\": true,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"fullBalanceList\",\n          \"isMut\": true,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"vault\",\n          \"isMut\": true,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"stakeTokenVault\",\n          \"isMut\": true,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"quoteTokenVault\",\n          \"isMut\": true,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"owner\",\n          \"isMut\": true,\n          \"isSigner\": true\n        },\n        {\n          \"name\": \"pool\",\n          \"isMut\": true,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"lpMint\",\n          \"isMut\": true,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"lockEscrow\",\n          \"isMut\": true,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"escrowVault\",\n          \"isMut\": true,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"aTokenVault\",\n          \"isMut\": true,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"bTokenVault\",\n          \"isMut\": true,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"aVault\",\n          \"isMut\": true,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"bVault\",\n          \"isMut\": true,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"aVaultLp\",\n          \"isMut\": true,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"bVaultLp\",\n          \"isMut\": true,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"aVaultLpMint\",\n          \"isMut\": true,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"bVaultLpMint\",\n          \"isMut\": true,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"ammProgram\",\n          \"isMut\": false,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"vaultProgram\",\n          \"isMut\": false,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"tokenProgram\",\n          \"isMut\": false,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"eventAuthority\",\n          \"isMut\": false,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"program\",\n          \"isMut\": false,\n          \"isSigner\": false\n        }\n      ],\n      \"args\": []\n    },\n    {\n      \"name\": \"withdraw\",\n      \"accounts\": [\n        {\n          \"name\": \"unstake\",\n          \"isMut\": true,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"stakeEscrow\",\n          \"isMut\": true,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"stakeTokenVault\",\n          \"isMut\": true,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"vault\",\n          \"isMut\": true,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"userStakeToken\",\n          \"isMut\": true,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"owner\",\n          \"isMut\": true,\n          \"isSigner\": true\n        },\n        {\n          \"name\": \"tokenProgram\",\n          \"isMut\": false,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"eventAuthority\",\n          \"isMut\": false,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"program\",\n          \"isMut\": false,\n          \"isSigner\": false\n        }\n      ],\n      \"args\": []\n    },\n    {\n      \"name\": \"claimFeeCrank\",\n      \"accounts\": [\n        {\n          \"name\": \"vault\",\n          \"isMut\": true,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"stakeTokenVault\",\n          \"isMut\": true,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"quoteTokenVault\",\n          \"isMut\": true,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"pool\",\n          \"isMut\": true,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"lpMint\",\n          \"isMut\": true,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"lockEscrow\",\n          \"isMut\": true,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"escrowVault\",\n          \"isMut\": true,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"aTokenVault\",\n          \"isMut\": true,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"bTokenVault\",\n          \"isMut\": true,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"aVault\",\n          \"isMut\": true,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"bVault\",\n          \"isMut\": true,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"aVaultLp\",\n          \"isMut\": true,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"bVaultLp\",\n          \"isMut\": true,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"aVaultLpMint\",\n          \"isMut\": true,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"bVaultLpMint\",\n          \"isMut\": true,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"ammProgram\",\n          \"isMut\": false,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"vaultProgram\",\n          \"isMut\": false,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"tokenProgram\",\n          \"isMut\": false,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"eventAuthority\",\n          \"isMut\": false,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"program\",\n          \"isMut\": false,\n          \"isSigner\": false\n        }\n      ],\n      \"args\": []\n    },\n    {\n      \"name\": \"updateUnstakeLockDuration\",\n      \"accounts\": [\n        {\n          \"name\": \"vault\",\n          \"isMut\": true,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"admin\",\n          \"isMut\": false,\n          \"isSigner\": true\n        },\n        {\n          \"name\": \"eventAuthority\",\n          \"isMut\": false,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"program\",\n          \"isMut\": false,\n          \"isSigner\": false\n        }\n      ],\n      \"args\": [\n        {\n          \"name\": \"unstakeLockDuration\",\n          \"type\": \"u64\"\n        }\n      ]\n    },\n    {\n      \"name\": \"updateSecondsToFullUnlock\",\n      \"accounts\": [\n        {\n          \"name\": \"vault\",\n          \"isMut\": true,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"instructionsSysvar\",\n          \"isMut\": false,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"admin\",\n          \"isMut\": false,\n          \"isSigner\": true\n        },\n        {\n          \"name\": \"eventAuthority\",\n          \"isMut\": false,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"program\",\n          \"isMut\": false,\n          \"isSigner\": false\n        }\n      ],\n      \"args\": [\n        {\n          \"name\": \"secondsToFullUnlock\",\n          \"type\": \"u64\"\n        }\n      ]\n    },\n    {\n      \"name\": \"dummy\",\n      \"docs\": [\n        \"To force IDL generation for some struct for easier TS decoding later\"\n      ],\n      \"accounts\": [\n        {\n          \"name\": \"stakerMetadata\",\n          \"isMut\": false,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"stakerBalance\",\n          \"isMut\": false,\n          \"isSigner\": false\n        }\n      ],\n      \"args\": []\n    }\n  ],\n  \"accounts\": [\n    {\n      \"name\": \"stakerMetadataDummyAccount\",\n      \"type\": {\n        \"kind\": \"struct\",\n        \"fields\": [\n          {\n            \"name\": \"stakerMetadata\",\n            \"type\": {\n              \"defined\": \"StakerMetadata\"\n            }\n          }\n        ]\n      }\n    },\n    {\n      \"name\": \"stakerBalanceDummyAccount\",\n      \"type\": {\n        \"kind\": \"struct\",\n        \"fields\": [\n          {\n            \"name\": \"stakerBalance\",\n            \"type\": {\n              \"defined\": \"StakerBalance\"\n            }\n          }\n        ]\n      }\n    },\n    {\n      \"name\": \"fullBalanceListMetadata\",\n      \"type\": {\n        \"kind\": \"struct\",\n        \"fields\": [\n          {\n            \"name\": \"vault\",\n            \"type\": \"publicKey\"\n          },\n          {\n            \"name\": \"length\",\n            \"type\": \"u64\"\n          }\n        ]\n      }\n    },\n    {\n      \"name\": \"stakeEscrow\",\n      \"type\": {\n        \"kind\": \"struct\",\n        \"fields\": [\n          {\n            \"name\": \"owner\",\n            \"type\": \"publicKey\"\n          },\n          {\n            \"name\": \"vault\",\n            \"type\": \"publicKey\"\n          },\n          {\n            \"name\": \"fullBalanceIndex\",\n            \"type\": \"u64\"\n          },\n          {\n            \"name\": \"stakeAmount\",\n            \"type\": \"u64\"\n          },\n          {\n            \"name\": \"inTopList\",\n            \"type\": \"u8\"\n          },\n          {\n            \"name\": \"padding0\",\n            \"type\": {\n              \"array\": [\n                \"u8\",\n                15\n              ]\n            }\n          },\n          {\n            \"name\": \"ongoingTotalPartialUnstakeAmount\",\n            \"type\": \"u64\"\n          },\n          {\n            \"name\": \"createdAt\",\n            \"type\": \"i64\"\n          },\n          {\n            \"name\": \"feeAClaimedAmount\",\n            \"type\": \"u128\"\n          },\n          {\n            \"name\": \"feeBClaimedAmount\",\n            \"type\": \"u128\"\n          },\n          {\n            \"name\": \"feeAPerLiquidityCheckpoint\",\n            \"type\": \"u128\"\n          },\n          {\n            \"name\": \"feeBPerLiquidityCheckpoint\",\n            \"type\": \"u128\"\n          },\n          {\n            \"name\": \"feeAPending\",\n            \"type\": \"u64\"\n          },\n          {\n            \"name\": \"feeBPending\",\n            \"type\": \"u64\"\n          },\n          {\n            \"name\": \"padding\",\n            \"type\": {\n              \"array\": [\n                \"u128\",\n                20\n              ]\n            }\n          }\n        ]\n      }\n    },\n    {\n      \"name\": \"topListMetadata\",\n      \"type\": {\n        \"kind\": \"struct\",\n        \"fields\": [\n          {\n            \"name\": \"vault\",\n            \"docs\": [\n              \"Vault\"\n            ],\n            \"type\": \"publicKey\"\n          }\n        ]\n      }\n    },\n    {\n      \"name\": \"unstake\",\n      \"type\": {\n        \"kind\": \"struct\",\n        \"fields\": [\n          {\n            \"name\": \"stakeEscrow\",\n            \"type\": \"publicKey\"\n          },\n          {\n            \"name\": \"unstakeAmount\",\n            \"type\": \"u64\"\n          },\n          {\n            \"name\": \"createdAt\",\n            \"type\": \"i64\"\n          },\n          {\n            \"name\": \"releaseAt\",\n            \"type\": \"i64\"\n          },\n          {\n            \"name\": \"owner\",\n            \"docs\": [\n              \"owner field, only be used for indexing\"\n            ],\n            \"type\": \"publicKey\"\n          },\n          {\n            \"name\": \"vault\",\n            \"docs\": [\n              \"vault field, only be used for indexing\"\n            ],\n            \"type\": \"publicKey\"\n          },\n          {\n            \"name\": \"padding\",\n            \"type\": {\n              \"array\": [\n                \"u64\",\n                22\n              ]\n            }\n          }\n        ]\n      }\n    },\n    {\n      \"name\": \"feeVault\",\n      \"type\": {\n        \"kind\": \"struct\",\n        \"fields\": [\n          {\n            \"name\": \"lockEscrow\",\n            \"docs\": [\n              \"Lock escrow account\"\n            ],\n            \"type\": \"publicKey\"\n          },\n          {\n            \"name\": \"stakeMint\",\n            \"docs\": [\n              \"Stake mint\"\n            ],\n            \"type\": \"publicKey\"\n          },\n          {\n            \"name\": \"quoteMint\",\n            \"docs\": [\n              \"Quote mint\"\n            ],\n            \"type\": \"publicKey\"\n          },\n          {\n            \"name\": \"pool\",\n            \"docs\": [\n              \"Pool\"\n            ],\n            \"type\": \"publicKey\"\n          },\n          {\n            \"name\": \"stakeTokenVault\",\n            \"docs\": [\n              \"Stake token vault\"\n            ],\n            \"type\": \"publicKey\"\n          },\n          {\n            \"name\": \"quoteTokenVault\",\n            \"docs\": [\n              \"Quote token vault\"\n            ],\n            \"type\": \"publicKey\"\n          },\n          {\n            \"name\": \"topStakerList\",\n            \"docs\": [\n              \"Top staker list\"\n            ],\n            \"type\": \"publicKey\"\n          },\n          {\n            \"name\": \"fullBalanceList\",\n            \"docs\": [\n              \"Full balance list\"\n            ],\n            \"type\": \"publicKey\"\n          },\n          {\n            \"name\": \"metrics\",\n            \"docs\": [\n              \"Metrics\"\n            ],\n            \"type\": {\n              \"defined\": \"Metrics\"\n            }\n          },\n          {\n            \"name\": \"configuration\",\n            \"docs\": [\n              \"Configuration parameters\"\n            ],\n            \"type\": {\n              \"defined\": \"Configuration\"\n            }\n          },\n          {\n            \"name\": \"topStakerInfo\",\n            \"docs\": [\n              \"Top staker info\"\n            ],\n            \"type\": {\n              \"defined\": \"TopStakerInfo\"\n            }\n          },\n          {\n            \"name\": \"creator\",\n            \"docs\": [\n              \"Creator\"\n            ],\n            \"type\": \"publicKey\"\n          },\n          {\n            \"name\": \"createdAt\",\n            \"docs\": [\n              \"Created at\"\n            ],\n            \"type\": \"i64\"\n          },\n          {\n            \"name\": \"bump\",\n            \"docs\": [\n              \"Bump\"\n            ],\n            \"type\": \"u8\"\n          },\n          {\n            \"name\": \"padding0\",\n            \"docs\": [\n              \"Padding\"\n            ],\n            \"type\": {\n              \"array\": [\n                \"u8\",\n                7\n              ]\n            }\n          },\n          {\n            \"name\": \"padding\",\n            \"docs\": [\n              \"Padding\"\n            ],\n            \"type\": {\n              \"array\": [\n                \"u128\",\n                20\n              ]\n            }\n          }\n        ]\n      }\n    }\n  ],\n  \"types\": [\n    {\n      \"name\": \"InitializeVaultParams\",\n      \"type\": {\n        \"kind\": \"struct\",\n        \"fields\": [\n          {\n            \"name\": \"topListLength\",\n            \"type\": \"u16\"\n          },\n          {\n            \"name\": \"secondsToFullUnlock\",\n            \"type\": \"u64\"\n          },\n          {\n            \"name\": \"unstakeLockDuration\",\n            \"type\": \"u64\"\n          },\n          {\n            \"name\": \"startFeeDistributeTimestamp\",\n            \"type\": {\n              \"option\": \"u64\"\n            }\n          },\n          {\n            \"name\": \"padding\",\n            \"type\": {\n              \"array\": [\n                \"u8\",\n                64\n              ]\n            }\n          }\n        ]\n      }\n    },\n    {\n      \"name\": \"StakerBalance\",\n      \"type\": {\n        \"kind\": \"struct\",\n        \"fields\": [\n          {\n            \"name\": \"balance\",\n            \"docs\": [\n              \"Balance\"\n            ],\n            \"type\": \"u64\"\n          },\n          {\n            \"name\": \"owner\",\n            \"docs\": [\n              \"Owner pubkey, we don't need this for logic, but it is useful for indexing\"\n            ],\n            \"type\": \"publicKey\"\n          },\n          {\n            \"name\": \"isInTopList\",\n            \"docs\": [\n              \"In top list\"\n            ],\n            \"type\": \"u8\"\n          },\n          {\n            \"name\": \"padding\",\n            \"docs\": [\n              \"Padding\"\n            ],\n            \"type\": {\n              \"array\": [\n                \"u8\",\n                7\n              ]\n            }\n          }\n        ]\n      }\n    },\n    {\n      \"name\": \"StakerMetadata\",\n      \"type\": {\n        \"kind\": \"struct\",\n        \"fields\": [\n          {\n            \"name\": \"stakeAmount\",\n            \"docs\": [\n              \"Staked amount\"\n            ],\n            \"type\": \"u64\"\n          },\n          {\n            \"name\": \"fullBalanceIndex\",\n            \"docs\": [\n              \"Full balance list index. When it's negative, the slot is empty\"\n            ],\n            \"type\": \"i64\"\n          },\n          {\n            \"name\": \"owner\",\n            \"docs\": [\n              \"Owner pubkey, we dont need this for logic, but it is useful for indexing\"\n            ],\n            \"type\": \"publicKey\"\n          }\n        ]\n      }\n    },\n    {\n      \"name\": \"Configuration\",\n      \"type\": {\n        \"kind\": \"struct\",\n        \"fields\": [\n          {\n            \"name\": \"secondsToFullUnlock\",\n            \"docs\": [\n              \"Time required for locked claim fee to be fully dripped\"\n            ],\n            \"type\": \"u64\"\n          },\n          {\n            \"name\": \"unstakeLockDuration\",\n            \"docs\": [\n              \"Unstake lock duration\"\n            ],\n            \"type\": \"u64\"\n          },\n          {\n            \"name\": \"startFeeDistributeTimestamp\",\n            \"docs\": [\n              \"When the fee start distributes\"\n            ],\n            \"type\": \"i64\"\n          },\n          {\n            \"name\": \"padding0\",\n            \"docs\": [\n              \"padding 0\"\n            ],\n            \"type\": \"u64\"\n          },\n          {\n            \"name\": \"padding\",\n            \"docs\": [\n              \"padding\"\n            ],\n            \"type\": {\n              \"array\": [\n                \"u128\",\n                4\n              ]\n            }\n          }\n        ]\n      }\n    },\n    {\n      \"name\": \"Metrics\",\n      \"type\": {\n        \"kind\": \"struct\",\n        \"fields\": [\n          {\n            \"name\": \"totalStakedAmount\",\n            \"docs\": [\n              \"Total staked amount\"\n            ],\n            \"type\": \"u64\"\n          },\n          {\n            \"name\": \"totalStakeEscrowCount\",\n            \"docs\": [\n              \"Total stake escrow count\"\n            ],\n            \"type\": \"u64\"\n          },\n          {\n            \"name\": \"ongoingTotalPartialUnstakeAmount\",\n            \"docs\": [\n              \"Ongoing total partial unstake amount\"\n            ],\n            \"type\": \"u64\"\n          },\n          {\n            \"name\": \"padding0\",\n            \"docs\": [\n              \"padding 0\"\n            ],\n            \"type\": \"u64\"\n          },\n          {\n            \"name\": \"totalFeeAAmount\",\n            \"docs\": [\n              \"Total claimed fee a amount\"\n            ],\n            \"type\": \"u128\"\n          },\n          {\n            \"name\": \"totalFeeBAmount\",\n            \"docs\": [\n              \"Total claimed fee b amount\"\n            ],\n            \"type\": \"u128\"\n          },\n          {\n            \"name\": \"userTotalClaimedFeeA\",\n            \"docs\": [\n              \"User total claimed fee a\"\n            ],\n            \"type\": \"u128\"\n          },\n          {\n            \"name\": \"userTotalClaimedFeeB\",\n            \"docs\": [\n              \"User total claimed fee b\"\n            ],\n            \"type\": \"u128\"\n          },\n          {\n            \"name\": \"padding\",\n            \"docs\": [\n              \"padding\"\n            ],\n            \"type\": {\n              \"array\": [\n                \"u128\",\n                4\n              ]\n            }\n          }\n        ]\n      }\n    },\n    {\n      \"name\": \"TopStakerInfo\",\n      \"type\": {\n        \"kind\": \"struct\",\n        \"fields\": [\n          {\n            \"name\": \"topListLength\",\n            \"docs\": [\n              \"Number of holder in the top list\"\n            ],\n            \"type\": \"u64\"\n          },\n          {\n            \"name\": \"currentLength\",\n            \"docs\": [\n              \"Current length, used for resize\"\n            ],\n            \"type\": \"u64\"\n          },\n          {\n            \"name\": \"effectiveStakeAmount\",\n            \"docs\": [\n              \"Effective stake amount. Total stake amount in the top list.\"\n            ],\n            \"type\": \"u64\"\n          },\n          {\n            \"name\": \"lastClaimFeeAt\",\n            \"docs\": [\n              \"Last claim fee at\"\n            ],\n            \"type\": \"i64\"\n          },\n          {\n            \"name\": \"lastUpdatedAt\",\n            \"docs\": [\n              \"Last fee drip updated at\"\n            ],\n            \"type\": \"i64\"\n          },\n          {\n            \"name\": \"lockedFeeA\",\n            \"docs\": [\n              \"Locked fee a\"\n            ],\n            \"type\": \"u64\"\n          },\n          {\n            \"name\": \"lockedFeeB\",\n            \"docs\": [\n              \"Locked fee b\"\n            ],\n            \"type\": \"u64\"\n          },\n          {\n            \"name\": \"padding0\",\n            \"docs\": [\n              \"Padding\"\n            ],\n            \"type\": \"u64\"\n          },\n          {\n            \"name\": \"cumulativeFeeAPerLiquidity\",\n            \"docs\": [\n              \"cumulative fee a per liquidity\"\n            ],\n            \"type\": \"u128\"\n          },\n          {\n            \"name\": \"cumulativeFeeBPerLiquidity\",\n            \"docs\": [\n              \"cumulative fee b per liquidity\"\n            ],\n            \"type\": \"u128\"\n          },\n          {\n            \"name\": \"padding\",\n            \"docs\": [\n              \"padding\"\n            ],\n            \"type\": {\n              \"array\": [\n                \"u128\",\n                4\n              ]\n            }\n          }\n        ]\n      }\n    },\n    {\n      \"name\": \"Rounding\",\n      \"docs\": [\n        \"Round up, down\"\n      ],\n      \"type\": {\n        \"kind\": \"enum\",\n        \"variants\": [\n          {\n            \"name\": \"Up\"\n          },\n          {\n            \"name\": \"Down\"\n          }\n        ]\n      }\n    }\n  ],\n  \"events\": [\n    {\n      \"name\": \"VaultCreated\",\n      \"fields\": [\n        {\n          \"name\": \"pool\",\n          \"type\": \"publicKey\",\n          \"index\": false\n        },\n        {\n          \"name\": \"tokenAMint\",\n          \"type\": \"publicKey\",\n          \"index\": false\n        },\n        {\n          \"name\": \"tokenBMint\",\n          \"type\": \"publicKey\",\n          \"index\": false\n        },\n        {\n          \"name\": \"vault\",\n          \"type\": \"publicKey\",\n          \"index\": false\n        },\n        {\n          \"name\": \"stakeMint\",\n          \"type\": \"publicKey\",\n          \"index\": false\n        },\n        {\n          \"name\": \"quoteMint\",\n          \"type\": \"publicKey\",\n          \"index\": false\n        },\n        {\n          \"name\": \"creator\",\n          \"type\": \"publicKey\",\n          \"index\": false\n        },\n        {\n          \"name\": \"topListLength\",\n          \"type\": \"u16\",\n          \"index\": false\n        },\n        {\n          \"name\": \"secondsToFullUnlock\",\n          \"type\": \"u64\",\n          \"index\": false\n        },\n        {\n          \"name\": \"unstakeLockDuration\",\n          \"type\": \"u64\",\n          \"index\": false\n        },\n        {\n          \"name\": \"startFeeDistributeTimestamp\",\n          \"type\": \"i64\",\n          \"index\": false\n        }\n      ]\n    },\n    {\n      \"name\": \"StakeEscrowCreated\",\n      \"fields\": [\n        {\n          \"name\": \"pool\",\n          \"type\": \"publicKey\",\n          \"index\": false\n        },\n        {\n          \"name\": \"vault\",\n          \"type\": \"publicKey\",\n          \"index\": false\n        },\n        {\n          \"name\": \"escrow\",\n          \"type\": \"publicKey\",\n          \"index\": false\n        },\n        {\n          \"name\": \"owner\",\n          \"type\": \"publicKey\",\n          \"index\": false\n        },\n        {\n          \"name\": \"fullBalanceIndex\",\n          \"type\": \"u64\",\n          \"index\": false\n        }\n      ]\n    },\n    {\n      \"name\": \"ConfigCreated\",\n      \"fields\": [\n        {\n          \"name\": \"config\",\n          \"type\": \"publicKey\",\n          \"index\": false\n        },\n        {\n          \"name\": \"index\",\n          \"type\": \"u64\",\n          \"index\": false\n        },\n        {\n          \"name\": \"secondsToFullUnlock\",\n          \"type\": \"u64\",\n          \"index\": false\n        },\n        {\n          \"name\": \"unstakeLockDuration\",\n          \"type\": \"u64\",\n          \"index\": false\n        },\n        {\n          \"name\": \"joinWindowDuration\",\n          \"type\": \"u64\",\n          \"index\": false\n        },\n        {\n          \"name\": \"topListLength\",\n          \"type\": \"u16\",\n          \"index\": false\n        }\n      ]\n    },\n    {\n      \"name\": \"ConfigClosed\",\n      \"fields\": [\n        {\n          \"name\": \"config\",\n          \"type\": \"publicKey\",\n          \"index\": false\n        },\n        {\n          \"name\": \"index\",\n          \"type\": \"u64\",\n          \"index\": false\n        }\n      ]\n    },\n    {\n      \"name\": \"UnstakeCreated\",\n      \"fields\": [\n        {\n          \"name\": \"unstake\",\n          \"type\": \"publicKey\",\n          \"index\": false\n        },\n        {\n          \"name\": \"pool\",\n          \"type\": \"publicKey\",\n          \"index\": false\n        },\n        {\n          \"name\": \"vault\",\n          \"type\": \"publicKey\",\n          \"index\": false\n        },\n        {\n          \"name\": \"owner\",\n          \"type\": \"publicKey\",\n          \"index\": false\n        },\n        {\n          \"name\": \"amount\",\n          \"type\": \"u64\",\n          \"index\": false\n        },\n        {\n          \"name\": \"newStakeEscrowAmount\",\n          \"type\": \"u64\",\n          \"index\": false\n        },\n        {\n          \"name\": \"newStakeEscrowOngoingTotalUnstakeAmount\",\n          \"type\": \"u64\",\n          \"index\": false\n        },\n        {\n          \"name\": \"feeAPending\",\n          \"type\": \"u64\",\n          \"index\": false\n        },\n        {\n          \"name\": \"feeBPending\",\n          \"type\": \"u64\",\n          \"index\": false\n        },\n        {\n          \"name\": \"feeAPerLiquidityCheckpoint\",\n          \"type\": \"u128\",\n          \"index\": false\n        },\n        {\n          \"name\": \"feeBPerLiquidityCheckpoint\",\n          \"type\": \"u128\",\n          \"index\": false\n        },\n        {\n          \"name\": \"startAt\",\n          \"type\": \"i64\",\n          \"index\": false\n        },\n        {\n          \"name\": \"endAt\",\n          \"type\": \"i64\",\n          \"index\": false\n        }\n      ]\n    },\n    {\n      \"name\": \"CancelUnstakeSucceed\",\n      \"fields\": [\n        {\n          \"name\": \"unstake\",\n          \"type\": \"publicKey\",\n          \"index\": false\n        },\n        {\n          \"name\": \"pool\",\n          \"type\": \"publicKey\",\n          \"index\": false\n        },\n        {\n          \"name\": \"vault\",\n          \"type\": \"publicKey\",\n          \"index\": false\n        },\n        {\n          \"name\": \"owner\",\n          \"type\": \"publicKey\",\n          \"index\": false\n        },\n        {\n          \"name\": \"amount\",\n          \"type\": \"u64\",\n          \"index\": false\n        },\n        {\n          \"name\": \"newStakeEscrowAmount\",\n          \"type\": \"u64\",\n          \"index\": false\n        },\n        {\n          \"name\": \"newStakeEscrowOngoingTotalUnstakeAmount\",\n          \"type\": \"u64\",\n          \"index\": false\n        },\n        {\n          \"name\": \"feeAPending\",\n          \"type\": \"u64\",\n          \"index\": false\n        },\n        {\n          \"name\": \"feeBPending\",\n          \"type\": \"u64\",\n          \"index\": false\n        },\n        {\n          \"name\": \"feeAPerLiquidityCheckpoint\",\n          \"type\": \"u128\",\n          \"index\": false\n        },\n        {\n          \"name\": \"feeBPerLiquidityCheckpoint\",\n          \"type\": \"u128\",\n          \"index\": false\n        }\n      ]\n    },\n    {\n      \"name\": \"WithdrawSucceed\",\n      \"fields\": [\n        {\n          \"name\": \"unstake\",\n          \"type\": \"publicKey\",\n          \"index\": false\n        },\n        {\n          \"name\": \"pool\",\n          \"type\": \"publicKey\",\n          \"index\": false\n        },\n        {\n          \"name\": \"vault\",\n          \"type\": \"publicKey\",\n          \"index\": false\n        },\n        {\n          \"name\": \"owner\",\n          \"type\": \"publicKey\",\n          \"index\": false\n        },\n        {\n          \"name\": \"amount\",\n          \"type\": \"u64\",\n          \"index\": false\n        },\n        {\n          \"name\": \"newStakeEscrowOngoingTotalUnstakeAmount\",\n          \"type\": \"u64\",\n          \"index\": false\n        }\n      ]\n    },\n    {\n      \"name\": \"ClaimFeeSucceed\",\n      \"fields\": [\n        {\n          \"name\": \"stakeEscrow\",\n          \"type\": \"publicKey\",\n          \"index\": false\n        },\n        {\n          \"name\": \"pool\",\n          \"type\": \"publicKey\",\n          \"index\": false\n        },\n        {\n          \"name\": \"vault\",\n          \"type\": \"publicKey\",\n          \"index\": false\n        },\n        {\n          \"name\": \"owner\",\n          \"type\": \"publicKey\",\n          \"index\": false\n        },\n        {\n          \"name\": \"feeAAmount\",\n          \"type\": \"u64\",\n          \"index\": false\n        },\n        {\n          \"name\": \"feeBAmount\",\n          \"type\": \"u64\",\n          \"index\": false\n        },\n        {\n          \"name\": \"totalFeeAAmount\",\n          \"type\": \"u128\",\n          \"index\": false\n        },\n        {\n          \"name\": \"totalFeeBAmount\",\n          \"type\": \"u128\",\n          \"index\": false\n        }\n      ]\n    },\n    {\n      \"name\": \"FeeEmission\",\n      \"fields\": [\n        {\n          \"name\": \"pool\",\n          \"type\": \"publicKey\",\n          \"index\": false\n        },\n        {\n          \"name\": \"vault\",\n          \"type\": \"publicKey\",\n          \"index\": false\n        },\n        {\n          \"name\": \"tokenAClaimed\",\n          \"type\": \"u64\",\n          \"index\": false\n        },\n        {\n          \"name\": \"tokenBClaimed\",\n          \"type\": \"u64\",\n          \"index\": false\n        },\n        {\n          \"name\": \"tokenAReleased\",\n          \"type\": \"u64\",\n          \"index\": false\n        },\n        {\n          \"name\": \"tokenBReleased\",\n          \"type\": \"u64\",\n          \"index\": false\n        },\n        {\n          \"name\": \"cumulativeFeeAPerLiquidity\",\n          \"type\": \"u128\",\n          \"index\": false\n        },\n        {\n          \"name\": \"cumulativeFeeBPerLiquidity\",\n          \"type\": \"u128\",\n          \"index\": false\n        },\n        {\n          \"name\": \"effectiveStakeAmount\",\n          \"type\": \"u64\",\n          \"index\": false\n        }\n      ]\n    },\n    {\n      \"name\": \"AddNewUserToTopHolder\",\n      \"fields\": [\n        {\n          \"name\": \"pool\",\n          \"type\": \"publicKey\",\n          \"index\": false\n        },\n        {\n          \"name\": \"vault\",\n          \"type\": \"publicKey\",\n          \"index\": false\n        },\n        {\n          \"name\": \"owner\",\n          \"type\": \"publicKey\",\n          \"index\": false\n        },\n        {\n          \"name\": \"stakeAmount\",\n          \"type\": \"u64\",\n          \"index\": false\n        },\n        {\n          \"name\": \"feeAPending\",\n          \"type\": \"u64\",\n          \"index\": false\n        },\n        {\n          \"name\": \"feeBPending\",\n          \"type\": \"u64\",\n          \"index\": false\n        },\n        {\n          \"name\": \"feeAPerLiquidityCheckpoint\",\n          \"type\": \"u128\",\n          \"index\": false\n        },\n        {\n          \"name\": \"feeBPerLiquidityCheckpoint\",\n          \"type\": \"u128\",\n          \"index\": false\n        }\n      ]\n    },\n    {\n      \"name\": \"RemoveUserFromTopHolder\",\n      \"fields\": [\n        {\n          \"name\": \"pool\",\n          \"type\": \"publicKey\",\n          \"index\": false\n        },\n        {\n          \"name\": \"vault\",\n          \"type\": \"publicKey\",\n          \"index\": false\n        },\n        {\n          \"name\": \"owner\",\n          \"type\": \"publicKey\",\n          \"index\": false\n        },\n        {\n          \"name\": \"stakeAmount\",\n          \"type\": \"u64\",\n          \"index\": false\n        },\n        {\n          \"name\": \"feeAPending\",\n          \"type\": \"u64\",\n          \"index\": false\n        },\n        {\n          \"name\": \"feeBPending\",\n          \"type\": \"u64\",\n          \"index\": false\n        },\n        {\n          \"name\": \"feeAPerLiquidityCheckpoint\",\n          \"type\": \"u128\",\n          \"index\": false\n        },\n        {\n          \"name\": \"feeBPerLiquidityCheckpoint\",\n          \"type\": \"u128\",\n          \"index\": false\n        }\n      ]\n    },\n    {\n      \"name\": \"UserStake\",\n      \"fields\": [\n        {\n          \"name\": \"pool\",\n          \"type\": \"publicKey\",\n          \"index\": false\n        },\n        {\n          \"name\": \"vault\",\n          \"type\": \"publicKey\",\n          \"index\": false\n        },\n        {\n          \"name\": \"owner\",\n          \"type\": \"publicKey\",\n          \"index\": false\n        },\n        {\n          \"name\": \"stakeAmount\",\n          \"type\": \"u64\",\n          \"index\": false\n        },\n        {\n          \"name\": \"totalStakeAmount\",\n          \"type\": \"u64\",\n          \"index\": false\n        },\n        {\n          \"name\": \"feeAPending\",\n          \"type\": \"u64\",\n          \"index\": false\n        },\n        {\n          \"name\": \"feeBPending\",\n          \"type\": \"u64\",\n          \"index\": false\n        },\n        {\n          \"name\": \"feeAPerLiquidityCheckpoint\",\n          \"type\": \"u128\",\n          \"index\": false\n        },\n        {\n          \"name\": \"feeBPerLiquidityCheckpoint\",\n          \"type\": \"u128\",\n          \"index\": false\n        }\n      ]\n    },\n    {\n      \"name\": \"ReclaimIndex\",\n      \"fields\": [\n        {\n          \"name\": \"vault\",\n          \"type\": \"publicKey\",\n          \"index\": false\n        },\n        {\n          \"name\": \"inOwner\",\n          \"type\": \"publicKey\",\n          \"index\": false\n        },\n        {\n          \"name\": \"inOwnerBalance\",\n          \"type\": \"u64\",\n          \"index\": false\n        },\n        {\n          \"name\": \"outOwner\",\n          \"type\": \"publicKey\",\n          \"index\": false\n        },\n        {\n          \"name\": \"outOwnerBalance\",\n          \"type\": \"u64\",\n          \"index\": false\n        },\n        {\n          \"name\": \"reclaimIndex\",\n          \"type\": \"u64\",\n          \"index\": false\n        }\n      ]\n    },\n    {\n      \"name\": \"UpdateUnstakeLockDuration\",\n      \"fields\": [\n        {\n          \"name\": \"vault\",\n          \"type\": \"publicKey\",\n          \"index\": false\n        },\n        {\n          \"name\": \"oldValue\",\n          \"type\": \"u64\",\n          \"index\": false\n        },\n        {\n          \"name\": \"newValue\",\n          \"type\": \"u64\",\n          \"index\": false\n        }\n      ]\n    },\n    {\n      \"name\": \"UpdateSecondsToFullUnlock\",\n      \"fields\": [\n        {\n          \"name\": \"vault\",\n          \"type\": \"publicKey\",\n          \"index\": false\n        },\n        {\n          \"name\": \"oldValue\",\n          \"type\": \"u64\",\n          \"index\": false\n        },\n        {\n          \"name\": \"newValue\",\n          \"type\": \"u64\",\n          \"index\": false\n        }\n      ]\n    }\n  ],\n  \"errors\": [\n    {\n      \"code\": 6000,\n      \"name\": \"InvalidEscrowOwner\",\n      \"msg\": \"Escrow owner is not vault\"\n    },\n    {\n      \"code\": 6001,\n      \"name\": \"InvalidTopListLength\",\n      \"msg\": \"Invalid top list length\"\n    },\n    {\n      \"code\": 6002,\n      \"name\": \"InvalidSecondsToFullUnlock\",\n      \"msg\": \"Invalid seconds to full unlock\"\n    },\n    {\n      \"code\": 6003,\n      \"name\": \"MustHaveQuoteTokenOrInvalidStakeMint\",\n      \"msg\": \"Pool missing SOL/USDC token or invalid stake mint\"\n    },\n    {\n      \"code\": 6004,\n      \"name\": \"MissingDroppedStakeEscrow\",\n      \"msg\": \"Missing dropped stake escrow\"\n    },\n    {\n      \"code\": 6005,\n      \"name\": \"InvalidStakeEscrow\",\n      \"msg\": \"Invalid stake escrow\"\n    },\n    {\n      \"code\": 6006,\n      \"name\": \"FullBalanceListFull\",\n      \"msg\": \"Full balance list is full\"\n    },\n    {\n      \"code\": 6007,\n      \"name\": \"MintDoesNotBelongToPool\",\n      \"msg\": \"Mint does not belong to the pool\"\n    },\n    {\n      \"code\": 6008,\n      \"name\": \"InsufficientStakeAmount\",\n      \"msg\": \"Insufficient stake amount\"\n    },\n    {\n      \"code\": 6009,\n      \"name\": \"CannotWithdrawUnstakeAmount\",\n      \"msg\": \"Unstake amount release date not reached\"\n    },\n    {\n      \"code\": 6010,\n      \"name\": \"InvalidAdmin\",\n      \"msg\": \"Invalid admin\"\n    },\n    {\n      \"code\": 6011,\n      \"name\": \"InvalidUnstakeLockDuration\",\n      \"msg\": \"Invalid unstake lock duration\"\n    },\n    {\n      \"code\": 6012,\n      \"name\": \"InvalidJoinWindowDuration\",\n      \"msg\": \"Invalid join window duration\"\n    },\n    {\n      \"code\": 6013,\n      \"name\": \"InvalidCustomStartFeeDistributeTimestamp\",\n      \"msg\": \"Invalid custom start fee distribute timestamp\"\n    },\n    {\n      \"code\": 6014,\n      \"name\": \"InvalidSmallestStakeEscrow\",\n      \"msg\": \"Invalid smallest stake escrow\"\n    },\n    {\n      \"code\": 6015,\n      \"name\": \"MathOverflow\",\n      \"msg\": \"MathOverflow\"\n    },\n    {\n      \"code\": 6016,\n      \"name\": \"TypeCastFailed\",\n      \"msg\": \"Type casting failed\"\n    },\n    {\n      \"code\": 6017,\n      \"name\": \"InvalidLockEscrowRelatedAccounts\",\n      \"msg\": \"Invalid lock escrow related accounts\"\n    },\n    {\n      \"code\": 6018,\n      \"name\": \"OnlyConstantProductPool\",\n      \"msg\": \"Only constant product pool is supported\"\n    },\n    {\n      \"code\": 6019,\n      \"name\": \"UndeterminedError\",\n      \"msg\": \"Undetermined error\"\n    },\n    {\n      \"code\": 6020,\n      \"name\": \"MissingSmallestStakeEscrow\",\n      \"msg\": \"Missing smallest stake escrow\"\n    },\n    {\n      \"code\": 6021,\n      \"name\": \"UpdatedValueIsTheSame\",\n      \"msg\": \"Updated value is the same as old value\"\n    },\n    {\n      \"code\": 6022,\n      \"name\": \"InvalidFeeCrankIx\",\n      \"msg\": \"Invalid fee crank instruction\"\n    }\n  ]\n};\n","export type Amm = {\n  version: \"0.5.1\";\n  name: \"amm\";\n  docs: [\"Program for AMM\"];\n  instructions: [\n    {\n      name: \"initializePermissionedPool\";\n      docs: [\"Initialize a new permissioned pool.\"];\n      accounts: [\n        {\n          name: \"pool\";\n          isMut: true;\n          isSigner: true;\n          docs: [\"Pool account (arbitrary address)\"];\n        },\n        {\n          name: \"lpMint\";\n          isMut: true;\n          isSigner: false;\n          docs: [\"LP token mint of the pool\"];\n        },\n        {\n          name: \"tokenAMint\";\n          isMut: false;\n          isSigner: false;\n          docs: [\"Token A mint of the pool. Eg: USDT\"];\n        },\n        {\n          name: \"tokenBMint\";\n          isMut: false;\n          isSigner: false;\n          docs: [\"Token B mint of the pool. Eg: USDC\"];\n        },\n        {\n          name: \"aVault\";\n          isMut: true;\n          isSigner: false;\n          docs: [\n            \"Vault account for token A. Token A of the pool will be deposit / withdraw from this vault account.\"\n          ];\n        },\n        {\n          name: \"bVault\";\n          isMut: true;\n          isSigner: false;\n          docs: [\n            \"Vault account for token B. Token B of the pool will be deposit / withdraw from this vault account.\"\n          ];\n        },\n        {\n          name: \"aVaultLpMint\";\n          isMut: true;\n          isSigner: false;\n          docs: [\"LP token mint of vault A\"];\n        },\n        {\n          name: \"bVaultLpMint\";\n          isMut: true;\n          isSigner: false;\n          docs: [\"LP token mint of vault B\"];\n        },\n        {\n          name: \"aVaultLp\";\n          isMut: true;\n          isSigner: false;\n          docs: [\n            \"LP token account of vault A. Used to receive/burn the vault LP upon deposit/withdraw from the vault.\"\n          ];\n        },\n        {\n          name: \"bVaultLp\";\n          isMut: true;\n          isSigner: false;\n          docs: [\n            \"LP token account of vault B. Used to receive/burn vault LP upon deposit/withdraw from the vault.\"\n          ];\n        },\n        {\n          name: \"adminTokenA\";\n          isMut: true;\n          isSigner: false;\n          docs: [\n            \"Admin token account for pool token A mint. Used to bootstrap the pool with initial liquidity.\"\n          ];\n        },\n        {\n          name: \"adminTokenB\";\n          isMut: true;\n          isSigner: false;\n          docs: [\n            \"Admin token account for pool token B mint. Used to bootstrap the pool with initial liquidity.\"\n          ];\n        },\n        {\n          name: \"adminPoolLp\";\n          isMut: true;\n          isSigner: false;\n          docs: [\n            \"Admin pool LP token account. Used to receive LP during first deposit (initialize pool)\",\n            \"Admin pool LP token account. Used to receive LP during first deposit (initialize pool)\"\n          ];\n        },\n        {\n          name: \"protocolTokenAFee\";\n          isMut: true;\n          isSigner: false;\n          docs: [\n            \"Protocol fee token account for token A. Used to receive trading fee.\"\n          ];\n        },\n        {\n          name: \"protocolTokenBFee\";\n          isMut: true;\n          isSigner: false;\n          docs: [\n            \"Protocol fee token account for token B. Used to receive trading fee.\"\n          ];\n        },\n        {\n          name: \"admin\";\n          isMut: true;\n          isSigner: true;\n          docs: [\n            \"Admin account. This account will be the admin of the pool, and the payer for PDA during initialize pool.\"\n          ];\n        },\n        {\n          name: \"feeOwner\";\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: \"rent\";\n          isMut: false;\n          isSigner: false;\n          docs: [\"Rent account.\"];\n        },\n        {\n          name: \"mintMetadata\";\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: \"metadataProgram\";\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: \"vaultProgram\";\n          isMut: false;\n          isSigner: false;\n          docs: [\n            \"Vault program. The pool will deposit/withdraw liquidity from the vault.\"\n          ];\n        },\n        {\n          name: \"tokenProgram\";\n          isMut: false;\n          isSigner: false;\n          docs: [\"Token program.\"];\n        },\n        {\n          name: \"associatedTokenProgram\";\n          isMut: false;\n          isSigner: false;\n          docs: [\"Associated token program.\"];\n        },\n        {\n          name: \"systemProgram\";\n          isMut: false;\n          isSigner: false;\n          docs: [\"System program.\"];\n        }\n      ];\n      args: [\n        {\n          name: \"curveType\";\n          type: {\n            defined: \"CurveType\";\n          };\n        }\n      ];\n    },\n    {\n      name: \"initializePermissionlessPool\";\n      docs: [\"Initialize a new permissionless pool.\"];\n      accounts: [\n        {\n          name: \"pool\";\n          isMut: true;\n          isSigner: false;\n          docs: [\"Pool account (PDA address)\"];\n        },\n        {\n          name: \"lpMint\";\n          isMut: true;\n          isSigner: false;\n          docs: [\"LP token mint of the pool\"];\n        },\n        {\n          name: \"tokenAMint\";\n          isMut: false;\n          isSigner: false;\n          docs: [\"Token A mint of the pool. Eg: USDT\"];\n        },\n        {\n          name: \"tokenBMint\";\n          isMut: false;\n          isSigner: false;\n          docs: [\"Token B mint of the pool. Eg: USDC\"];\n        },\n        {\n          name: \"aVault\";\n          isMut: true;\n          isSigner: false;\n          docs: [\n            \"Vault account for token A. Token A of the pool will be deposit / withdraw from this vault account.\"\n          ];\n        },\n        {\n          name: \"bVault\";\n          isMut: true;\n          isSigner: false;\n          docs: [\n            \"Vault account for token B. Token B of the pool will be deposit / withdraw from this vault account.\"\n          ];\n        },\n        {\n          name: \"aTokenVault\";\n          isMut: true;\n          isSigner: false;\n          docs: [\"Token vault account of vault A\"];\n        },\n        {\n          name: \"bTokenVault\";\n          isMut: true;\n          isSigner: false;\n          docs: [\"Token vault account of vault B\"];\n        },\n        {\n          name: \"aVaultLpMint\";\n          isMut: true;\n          isSigner: false;\n          docs: [\"LP token mint of vault A\"];\n        },\n        {\n          name: \"bVaultLpMint\";\n          isMut: true;\n          isSigner: false;\n          docs: [\"LP token mint of vault B\"];\n        },\n        {\n          name: \"aVaultLp\";\n          isMut: true;\n          isSigner: false;\n          docs: [\n            \"LP token account of vault A. Used to receive/burn the vault LP upon deposit/withdraw from the vault.\"\n          ];\n        },\n        {\n          name: \"bVaultLp\";\n          isMut: true;\n          isSigner: false;\n          docs: [\n            \"LP token account of vault B. Used to receive/burn vault LP upon deposit/withdraw from the vault.\"\n          ];\n        },\n        {\n          name: \"payerTokenA\";\n          isMut: true;\n          isSigner: false;\n          docs: [\n            \"Payer token account for pool token A mint. Used to bootstrap the pool with initial liquidity.\"\n          ];\n        },\n        {\n          name: \"payerTokenB\";\n          isMut: true;\n          isSigner: false;\n          docs: [\n            \"Admin token account for pool token B mint. Used to bootstrap the pool with initial liquidity.\"\n          ];\n        },\n        {\n          name: \"payerPoolLp\";\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: \"protocolTokenAFee\";\n          isMut: true;\n          isSigner: false;\n          docs: [\n            \"Protocol fee token account for token A. Used to receive trading fee.\"\n          ];\n        },\n        {\n          name: \"protocolTokenBFee\";\n          isMut: true;\n          isSigner: false;\n          docs: [\n            \"Protocol fee token account for token B. Used to receive trading fee.\"\n          ];\n        },\n        {\n          name: \"payer\";\n          isMut: true;\n          isSigner: true;\n          docs: [\n            \"Admin account. This account will be the admin of the pool, and the payer for PDA during initialize pool.\"\n          ];\n        },\n        {\n          name: \"feeOwner\";\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: \"rent\";\n          isMut: false;\n          isSigner: false;\n          docs: [\"Rent account.\"];\n        },\n        {\n          name: \"mintMetadata\";\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: \"metadataProgram\";\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: \"vaultProgram\";\n          isMut: false;\n          isSigner: false;\n          docs: [\n            \"Vault program. The pool will deposit/withdraw liquidity from the vault.\"\n          ];\n        },\n        {\n          name: \"tokenProgram\";\n          isMut: false;\n          isSigner: false;\n          docs: [\"Token program.\"];\n        },\n        {\n          name: \"associatedTokenProgram\";\n          isMut: false;\n          isSigner: false;\n          docs: [\"Associated token program.\"];\n        },\n        {\n          name: \"systemProgram\";\n          isMut: false;\n          isSigner: false;\n          docs: [\"System program.\"];\n        }\n      ];\n      args: [\n        {\n          name: \"curveType\";\n          type: {\n            defined: \"CurveType\";\n          };\n        },\n        {\n          name: \"tokenAAmount\";\n          type: \"u64\";\n        },\n        {\n          name: \"tokenBAmount\";\n          type: \"u64\";\n        }\n      ];\n    },\n    {\n      name: \"initializePermissionlessPoolWithFeeTier\";\n      docs: [\"Initialize a new permissionless pool with customized fee tier\"];\n      accounts: [\n        {\n          name: \"pool\";\n          isMut: true;\n          isSigner: false;\n          docs: [\"Pool account (PDA address)\"];\n        },\n        {\n          name: \"lpMint\";\n          isMut: true;\n          isSigner: false;\n          docs: [\"LP token mint of the pool\"];\n        },\n        {\n          name: \"tokenAMint\";\n          isMut: false;\n          isSigner: false;\n          docs: [\"Token A mint of the pool. Eg: USDT\"];\n        },\n        {\n          name: \"tokenBMint\";\n          isMut: false;\n          isSigner: false;\n          docs: [\"Token B mint of the pool. Eg: USDC\"];\n        },\n        {\n          name: \"aVault\";\n          isMut: true;\n          isSigner: false;\n          docs: [\n            \"Vault account for token A. Token A of the pool will be deposit / withdraw from this vault account.\"\n          ];\n        },\n        {\n          name: \"bVault\";\n          isMut: true;\n          isSigner: false;\n          docs: [\n            \"Vault account for token B. Token B of the pool will be deposit / withdraw from this vault account.\"\n          ];\n        },\n        {\n          name: \"aTokenVault\";\n          isMut: true;\n          isSigner: false;\n          docs: [\"Token vault account of vault A\"];\n        },\n        {\n          name: \"bTokenVault\";\n          isMut: true;\n          isSigner: false;\n          docs: [\"Token vault account of vault B\"];\n        },\n        {\n          name: \"aVaultLpMint\";\n          isMut: true;\n          isSigner: false;\n          docs: [\"LP token mint of vault A\"];\n        },\n        {\n          name: \"bVaultLpMint\";\n          isMut: true;\n          isSigner: false;\n          docs: [\"LP token mint of vault B\"];\n        },\n        {\n          name: \"aVaultLp\";\n          isMut: true;\n          isSigner: false;\n          docs: [\n            \"LP token account of vault A. Used to receive/burn the vault LP upon deposit/withdraw from the vault.\"\n          ];\n        },\n        {\n          name: \"bVaultLp\";\n          isMut: true;\n          isSigner: false;\n          docs: [\n            \"LP token account of vault B. Used to receive/burn vault LP upon deposit/withdraw from the vault.\"\n          ];\n        },\n        {\n          name: \"payerTokenA\";\n          isMut: true;\n          isSigner: false;\n          docs: [\n            \"Payer token account for pool token A mint. Used to bootstrap the pool with initial liquidity.\"\n          ];\n        },\n        {\n          name: \"payerTokenB\";\n          isMut: true;\n          isSigner: false;\n          docs: [\n            \"Admin token account for pool token B mint. Used to bootstrap the pool with initial liquidity.\"\n          ];\n        },\n        {\n          name: \"payerPoolLp\";\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: \"protocolTokenAFee\";\n          isMut: true;\n          isSigner: false;\n          docs: [\n            \"Protocol fee token account for token A. Used to receive trading fee.\"\n          ];\n        },\n        {\n          name: \"protocolTokenBFee\";\n          isMut: true;\n          isSigner: false;\n          docs: [\n            \"Protocol fee token account for token B. Used to receive trading fee.\"\n          ];\n        },\n        {\n          name: \"payer\";\n          isMut: true;\n          isSigner: true;\n          docs: [\n            \"Admin account. This account will be the admin of the pool, and the payer for PDA during initialize pool.\"\n          ];\n        },\n        {\n          name: \"feeOwner\";\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: \"rent\";\n          isMut: false;\n          isSigner: false;\n          docs: [\"Rent account.\"];\n        },\n        {\n          name: \"mintMetadata\";\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: \"metadataProgram\";\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: \"vaultProgram\";\n          isMut: false;\n          isSigner: false;\n          docs: [\n            \"Vault program. The pool will deposit/withdraw liquidity from the vault.\"\n          ];\n        },\n        {\n          name: \"tokenProgram\";\n          isMut: false;\n          isSigner: false;\n          docs: [\"Token program.\"];\n        },\n        {\n          name: \"associatedTokenProgram\";\n          isMut: false;\n          isSigner: false;\n          docs: [\"Associated token program.\"];\n        },\n        {\n          name: \"systemProgram\";\n          isMut: false;\n          isSigner: false;\n          docs: [\"System program.\"];\n        }\n      ];\n      args: [\n        {\n          name: \"curveType\";\n          type: {\n            defined: \"CurveType\";\n          };\n        },\n        {\n          name: \"tradeFeeBps\";\n          type: \"u64\";\n        },\n        {\n          name: \"tokenAAmount\";\n          type: \"u64\";\n        },\n        {\n          name: \"tokenBAmount\";\n          type: \"u64\";\n        }\n      ];\n    },\n    {\n      name: \"enableOrDisablePool\";\n      docs: [\n        \"Enable or disable a pool. A disabled pool allow only remove balanced liquidity operation.\"\n      ];\n      accounts: [\n        {\n          name: \"pool\";\n          isMut: true;\n          isSigner: false;\n          docs: [\"Pool account (PDA)\"];\n        },\n        {\n          name: \"admin\";\n          isMut: false;\n          isSigner: true;\n          docs: [\"Admin account. Must be owner of the pool.\"];\n        }\n      ];\n      args: [\n        {\n          name: \"enable\";\n          type: \"bool\";\n        }\n      ];\n    },\n    {\n      name: \"swap\";\n      docs: [\n        \"Swap token A to B, or vice versa. An amount of trading fee will be charged for liquidity provider, and the admin of the pool.\"\n      ];\n      accounts: [\n        {\n          name: \"pool\";\n          isMut: true;\n          isSigner: false;\n          docs: [\"Pool account (PDA)\"];\n        },\n        {\n          name: \"userSourceToken\";\n          isMut: true;\n          isSigner: false;\n          docs: [\n            \"User token account. Token from this account will be transfer into the vault by the pool in exchange for another token of the pool.\"\n          ];\n        },\n        {\n          name: \"userDestinationToken\";\n          isMut: true;\n          isSigner: false;\n          docs: [\n            \"User token account. The exchanged token will be transfer into this account from the pool.\"\n          ];\n        },\n        {\n          name: \"aVault\";\n          isMut: true;\n          isSigner: false;\n          docs: [\n            \"Vault account for token a. token a of the pool will be deposit / withdraw from this vault account.\"\n          ];\n        },\n        {\n          name: \"bVault\";\n          isMut: true;\n          isSigner: false;\n          docs: [\n            \"Vault account for token b. token b of the pool will be deposit / withdraw from this vault account.\"\n          ];\n        },\n        {\n          name: \"aTokenVault\";\n          isMut: true;\n          isSigner: false;\n          docs: [\"Token vault account of vault A\"];\n        },\n        {\n          name: \"bTokenVault\";\n          isMut: true;\n          isSigner: false;\n          docs: [\"Token vault account of vault B\"];\n        },\n        {\n          name: \"aVaultLpMint\";\n          isMut: true;\n          isSigner: false;\n          docs: [\"Lp token mint of vault a\"];\n        },\n        {\n          name: \"bVaultLpMint\";\n          isMut: true;\n          isSigner: false;\n          docs: [\"Lp token mint of vault b\"];\n        },\n        {\n          name: \"aVaultLp\";\n          isMut: true;\n          isSigner: false;\n          docs: [\n            \"LP token account of vault A. Used to receive/burn the vault LP upon deposit/withdraw from the vault.\"\n          ];\n        },\n        {\n          name: \"bVaultLp\";\n          isMut: true;\n          isSigner: false;\n          docs: [\n            \"LP token account of vault B. Used to receive/burn the vault LP upon deposit/withdraw from the vault.\"\n          ];\n        },\n        {\n          name: \"protocolTokenFee\";\n          isMut: true;\n          isSigner: false;\n          docs: [\n            \"Protocol fee token account. Used to receive trading fee. It's mint field must matched with user_source_token mint field.\"\n          ];\n        },\n        {\n          name: \"user\";\n          isMut: false;\n          isSigner: true;\n          docs: [\"User account. Must be owner of user_source_token.\"];\n        },\n        {\n          name: \"vaultProgram\";\n          isMut: false;\n          isSigner: false;\n          docs: [\n            \"Vault program. the pool will deposit/withdraw liquidity from the vault.\"\n          ];\n        },\n        {\n          name: \"tokenProgram\";\n          isMut: false;\n          isSigner: false;\n          docs: [\"Token program.\"];\n        }\n      ];\n      args: [\n        {\n          name: \"inAmount\";\n          type: \"u64\";\n        },\n        {\n          name: \"minimumOutAmount\";\n          type: \"u64\";\n        }\n      ];\n    },\n    {\n      name: \"removeLiquiditySingleSide\";\n      docs: [\n        \"Withdraw only single token from the pool. Only supported by pool with stable swap curve.\"\n      ];\n      accounts: [\n        {\n          name: \"pool\";\n          isMut: true;\n          isSigner: false;\n          docs: [\"Pool account (PDA)\"];\n        },\n        {\n          name: \"lpMint\";\n          isMut: true;\n          isSigner: false;\n          docs: [\"LP token mint of the pool\"];\n        },\n        {\n          name: \"userPoolLp\";\n          isMut: true;\n          isSigner: false;\n          docs: [\n            \"User pool lp token account. LP will be burned from this account upon success liquidity removal.\"\n          ];\n        },\n        {\n          name: \"aVaultLp\";\n          isMut: true;\n          isSigner: false;\n          docs: [\n            \"LP token account of vault A. Used to receive/burn the vault LP upon deposit/withdraw from the vault.\"\n          ];\n        },\n        {\n          name: \"bVaultLp\";\n          isMut: true;\n          isSigner: false;\n          docs: [\n            \"LP token account of vault B. Used to receive/burn the vault LP upon deposit/withdraw from the vault.\"\n          ];\n        },\n        {\n          name: \"aVault\";\n          isMut: true;\n          isSigner: false;\n          docs: [\n            \"Vault account for token A. Token A of the pool will be deposit / withdraw from this vault account.\"\n          ];\n        },\n        {\n          name: \"bVault\";\n          isMut: true;\n          isSigner: false;\n          docs: [\n            \"Vault account for token B. Token B of the pool will be deposit / withdraw from this vault account.\"\n          ];\n        },\n        {\n          name: \"aVaultLpMint\";\n          isMut: true;\n          isSigner: false;\n          docs: [\"LP token mint of vault A\"];\n        },\n        {\n          name: \"bVaultLpMint\";\n          isMut: true;\n          isSigner: false;\n          docs: [\"LP token mint of vault B\"];\n        },\n        {\n          name: \"aTokenVault\";\n          isMut: true;\n          isSigner: false;\n          docs: [\"Token vault account of vault A\"];\n        },\n        {\n          name: \"bTokenVault\";\n          isMut: true;\n          isSigner: false;\n          docs: [\"Token vault account of vault B\"];\n        },\n        {\n          name: \"userDestinationToken\";\n          isMut: true;\n          isSigner: false;\n          docs: [\n            \"User token account to receive token upon success liquidity removal.\"\n          ];\n        },\n        {\n          name: \"user\";\n          isMut: false;\n          isSigner: true;\n          docs: [\"User account. Must be owner of the user_pool_lp account.\"];\n        },\n        {\n          name: \"vaultProgram\";\n          isMut: false;\n          isSigner: false;\n          docs: [\n            \"Vault program. The pool will deposit/withdraw liquidity from the vault.\"\n          ];\n        },\n        {\n          name: \"tokenProgram\";\n          isMut: false;\n          isSigner: false;\n          docs: [\"Token program.\"];\n        }\n      ];\n      args: [\n        {\n          name: \"poolTokenAmount\";\n          type: \"u64\";\n        },\n        {\n          name: \"minimumOutAmount\";\n          type: \"u64\";\n        }\n      ];\n    },\n    {\n      name: \"addImbalanceLiquidity\";\n      docs: [\n        \"Deposit tokens to the pool in an imbalance ratio. Only supported by pool with stable swap curve.\"\n      ];\n      accounts: [\n        {\n          name: \"pool\";\n          isMut: true;\n          isSigner: false;\n          docs: [\"Pool account (PDA)\"];\n        },\n        {\n          name: \"lpMint\";\n          isMut: true;\n          isSigner: false;\n          docs: [\"LP token mint of the pool\"];\n        },\n        {\n          name: \"userPoolLp\";\n          isMut: true;\n          isSigner: false;\n          docs: [\n            \"user pool lp token account. lp will be burned from this account upon success liquidity removal.\"\n          ];\n        },\n        {\n          name: \"aVaultLp\";\n          isMut: true;\n          isSigner: false;\n          docs: [\n            \"LP token account of vault A. Used to receive/burn the vault LP upon deposit/withdraw from the vault.\"\n          ];\n        },\n        {\n          name: \"bVaultLp\";\n          isMut: true;\n          isSigner: false;\n          docs: [\n            \"LP token account of vault B. Used to receive/burn the vault LP upon deposit/withdraw from the vault.\"\n          ];\n        },\n        {\n          name: \"aVault\";\n          isMut: true;\n          isSigner: false;\n          docs: [\n            \"Vault account for token a. token a of the pool will be deposit / withdraw from this vault account.\"\n          ];\n        },\n        {\n          name: \"bVault\";\n          isMut: true;\n          isSigner: false;\n          docs: [\n            \"Vault account for token b. token b of the pool will be deposit / withdraw from this vault account.\"\n          ];\n        },\n        {\n          name: \"aVaultLpMint\";\n          isMut: true;\n          isSigner: false;\n          docs: [\"LP token mint of vault a\"];\n        },\n        {\n          name: \"bVaultLpMint\";\n          isMut: true;\n          isSigner: false;\n          docs: [\"LP token mint of vault b\"];\n        },\n        {\n          name: \"aTokenVault\";\n          isMut: true;\n          isSigner: false;\n          docs: [\"Token vault account of vault A\"];\n        },\n        {\n          name: \"bTokenVault\";\n          isMut: true;\n          isSigner: false;\n          docs: [\"Token vault account of vault B\"];\n        },\n        {\n          name: \"userAToken\";\n          isMut: true;\n          isSigner: false;\n          docs: [\n            \"User token A account. Token will be transfer from this account if it is add liquidity operation. Else, token will be transfer into this account.\"\n          ];\n        },\n        {\n          name: \"userBToken\";\n          isMut: true;\n          isSigner: false;\n          docs: [\n            \"User token B account. Token will be transfer from this account if it is add liquidity operation. Else, token will be transfer into this account.\"\n          ];\n        },\n        {\n          name: \"user\";\n          isMut: false;\n          isSigner: true;\n          docs: [\n            \"User account. Must be owner of user_a_token, and user_b_token.\"\n          ];\n        },\n        {\n          name: \"vaultProgram\";\n          isMut: false;\n          isSigner: false;\n          docs: [\n            \"Vault program. the pool will deposit/withdraw liquidity from the vault.\"\n          ];\n        },\n        {\n          name: \"tokenProgram\";\n          isMut: false;\n          isSigner: false;\n          docs: [\"Token program.\"];\n        }\n      ];\n      args: [\n        {\n          name: \"minimumPoolTokenAmount\";\n          type: \"u64\";\n        },\n        {\n          name: \"tokenAAmount\";\n          type: \"u64\";\n        },\n        {\n          name: \"tokenBAmount\";\n          type: \"u64\";\n        }\n      ];\n    },\n    {\n      name: \"removeBalanceLiquidity\";\n      docs: [\n        \"Withdraw tokens from the pool in a balanced ratio. User will still able to withdraw from pool even the pool is disabled. This allow user to exit their liquidity when there's some unforeseen event happen.\"\n      ];\n      accounts: [\n        {\n          name: \"pool\";\n          isMut: true;\n          isSigner: false;\n          docs: [\"Pool account (PDA)\"];\n        },\n        {\n          name: \"lpMint\";\n          isMut: true;\n          isSigner: false;\n          docs: [\"LP token mint of the pool\"];\n        },\n        {\n          name: \"userPoolLp\";\n          isMut: true;\n          isSigner: false;\n          docs: [\n            \"user pool lp token account. lp will be burned from this account upon success liquidity removal.\"\n          ];\n        },\n        {\n          name: \"aVaultLp\";\n          isMut: true;\n          isSigner: false;\n          docs: [\n            \"LP token account of vault A. Used to receive/burn the vault LP upon deposit/withdraw from the vault.\"\n          ];\n        },\n        {\n          name: \"bVaultLp\";\n          isMut: true;\n          isSigner: false;\n          docs: [\n            \"LP token account of vault B. Used to receive/burn the vault LP upon deposit/withdraw from the vault.\"\n          ];\n        },\n        {\n          name: \"aVault\";\n          isMut: true;\n          isSigner: false;\n          docs: [\n            \"Vault account for token a. token a of the pool will be deposit / withdraw from this vault account.\"\n          ];\n        },\n        {\n          name: \"bVault\";\n          isMut: true;\n          isSigner: false;\n          docs: [\n            \"Vault account for token b. token b of the pool will be deposit / withdraw from this vault account.\"\n          ];\n        },\n        {\n          name: \"aVaultLpMint\";\n          isMut: true;\n          isSigner: false;\n          docs: [\"LP token mint of vault a\"];\n        },\n        {\n          name: \"bVaultLpMint\";\n          isMut: true;\n          isSigner: false;\n          docs: [\"LP token mint of vault b\"];\n        },\n        {\n          name: \"aTokenVault\";\n          isMut: true;\n          isSigner: false;\n          docs: [\"Token vault account of vault A\"];\n        },\n        {\n          name: \"bTokenVault\";\n          isMut: true;\n          isSigner: false;\n          docs: [\"Token vault account of vault B\"];\n        },\n        {\n          name: \"userAToken\";\n          isMut: true;\n          isSigner: false;\n          docs: [\n            \"User token A account. Token will be transfer from this account if it is add liquidity operation. Else, token will be transfer into this account.\"\n          ];\n        },\n        {\n          name: \"userBToken\";\n          isMut: true;\n          isSigner: false;\n          docs: [\n            \"User token B account. Token will be transfer from this account if it is add liquidity operation. Else, token will be transfer into this account.\"\n          ];\n        },\n        {\n          name: \"user\";\n          isMut: false;\n          isSigner: true;\n          docs: [\n            \"User account. Must be owner of user_a_token, and user_b_token.\"\n          ];\n        },\n        {\n          name: \"vaultProgram\";\n          isMut: false;\n          isSigner: false;\n          docs: [\n            \"Vault program. the pool will deposit/withdraw liquidity from the vault.\"\n          ];\n        },\n        {\n          name: \"tokenProgram\";\n          isMut: false;\n          isSigner: false;\n          docs: [\"Token program.\"];\n        }\n      ];\n      args: [\n        {\n          name: \"poolTokenAmount\";\n          type: \"u64\";\n        },\n        {\n          name: \"minimumATokenOut\";\n          type: \"u64\";\n        },\n        {\n          name: \"minimumBTokenOut\";\n          type: \"u64\";\n        }\n      ];\n    },\n    {\n      name: \"addBalanceLiquidity\";\n      docs: [\"Deposit tokens to the pool in a balanced ratio.\"];\n      accounts: [\n        {\n          name: \"pool\";\n          isMut: true;\n          isSigner: false;\n          docs: [\"Pool account (PDA)\"];\n        },\n        {\n          name: \"lpMint\";\n          isMut: true;\n          isSigner: false;\n          docs: [\"LP token mint of the pool\"];\n        },\n        {\n          name: \"userPoolLp\";\n          isMut: true;\n          isSigner: false;\n          docs: [\n            \"user pool lp token account. lp will be burned from this account upon success liquidity removal.\"\n          ];\n        },\n        {\n          name: \"aVaultLp\";\n          isMut: true;\n          isSigner: false;\n          docs: [\n            \"LP token account of vault A. Used to receive/burn the vault LP upon deposit/withdraw from the vault.\"\n          ];\n        },\n        {\n          name: \"bVaultLp\";\n          isMut: true;\n          isSigner: false;\n          docs: [\n            \"LP token account of vault B. Used to receive/burn the vault LP upon deposit/withdraw from the vault.\"\n          ];\n        },\n        {\n          name: \"aVault\";\n          isMut: true;\n          isSigner: false;\n          docs: [\n            \"Vault account for token a. token a of the pool will be deposit / withdraw from this vault account.\"\n          ];\n        },\n        {\n          name: \"bVault\";\n          isMut: true;\n          isSigner: false;\n          docs: [\n            \"Vault account for token b. token b of the pool will be deposit / withdraw from this vault account.\"\n          ];\n        },\n        {\n          name: \"aVaultLpMint\";\n          isMut: true;\n          isSigner: false;\n          docs: [\"LP token mint of vault a\"];\n        },\n        {\n          name: \"bVaultLpMint\";\n          isMut: true;\n          isSigner: false;\n          docs: [\"LP token mint of vault b\"];\n        },\n        {\n          name: \"aTokenVault\";\n          isMut: true;\n          isSigner: false;\n          docs: [\"Token vault account of vault A\"];\n        },\n        {\n          name: \"bTokenVault\";\n          isMut: true;\n          isSigner: false;\n          docs: [\"Token vault account of vault B\"];\n        },\n        {\n          name: \"userAToken\";\n          isMut: true;\n          isSigner: false;\n          docs: [\n            \"User token A account. Token will be transfer from this account if it is add liquidity operation. Else, token will be transfer into this account.\"\n          ];\n        },\n        {\n          name: \"userBToken\";\n          isMut: true;\n          isSigner: false;\n          docs: [\n            \"User token B account. Token will be transfer from this account if it is add liquidity operation. Else, token will be transfer into this account.\"\n          ];\n        },\n        {\n          name: \"user\";\n          isMut: false;\n          isSigner: true;\n          docs: [\n            \"User account. Must be owner of user_a_token, and user_b_token.\"\n          ];\n        },\n        {\n          name: \"vaultProgram\";\n          isMut: false;\n          isSigner: false;\n          docs: [\n            \"Vault program. the pool will deposit/withdraw liquidity from the vault.\"\n          ];\n        },\n        {\n          name: \"tokenProgram\";\n          isMut: false;\n          isSigner: false;\n          docs: [\"Token program.\"];\n        }\n      ];\n      args: [\n        {\n          name: \"poolTokenAmount\";\n          type: \"u64\";\n        },\n        {\n          name: \"maximumTokenAAmount\";\n          type: \"u64\";\n        },\n        {\n          name: \"maximumTokenBAmount\";\n          type: \"u64\";\n        }\n      ];\n    },\n    {\n      name: \"setPoolFees\";\n      docs: [\"Update trading fee charged for liquidity provider, and admin.\"];\n      accounts: [\n        {\n          name: \"pool\";\n          isMut: true;\n          isSigner: false;\n          docs: [\"Pool account (PDA)\"];\n        },\n        {\n          name: \"feeOperator\";\n          isMut: false;\n          isSigner: true;\n          docs: [\"Fee operator account\"];\n        }\n      ];\n      args: [\n        {\n          name: \"fees\";\n          type: {\n            defined: \"PoolFees\";\n          };\n        }\n      ];\n    },\n    {\n      name: \"overrideCurveParam\";\n      docs: [\n        \"Update swap curve parameters. This function do not allow update of curve type. For example: stable swap curve to constant product curve. Only supported by pool with stable swap curve.\",\n        \"Only amp is allowed to be override. The other attributes of stable swap curve will be ignored.\"\n      ];\n      accounts: [\n        {\n          name: \"pool\";\n          isMut: true;\n          isSigner: false;\n          docs: [\"Pool account (PDA)\"];\n        },\n        {\n          name: \"admin\";\n          isMut: false;\n          isSigner: true;\n          docs: [\"Admin account.\"];\n        }\n      ];\n      args: [\n        {\n          name: \"curveType\";\n          type: {\n            defined: \"CurveType\";\n          };\n        }\n      ];\n    },\n    {\n      name: \"getPoolInfo\";\n      docs: [\"Get the general information of the pool.\"];\n      accounts: [\n        {\n          name: \"pool\";\n          isMut: false;\n          isSigner: false;\n          docs: [\"Pool account (PDA)\"];\n        },\n        {\n          name: \"lpMint\";\n          isMut: false;\n          isSigner: false;\n          docs: [\"LP token mint of the pool\"];\n        },\n        {\n          name: \"aVaultLp\";\n          isMut: false;\n          isSigner: false;\n          docs: [\n            \"LP token account of vault A. Used to receive/burn the vault LP upon deposit/withdraw from the vault.\"\n          ];\n        },\n        {\n          name: \"bVaultLp\";\n          isMut: false;\n          isSigner: false;\n          docs: [\n            \"LP token account of vault B. Used to receive/burn the vault LP upon deposit/withdraw from the vault.\"\n          ];\n        },\n        {\n          name: \"aVault\";\n          isMut: false;\n          isSigner: false;\n          docs: [\n            \"Vault account for token a. token a of the pool will be deposit / withdraw from this vault account.\"\n          ];\n        },\n        {\n          name: \"bVault\";\n          isMut: false;\n          isSigner: false;\n          docs: [\n            \"Vault account for token b. token b of the pool will be deposit / withdraw from this vault account.\"\n          ];\n        },\n        {\n          name: \"aVaultLpMint\";\n          isMut: false;\n          isSigner: false;\n          docs: [\"LP token mint of vault a\"];\n        },\n        {\n          name: \"bVaultLpMint\";\n          isMut: false;\n          isSigner: false;\n          docs: [\"LP token mint of vault b\"];\n        }\n      ];\n      args: [];\n    },\n    {\n      name: \"bootstrapLiquidity\";\n      docs: [\"Bootstrap the pool when liquidity is depleted.\"];\n      accounts: [\n        {\n          name: \"pool\";\n          isMut: true;\n          isSigner: false;\n          docs: [\"Pool account (PDA)\"];\n        },\n        {\n          name: \"lpMint\";\n          isMut: true;\n          isSigner: false;\n          docs: [\"LP token mint of the pool\"];\n        },\n        {\n          name: \"userPoolLp\";\n          isMut: true;\n          isSigner: false;\n          docs: [\n            \"user pool lp token account. lp will be burned from this account upon success liquidity removal.\"\n          ];\n        },\n        {\n          name: \"aVaultLp\";\n          isMut: true;\n          isSigner: false;\n          docs: [\n            \"LP token account of vault A. Used to receive/burn the vault LP upon deposit/withdraw from the vault.\"\n          ];\n        },\n        {\n          name: \"bVaultLp\";\n          isMut: true;\n          isSigner: false;\n          docs: [\n            \"LP token account of vault B. Used to receive/burn the vault LP upon deposit/withdraw from the vault.\"\n          ];\n        },\n        {\n          name: \"aVault\";\n          isMut: true;\n          isSigner: false;\n          docs: [\n            \"Vault account for token a. token a of the pool will be deposit / withdraw from this vault account.\"\n          ];\n        },\n        {\n          name: \"bVault\";\n          isMut: true;\n          isSigner: false;\n          docs: [\n            \"Vault account for token b. token b of the pool will be deposit / withdraw from this vault account.\"\n          ];\n        },\n        {\n          name: \"aVaultLpMint\";\n          isMut: true;\n          isSigner: false;\n          docs: [\"LP token mint of vault a\"];\n        },\n        {\n          name: \"bVaultLpMint\";\n          isMut: true;\n          isSigner: false;\n          docs: [\"LP token mint of vault b\"];\n        },\n        {\n          name: \"aTokenVault\";\n          isMut: true;\n          isSigner: false;\n          docs: [\"Token vault account of vault A\"];\n        },\n        {\n          name: \"bTokenVault\";\n          isMut: true;\n          isSigner: false;\n          docs: [\"Token vault account of vault B\"];\n        },\n        {\n          name: \"userAToken\";\n          isMut: true;\n          isSigner: false;\n          docs: [\n            \"User token A account. Token will be transfer from this account if it is add liquidity operation. Else, token will be transfer into this account.\"\n          ];\n        },\n        {\n          name: \"userBToken\";\n          isMut: true;\n          isSigner: false;\n          docs: [\n            \"User token B account. Token will be transfer from this account if it is add liquidity operation. Else, token will be transfer into this account.\"\n          ];\n        },\n        {\n          name: \"user\";\n          isMut: false;\n          isSigner: true;\n          docs: [\n            \"User account. Must be owner of user_a_token, and user_b_token.\"\n          ];\n        },\n        {\n          name: \"vaultProgram\";\n          isMut: false;\n          isSigner: false;\n          docs: [\n            \"Vault program. the pool will deposit/withdraw liquidity from the vault.\"\n          ];\n        },\n        {\n          name: \"tokenProgram\";\n          isMut: false;\n          isSigner: false;\n          docs: [\"Token program.\"];\n        }\n      ];\n      args: [\n        {\n          name: \"tokenAAmount\";\n          type: \"u64\";\n        },\n        {\n          name: \"tokenBAmount\";\n          type: \"u64\";\n        }\n      ];\n    },\n    {\n      name: \"createMintMetadata\";\n      docs: [\"Create mint metadata account for old pools\"];\n      accounts: [\n        {\n          name: \"pool\";\n          isMut: false;\n          isSigner: false;\n          docs: [\"Pool account\"];\n        },\n        {\n          name: \"lpMint\";\n          isMut: false;\n          isSigner: false;\n          docs: [\"LP mint account of the pool\"];\n        },\n        {\n          name: \"aVaultLp\";\n          isMut: false;\n          isSigner: false;\n          docs: [\"Vault A LP account of the pool\"];\n        },\n        {\n          name: \"mintMetadata\";\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: \"metadataProgram\";\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: \"systemProgram\";\n          isMut: false;\n          isSigner: false;\n          docs: [\"System program.\"];\n        },\n        {\n          name: \"payer\";\n          isMut: true;\n          isSigner: true;\n          docs: [\"Payer\"];\n        }\n      ];\n      args: [];\n    },\n    {\n      name: \"createLockEscrow\";\n      docs: [\"Create lock account\"];\n      accounts: [\n        {\n          name: \"pool\";\n          isMut: false;\n          isSigner: false;\n          docs: [\"Pool account\"];\n        },\n        {\n          name: \"lockEscrow\";\n          isMut: true;\n          isSigner: false;\n          docs: [\"Lock account\"];\n        },\n        {\n          name: \"owner\";\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: \"lpMint\";\n          isMut: false;\n          isSigner: false;\n          docs: [\"LP token mint of the pool\"];\n        },\n        {\n          name: \"payer\";\n          isMut: true;\n          isSigner: true;\n          docs: [\"Payer account\"];\n        },\n        {\n          name: \"systemProgram\";\n          isMut: false;\n          isSigner: false;\n          docs: [\"System program.\"];\n        }\n      ];\n      args: [];\n    },\n    {\n      name: \"lock\";\n      docs: [\"Lock Lp token\"];\n      accounts: [\n        {\n          name: \"pool\";\n          isMut: true;\n          isSigner: false;\n          docs: [\"Pool account\"];\n        },\n        {\n          name: \"lpMint\";\n          isMut: false;\n          isSigner: false;\n          docs: [\"LP token mint of the pool\"];\n        },\n        {\n          name: \"lockEscrow\";\n          isMut: true;\n          isSigner: false;\n          docs: [\"Lock account\"];\n        },\n        {\n          name: \"owner\";\n          isMut: true;\n          isSigner: true;\n          docs: [\"Can be anyone\"];\n        },\n        {\n          name: \"sourceTokens\";\n          isMut: true;\n          isSigner: false;\n          docs: [\"owner lp token account\"];\n        },\n        {\n          name: \"escrowVault\";\n          isMut: true;\n          isSigner: false;\n          docs: [\"Escrow vault\"];\n        },\n        {\n          name: \"tokenProgram\";\n          isMut: false;\n          isSigner: false;\n          docs: [\"Token program.\"];\n        },\n        {\n          name: \"aVault\";\n          isMut: false;\n          isSigner: false;\n          docs: [\n            \"Vault account for token a. token a of the pool will be deposit / withdraw from this vault account.\"\n          ];\n        },\n        {\n          name: \"bVault\";\n          isMut: false;\n          isSigner: false;\n          docs: [\n            \"Vault account for token b. token b of the pool will be deposit / withdraw from this vault account.\"\n          ];\n        },\n        {\n          name: \"aVaultLp\";\n          isMut: false;\n          isSigner: false;\n          docs: [\n            \"LP token account of vault A. Used to receive/burn the vault LP upon deposit/withdraw from the vault.\"\n          ];\n        },\n        {\n          name: \"bVaultLp\";\n          isMut: false;\n          isSigner: false;\n          docs: [\n            \"LP token account of vault B. Used to receive/burn the vault LP upon deposit/withdraw from the vault.\"\n          ];\n        },\n        {\n          name: \"aVaultLpMint\";\n          isMut: false;\n          isSigner: false;\n          docs: [\"LP token mint of vault a\"];\n        },\n        {\n          name: \"bVaultLpMint\";\n          isMut: false;\n          isSigner: false;\n          docs: [\"LP token mint of vault b\"];\n        }\n      ];\n      args: [\n        {\n          name: \"maxAmount\";\n          type: \"u64\";\n        }\n      ];\n    },\n    {\n      name: \"claimFee\";\n      docs: [\"Claim fee\"];\n      accounts: [\n        {\n          name: \"pool\";\n          isMut: true;\n          isSigner: false;\n          docs: [\"Pool account\"];\n        },\n        {\n          name: \"lpMint\";\n          isMut: true;\n          isSigner: false;\n          docs: [\"LP token mint of the pool\"];\n        },\n        {\n          name: \"lockEscrow\";\n          isMut: true;\n          isSigner: false;\n          docs: [\"Lock account\"];\n        },\n        {\n          name: \"owner\";\n          isMut: true;\n          isSigner: true;\n          docs: [\"Owner of lock account\"];\n        },\n        {\n          name: \"sourceTokens\";\n          isMut: true;\n          isSigner: false;\n          docs: [\"owner lp token account\"];\n        },\n        {\n          name: \"escrowVault\";\n          isMut: true;\n          isSigner: false;\n          docs: [\"Escrow vault\"];\n        },\n        {\n          name: \"tokenProgram\";\n          isMut: false;\n          isSigner: false;\n          docs: [\"Token program.\"];\n        },\n        {\n          name: \"aTokenVault\";\n          isMut: true;\n          isSigner: false;\n          docs: [\"Token vault account of vault A\"];\n        },\n        {\n          name: \"bTokenVault\";\n          isMut: true;\n          isSigner: false;\n          docs: [\"Token vault account of vault B\"];\n        },\n        {\n          name: \"aVault\";\n          isMut: true;\n          isSigner: false;\n          docs: [\n            \"Vault account for token a. token a of the pool will be deposit / withdraw from this vault account.\"\n          ];\n        },\n        {\n          name: \"bVault\";\n          isMut: true;\n          isSigner: false;\n          docs: [\n            \"Vault account for token b. token b of the pool will be deposit / withdraw from this vault account.\"\n          ];\n        },\n        {\n          name: \"aVaultLp\";\n          isMut: true;\n          isSigner: false;\n          docs: [\n            \"LP token account of vault A. Used to receive/burn the vault LP upon deposit/withdraw from the vault.\"\n          ];\n        },\n        {\n          name: \"bVaultLp\";\n          isMut: true;\n          isSigner: false;\n          docs: [\n            \"LP token account of vault B. Used to receive/burn the vault LP upon deposit/withdraw from the vault.\"\n          ];\n        },\n        {\n          name: \"aVaultLpMint\";\n          isMut: true;\n          isSigner: false;\n          docs: [\"LP token mint of vault a\"];\n        },\n        {\n          name: \"bVaultLpMint\";\n          isMut: true;\n          isSigner: false;\n          docs: [\"LP token mint of vault b\"];\n        },\n        {\n          name: \"userAToken\";\n          isMut: true;\n          isSigner: false;\n          docs: [\n            \"User token A account. Token will be transfer from this account if it is add liquidity operation. Else, token will be transfer into this account.\"\n          ];\n        },\n        {\n          name: \"userBToken\";\n          isMut: true;\n          isSigner: false;\n          docs: [\n            \"User token B account. Token will be transfer from this account if it is add liquidity operation. Else, token will be transfer into this account.\"\n          ];\n        },\n        {\n          name: \"vaultProgram\";\n          isMut: false;\n          isSigner: false;\n          docs: [\n            \"Vault program. the pool will deposit/withdraw liquidity from the vault.\"\n          ];\n        }\n      ];\n      args: [\n        {\n          name: \"maxAmount\";\n          type: \"u64\";\n        }\n      ];\n    },\n    {\n      name: \"createConfig\";\n      docs: [\"Create config\"];\n      accounts: [\n        {\n          name: \"config\";\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: \"admin\";\n          isMut: true;\n          isSigner: true;\n        },\n        {\n          name: \"systemProgram\";\n          isMut: false;\n          isSigner: false;\n        }\n      ];\n      args: [\n        {\n          name: \"configParameters\";\n          type: {\n            defined: \"ConfigParameters\";\n          };\n        }\n      ];\n    },\n    {\n      name: \"closeConfig\";\n      docs: [\"Close config\"];\n      accounts: [\n        {\n          name: \"config\";\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: \"admin\";\n          isMut: true;\n          isSigner: true;\n        },\n        {\n          name: \"rentReceiver\";\n          isMut: true;\n          isSigner: false;\n        }\n      ];\n      args: [];\n    },\n    {\n      name: \"initializePermissionlessConstantProductPoolWithConfig\";\n      docs: [\"Initialize permissionless pool with config\"];\n      accounts: [\n        {\n          name: \"pool\";\n          isMut: true;\n          isSigner: false;\n          docs: [\"Pool account (PDA address)\"];\n        },\n        {\n          name: \"config\";\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: \"lpMint\";\n          isMut: true;\n          isSigner: false;\n          docs: [\"LP token mint of the pool\"];\n        },\n        {\n          name: \"tokenAMint\";\n          isMut: false;\n          isSigner: false;\n          docs: [\"Token A mint of the pool. Eg: USDT\"];\n        },\n        {\n          name: \"tokenBMint\";\n          isMut: false;\n          isSigner: false;\n          docs: [\"Token B mint of the pool. Eg: USDC\"];\n        },\n        {\n          name: \"aVault\";\n          isMut: true;\n          isSigner: false;\n          docs: [\n            \"Vault account for token A. Token A of the pool will be deposit / withdraw from this vault account.\"\n          ];\n        },\n        {\n          name: \"bVault\";\n          isMut: true;\n          isSigner: false;\n          docs: [\n            \"Vault account for token B. Token B of the pool will be deposit / withdraw from this vault account.\"\n          ];\n        },\n        {\n          name: \"aTokenVault\";\n          isMut: true;\n          isSigner: false;\n          docs: [\"Token vault account of vault A\"];\n        },\n        {\n          name: \"bTokenVault\";\n          isMut: true;\n          isSigner: false;\n          docs: [\"Token vault account of vault B\"];\n        },\n        {\n          name: \"aVaultLpMint\";\n          isMut: true;\n          isSigner: false;\n          docs: [\"LP token mint of vault A\"];\n        },\n        {\n          name: \"bVaultLpMint\";\n          isMut: true;\n          isSigner: false;\n          docs: [\"LP token mint of vault B\"];\n        },\n        {\n          name: \"aVaultLp\";\n          isMut: true;\n          isSigner: false;\n          docs: [\n            \"LP token account of vault A. Used to receive/burn the vault LP upon deposit/withdraw from the vault.\"\n          ];\n        },\n        {\n          name: \"bVaultLp\";\n          isMut: true;\n          isSigner: false;\n          docs: [\n            \"LP token account of vault B. Used to receive/burn vault LP upon deposit/withdraw from the vault.\"\n          ];\n        },\n        {\n          name: \"payerTokenA\";\n          isMut: true;\n          isSigner: false;\n          docs: [\n            \"Payer token account for pool token A mint. Used to bootstrap the pool with initial liquidity.\"\n          ];\n        },\n        {\n          name: \"payerTokenB\";\n          isMut: true;\n          isSigner: false;\n          docs: [\n            \"Admin token account for pool token B mint. Used to bootstrap the pool with initial liquidity.\"\n          ];\n        },\n        {\n          name: \"payerPoolLp\";\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: \"protocolTokenAFee\";\n          isMut: true;\n          isSigner: false;\n          docs: [\n            \"Protocol fee token account for token A. Used to receive trading fee.\"\n          ];\n        },\n        {\n          name: \"protocolTokenBFee\";\n          isMut: true;\n          isSigner: false;\n          docs: [\n            \"Protocol fee token account for token B. Used to receive trading fee.\"\n          ];\n        },\n        {\n          name: \"payer\";\n          isMut: true;\n          isSigner: true;\n          docs: [\n            \"Admin account. This account will be the admin of the pool, and the payer for PDA during initialize pool.\"\n          ];\n        },\n        {\n          name: \"rent\";\n          isMut: false;\n          isSigner: false;\n          docs: [\"Rent account.\"];\n        },\n        {\n          name: \"mintMetadata\";\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: \"metadataProgram\";\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: \"vaultProgram\";\n          isMut: false;\n          isSigner: false;\n          docs: [\n            \"Vault program. The pool will deposit/withdraw liquidity from the vault.\"\n          ];\n        },\n        {\n          name: \"tokenProgram\";\n          isMut: false;\n          isSigner: false;\n          docs: [\"Token program.\"];\n        },\n        {\n          name: \"associatedTokenProgram\";\n          isMut: false;\n          isSigner: false;\n          docs: [\"Associated token program.\"];\n        },\n        {\n          name: \"systemProgram\";\n          isMut: false;\n          isSigner: false;\n          docs: [\"System program.\"];\n        }\n      ];\n      args: [\n        {\n          name: \"tokenAAmount\";\n          type: \"u64\";\n        },\n        {\n          name: \"tokenBAmount\";\n          type: \"u64\";\n        }\n      ];\n    },\n    {\n      name: \"initializePermissionlessConstantProductPoolWithConfig2\";\n      docs: [\"Initialize permissionless pool with config 2\"];\n      accounts: [\n        {\n          name: \"pool\";\n          isMut: true;\n          isSigner: false;\n          docs: [\"Pool account (PDA address)\"];\n        },\n        {\n          name: \"config\";\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: \"lpMint\";\n          isMut: true;\n          isSigner: false;\n          docs: [\"LP token mint of the pool\"];\n        },\n        {\n          name: \"tokenAMint\";\n          isMut: false;\n          isSigner: false;\n          docs: [\"Token A mint of the pool. Eg: USDT\"];\n        },\n        {\n          name: \"tokenBMint\";\n          isMut: false;\n          isSigner: false;\n          docs: [\"Token B mint of the pool. Eg: USDC\"];\n        },\n        {\n          name: \"aVault\";\n          isMut: true;\n          isSigner: false;\n          docs: [\n            \"Vault account for token A. Token A of the pool will be deposit / withdraw from this vault account.\"\n          ];\n        },\n        {\n          name: \"bVault\";\n          isMut: true;\n          isSigner: false;\n          docs: [\n            \"Vault account for token B. Token B of the pool will be deposit / withdraw from this vault account.\"\n          ];\n        },\n        {\n          name: \"aTokenVault\";\n          isMut: true;\n          isSigner: false;\n          docs: [\"Token vault account of vault A\"];\n        },\n        {\n          name: \"bTokenVault\";\n          isMut: true;\n          isSigner: false;\n          docs: [\"Token vault account of vault B\"];\n        },\n        {\n          name: \"aVaultLpMint\";\n          isMut: true;\n          isSigner: false;\n          docs: [\"LP token mint of vault A\"];\n        },\n        {\n          name: \"bVaultLpMint\";\n          isMut: true;\n          isSigner: false;\n          docs: [\"LP token mint of vault B\"];\n        },\n        {\n          name: \"aVaultLp\";\n          isMut: true;\n          isSigner: false;\n          docs: [\n            \"LP token account of vault A. Used to receive/burn the vault LP upon deposit/withdraw from the vault.\"\n          ];\n        },\n        {\n          name: \"bVaultLp\";\n          isMut: true;\n          isSigner: false;\n          docs: [\n            \"LP token account of vault B. Used to receive/burn vault LP upon deposit/withdraw from the vault.\"\n          ];\n        },\n        {\n          name: \"payerTokenA\";\n          isMut: true;\n          isSigner: false;\n          docs: [\n            \"Payer token account for pool token A mint. Used to bootstrap the pool with initial liquidity.\"\n          ];\n        },\n        {\n          name: \"payerTokenB\";\n          isMut: true;\n          isSigner: false;\n          docs: [\n            \"Admin token account for pool token B mint. Used to bootstrap the pool with initial liquidity.\"\n          ];\n        },\n        {\n          name: \"payerPoolLp\";\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: \"protocolTokenAFee\";\n          isMut: true;\n          isSigner: false;\n          docs: [\n            \"Protocol fee token account for token A. Used to receive trading fee.\"\n          ];\n        },\n        {\n          name: \"protocolTokenBFee\";\n          isMut: true;\n          isSigner: false;\n          docs: [\n            \"Protocol fee token account for token B. Used to receive trading fee.\"\n          ];\n        },\n        {\n          name: \"payer\";\n          isMut: true;\n          isSigner: true;\n          docs: [\n            \"Admin account. This account will be the admin of the pool, and the payer for PDA during initialize pool.\"\n          ];\n        },\n        {\n          name: \"rent\";\n          isMut: false;\n          isSigner: false;\n          docs: [\"Rent account.\"];\n        },\n        {\n          name: \"mintMetadata\";\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: \"metadataProgram\";\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: \"vaultProgram\";\n          isMut: false;\n          isSigner: false;\n          docs: [\n            \"Vault program. The pool will deposit/withdraw liquidity from the vault.\"\n          ];\n        },\n        {\n          name: \"tokenProgram\";\n          isMut: false;\n          isSigner: false;\n          docs: [\"Token program.\"];\n        },\n        {\n          name: \"associatedTokenProgram\";\n          isMut: false;\n          isSigner: false;\n          docs: [\"Associated token program.\"];\n        },\n        {\n          name: \"systemProgram\";\n          isMut: false;\n          isSigner: false;\n          docs: [\"System program.\"];\n        }\n      ];\n      args: [\n        {\n          name: \"tokenAAmount\";\n          type: \"u64\";\n        },\n        {\n          name: \"tokenBAmount\";\n          type: \"u64\";\n        },\n        {\n          name: \"activationPoint\";\n          type: {\n            option: \"u64\";\n          };\n        }\n      ];\n    },\n    {\n      name: \"updateActivationPoint\";\n      docs: [\"Update activation slot\"];\n      accounts: [\n        {\n          name: \"pool\";\n          isMut: true;\n          isSigner: false;\n          docs: [\"Pool account (PDA)\"];\n        },\n        {\n          name: \"admin\";\n          isMut: false;\n          isSigner: true;\n          docs: [\"Admin account.\"];\n        }\n      ];\n      args: [\n        {\n          name: \"newActivationPoint\";\n          type: \"u64\";\n        }\n      ];\n    },\n    {\n      name: \"withdrawProtocolFees\";\n      docs: [\"Withdraw protocol fee\"];\n      accounts: [\n        {\n          name: \"pool\";\n          isMut: false;\n          isSigner: false;\n          docs: [\"Pool account (PDA)\"];\n        },\n        {\n          name: \"aVaultLp\";\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: \"protocolTokenAFee\";\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: \"protocolTokenBFee\";\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: \"treasuryTokenA\";\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: \"treasuryTokenB\";\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: \"tokenProgram\";\n          isMut: false;\n          isSigner: false;\n        }\n      ];\n      args: [];\n    },\n    {\n      name: \"setWhitelistedVault\";\n      docs: [\"Set whitelisted vault\"];\n      accounts: [\n        {\n          name: \"pool\";\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: \"admin\";\n          isMut: false;\n          isSigner: true;\n        }\n      ];\n      args: [\n        {\n          name: \"whitelistedVault\";\n          type: \"publicKey\";\n        }\n      ];\n    }\n  ];\n  accounts: [\n    {\n      name: \"config\";\n      type: {\n        kind: \"struct\";\n        fields: [\n          {\n            name: \"poolFees\";\n            type: {\n              defined: \"PoolFees\";\n            };\n          },\n          {\n            name: \"activationDuration\";\n            type: \"u64\";\n          },\n          {\n            name: \"vaultConfigKey\";\n            type: \"publicKey\";\n          },\n          {\n            name: \"poolCreatorAuthority\";\n            type: \"publicKey\";\n          },\n          {\n            name: \"activationType\";\n            type: \"u8\";\n          },\n          {\n            name: \"padding\";\n            type: {\n              array: [\"u8\", 227];\n            };\n          }\n        ];\n      };\n    },\n    {\n      name: \"lockEscrow\";\n      docs: [\"State of lock escrow account\"];\n      type: {\n        kind: \"struct\";\n        fields: [\n          {\n            name: \"pool\";\n            docs: [\"Pool address\"];\n            type: \"publicKey\";\n          },\n          {\n            name: \"owner\";\n            docs: [\"Owner address\"];\n            type: \"publicKey\";\n          },\n          {\n            name: \"escrowVault\";\n            docs: [\"Vault address, store the lock user lock\"];\n            type: \"publicKey\";\n          },\n          {\n            name: \"bump\";\n            docs: [\"bump, used to sign\"];\n            type: \"u8\";\n          },\n          {\n            name: \"totalLockedAmount\";\n            docs: [\"Total locked amount\"];\n            type: \"u64\";\n          },\n          {\n            name: \"lpPerToken\";\n            docs: [\"Lp per token, virtual price of lp token\"];\n            type: \"u128\";\n          },\n          {\n            name: \"unclaimedFeePending\";\n            docs: [\"Unclaimed fee pending\"];\n            type: \"u64\";\n          },\n          {\n            name: \"aFee\";\n            docs: [\"Total a fee claimed so far\"];\n            type: \"u64\";\n          },\n          {\n            name: \"bFee\";\n            docs: [\"Total b fee claimed so far\"];\n            type: \"u64\";\n          }\n        ];\n      };\n    },\n    {\n      name: \"pool\";\n      docs: [\"State of pool account\"];\n      type: {\n        kind: \"struct\";\n        fields: [\n          {\n            name: \"lpMint\";\n            docs: [\"LP token mint of the pool\"];\n            type: \"publicKey\";\n          },\n          {\n            name: \"tokenAMint\";\n            docs: [\"Token A mint of the pool. Eg: USDT\"];\n            type: \"publicKey\";\n          },\n          {\n            name: \"tokenBMint\";\n            docs: [\"Token B mint of the pool. Eg: USDC\"];\n            type: \"publicKey\";\n          },\n          {\n            name: \"aVault\";\n            docs: [\n              \"Vault account for token A. Token A of the pool will be deposit / withdraw from this vault account.\"\n            ];\n            type: \"publicKey\";\n          },\n          {\n            name: \"bVault\";\n            docs: [\n              \"Vault account for token B. Token B of the pool will be deposit / withdraw from this vault account.\"\n            ];\n            type: \"publicKey\";\n          },\n          {\n            name: \"aVaultLp\";\n            docs: [\n              \"LP token account of vault A. Used to receive/burn the vault LP upon deposit/withdraw from the vault.\"\n            ];\n            type: \"publicKey\";\n          },\n          {\n            name: \"bVaultLp\";\n            docs: [\n              \"LP token account of vault B. Used to receive/burn the vault LP upon deposit/withdraw from the vault.\"\n            ];\n            type: \"publicKey\";\n          },\n          {\n            name: \"aVaultLpBump\";\n            docs: ['\"A\" vault lp bump. Used to create signer seeds.'];\n            type: \"u8\";\n          },\n          {\n            name: \"enabled\";\n            docs: [\n              \"Flag to determine whether the pool is enabled, or disabled.\"\n            ];\n            type: \"bool\";\n          },\n          {\n            name: \"protocolTokenAFee\";\n            docs: [\n              \"Protocol fee token account for token A. Used to receive trading fee.\"\n            ];\n            type: \"publicKey\";\n          },\n          {\n            name: \"protocolTokenBFee\";\n            docs: [\n              \"Protocol fee token account for token B. Used to receive trading fee.\"\n            ];\n            type: \"publicKey\";\n          },\n          {\n            name: \"feeLastUpdatedAt\";\n            docs: [\"Fee last updated timestamp\"];\n            type: \"u64\";\n          },\n          {\n            name: \"padding0\";\n            type: {\n              array: [\"u8\", 24];\n            };\n          },\n          {\n            name: \"fees\";\n            docs: [\"Store the fee charges setting.\"];\n            type: {\n              defined: \"PoolFees\";\n            };\n          },\n          {\n            name: \"poolType\";\n            docs: [\"Pool type\"];\n            type: {\n              defined: \"PoolType\";\n            };\n          },\n          {\n            name: \"stake\";\n            docs: [\"Stake pubkey of SPL stake pool\"];\n            type: \"publicKey\";\n          },\n          {\n            name: \"totalLockedLp\";\n            docs: [\"Total locked lp token\"];\n            type: \"u64\";\n          },\n          {\n            name: \"bootstrapping\";\n            docs: [\"bootstrapping config\"];\n            type: {\n              defined: \"Bootstrapping\";\n            };\n          },\n          {\n            name: \"padding\";\n            docs: [\"Padding for future pool field\"];\n            type: {\n              defined: \"Padding\";\n            };\n          },\n          {\n            name: \"curveType\";\n            docs: [\"The type of the swap curve supported by the pool.\"];\n            type: {\n              defined: \"CurveType\";\n            };\n          }\n        ];\n      };\n    }\n  ];\n  types: [\n    {\n      name: \"TokenMultiplier\";\n      docs: [\n        \"Multiplier for the pool token. Used to normalized token with different decimal into the same precision.\"\n      ];\n      type: {\n        kind: \"struct\";\n        fields: [\n          {\n            name: \"tokenAMultiplier\";\n            docs: [\"Multiplier for token A of the pool.\"];\n            type: \"u64\";\n          },\n          {\n            name: \"tokenBMultiplier\";\n            docs: [\"Multiplier for token B of the pool.\"];\n            type: \"u64\";\n          },\n          {\n            name: \"precisionFactor\";\n            docs: [\n              \"Record the highest token decimal in the pool. For example, Token A is 6 decimal, token B is 9 decimal. This will save value of 9.\"\n            ];\n            type: \"u8\";\n          }\n        ];\n      };\n    },\n    {\n      name: \"PoolFees\";\n      docs: [\"Information regarding fee charges\"];\n      type: {\n        kind: \"struct\";\n        fields: [\n          {\n            name: \"tradeFeeNumerator\";\n            docs: [\n              \"Trade fees are extra token amounts that are held inside the token\",\n              \"accounts during a trade, making the value of liquidity tokens rise.\",\n              \"Trade fee numerator\"\n            ];\n            type: \"u64\";\n          },\n          {\n            name: \"tradeFeeDenominator\";\n            docs: [\"Trade fee denominator\"];\n            type: \"u64\";\n          },\n          {\n            name: \"protocolTradeFeeNumerator\";\n            docs: [\n              \"Protocol trading fees are extra token amounts that are held inside the token\",\n              \"accounts during a trade, with the equivalent in pool tokens minted to\",\n              \"the protocol of the program.\",\n              \"Protocol trade fee numerator\"\n            ];\n            type: \"u64\";\n          },\n          {\n            name: \"protocolTradeFeeDenominator\";\n            docs: [\"Protocol trade fee denominator\"];\n            type: \"u64\";\n          }\n        ];\n      };\n    },\n    {\n      name: \"Depeg\";\n      docs: [\"Contains information for depeg pool\"];\n      type: {\n        kind: \"struct\";\n        fields: [\n          {\n            name: \"baseVirtualPrice\";\n            docs: [\"The virtual price of staking / interest bearing token\"];\n            type: \"u64\";\n          },\n          {\n            name: \"baseCacheUpdated\";\n            docs: [\"The last time base_virtual_price is updated\"];\n            type: \"u64\";\n          },\n          {\n            name: \"depegType\";\n            docs: [\"Type of the depeg pool\"];\n            type: {\n              defined: \"DepegType\";\n            };\n          }\n        ];\n      };\n    },\n    {\n      name: \"ConfigParameters\";\n      type: {\n        kind: \"struct\";\n        fields: [\n          {\n            name: \"tradeFeeNumerator\";\n            type: \"u64\";\n          },\n          {\n            name: \"protocolTradeFeeNumerator\";\n            type: \"u64\";\n          },\n          {\n            name: \"activationDuration\";\n            type: \"u64\";\n          },\n          {\n            name: \"vaultConfigKey\";\n            type: \"publicKey\";\n          },\n          {\n            name: \"poolCreatorAuthority\";\n            type: \"publicKey\";\n          },\n          {\n            name: \"activationType\";\n            type: \"u8\";\n          },\n          {\n            name: \"index\";\n            type: \"u64\";\n          }\n        ];\n      };\n    },\n    {\n      name: \"Padding\";\n      docs: [\"Padding for future pool fields\"];\n      type: {\n        kind: \"struct\";\n        fields: [\n          {\n            name: \"padding0\";\n            docs: [\"Padding 0\"];\n            type: {\n              array: [\"u8\", 14];\n            };\n          },\n          {\n            name: \"padding\";\n            docs: [\"Padding 1\"];\n            type: {\n              array: [\"u128\", 24];\n            };\n          }\n        ];\n      };\n    },\n    {\n      name: \"Bootstrapping\";\n      type: {\n        kind: \"struct\";\n        fields: [\n          {\n            name: \"activationPoint\";\n            docs: [\"Activation point, can be slot or timestamp\"];\n            type: \"u64\";\n          },\n          {\n            name: \"whitelistedVault\";\n            docs: [\n              \"Whitelisted vault to be able to buy pool before activation_point\"\n            ];\n            type: \"publicKey\";\n          },\n          {\n            name: \"poolCreator\";\n            docs: [\n              \"Need to store pool creator in lauch pool, so they can modify liquidity before activation_point\"\n            ];\n            type: \"publicKey\";\n          },\n          {\n            name: \"activationType\";\n            docs: [\"Activation type, 0 means by slot, 1 means by timestamp\"];\n            type: \"u8\";\n          }\n        ];\n      };\n    },\n    {\n      name: \"ActivationType\";\n      docs: [\"Type of the activation\"];\n      type: {\n        kind: \"enum\";\n        variants: [\n          {\n            name: \"Slot\";\n          },\n          {\n            name: \"Timestamp\";\n          }\n        ];\n      };\n    },\n    {\n      name: \"RoundDirection\";\n      docs: [\"Rounding direction\"];\n      type: {\n        kind: \"enum\";\n        variants: [\n          {\n            name: \"Floor\";\n          },\n          {\n            name: \"Ceiling\";\n          }\n        ];\n      };\n    },\n    {\n      name: \"TradeDirection\";\n      docs: [\"Trade (swap) direction\"];\n      type: {\n        kind: \"enum\";\n        variants: [\n          {\n            name: \"AtoB\";\n          },\n          {\n            name: \"BtoA\";\n          }\n        ];\n      };\n    },\n    {\n      name: \"NewCurveType\";\n      docs: [\"Type of the swap curve\"];\n      type: {\n        kind: \"enum\";\n        variants: [\n          {\n            name: \"ConstantProduct\";\n          },\n          {\n            name: \"Stable\";\n            fields: [\n              {\n                name: \"amp\";\n                docs: [\"Amplification coefficient\"];\n                type: \"u64\";\n              },\n              {\n                name: \"token_multiplier\";\n                docs: [\n                  \"Multiplier for the pool token. Used to normalized token with different decimal into the same precision.\"\n                ];\n                type: {\n                  defined: \"TokenMultiplier\";\n                };\n              },\n              {\n                name: \"depeg\";\n                docs: [\n                  \"Depeg pool information. Contains functions to allow token amount to be repeg using stake / interest bearing token virtual price\"\n                ];\n                type: {\n                  defined: \"Depeg\";\n                };\n              },\n              {\n                name: \"last_amp_updated_timestamp\";\n                docs: [\n                  \"The last amp updated timestamp. Used to prevent update_curve_info called infinitely many times within a short period\"\n                ];\n                type: \"u64\";\n              }\n            ];\n          },\n          {\n            name: \"NewCurve\";\n            fields: [\n              {\n                name: \"field_one\";\n                type: \"u64\";\n              },\n              {\n                name: \"field_two\";\n                type: \"u64\";\n              }\n            ];\n          }\n        ];\n      };\n    },\n    {\n      name: \"CurveType\";\n      docs: [\"Type of the swap curve\"];\n      type: {\n        kind: \"enum\";\n        variants: [\n          {\n            name: \"ConstantProduct\";\n          },\n          {\n            name: \"Stable\";\n            fields: [\n              {\n                name: \"amp\";\n                docs: [\"Amplification coefficient\"];\n                type: \"u64\";\n              },\n              {\n                name: \"token_multiplier\";\n                docs: [\n                  \"Multiplier for the pool token. Used to normalized token with different decimal into the same precision.\"\n                ];\n                type: {\n                  defined: \"TokenMultiplier\";\n                };\n              },\n              {\n                name: \"depeg\";\n                docs: [\n                  \"Depeg pool information. Contains functions to allow token amount to be repeg using stake / interest bearing token virtual price\"\n                ];\n                type: {\n                  defined: \"Depeg\";\n                };\n              },\n              {\n                name: \"last_amp_updated_timestamp\";\n                docs: [\n                  \"The last amp updated timestamp. Used to prevent update_curve_info called infinitely many times within a short period\"\n                ];\n                type: \"u64\";\n              }\n            ];\n          }\n        ];\n      };\n    },\n    {\n      name: \"DepegType\";\n      docs: [\"Type of depeg pool\"];\n      type: {\n        kind: \"enum\";\n        variants: [\n          {\n            name: \"None\";\n          },\n          {\n            name: \"Marinade\";\n          },\n          {\n            name: \"Lido\";\n          },\n          {\n            name: \"SplStake\";\n          }\n        ];\n      };\n    },\n    {\n      name: \"Rounding\";\n      docs: [\"Round up, down\"];\n      type: {\n        kind: \"enum\";\n        variants: [\n          {\n            name: \"Up\";\n          },\n          {\n            name: \"Down\";\n          }\n        ];\n      };\n    },\n    {\n      name: \"PoolType\";\n      docs: [\"Pool type\"];\n      type: {\n        kind: \"enum\";\n        variants: [\n          {\n            name: \"Permissioned\";\n          },\n          {\n            name: \"Permissionless\";\n          }\n        ];\n      };\n    }\n  ];\n  events: [\n    {\n      name: \"AddLiquidity\";\n      fields: [\n        {\n          name: \"lpMintAmount\";\n          type: \"u64\";\n          index: false;\n        },\n        {\n          name: \"tokenAAmount\";\n          type: \"u64\";\n          index: false;\n        },\n        {\n          name: \"tokenBAmount\";\n          type: \"u64\";\n          index: false;\n        }\n      ];\n    },\n    {\n      name: \"RemoveLiquidity\";\n      fields: [\n        {\n          name: \"lpUnmintAmount\";\n          type: \"u64\";\n          index: false;\n        },\n        {\n          name: \"tokenAOutAmount\";\n          type: \"u64\";\n          index: false;\n        },\n        {\n          name: \"tokenBOutAmount\";\n          type: \"u64\";\n          index: false;\n        }\n      ];\n    },\n    {\n      name: \"BootstrapLiquidity\";\n      fields: [\n        {\n          name: \"lpMintAmount\";\n          type: \"u64\";\n          index: false;\n        },\n        {\n          name: \"tokenAAmount\";\n          type: \"u64\";\n          index: false;\n        },\n        {\n          name: \"tokenBAmount\";\n          type: \"u64\";\n          index: false;\n        },\n        {\n          name: \"pool\";\n          type: \"publicKey\";\n          index: false;\n        }\n      ];\n    },\n    {\n      name: \"Swap\";\n      fields: [\n        {\n          name: \"inAmount\";\n          type: \"u64\";\n          index: false;\n        },\n        {\n          name: \"outAmount\";\n          type: \"u64\";\n          index: false;\n        },\n        {\n          name: \"tradeFee\";\n          type: \"u64\";\n          index: false;\n        },\n        {\n          name: \"protocolFee\";\n          type: \"u64\";\n          index: false;\n        },\n        {\n          name: \"hostFee\";\n          type: \"u64\";\n          index: false;\n        }\n      ];\n    },\n    {\n      name: \"SetPoolFees\";\n      fields: [\n        {\n          name: \"tradeFeeNumerator\";\n          type: \"u64\";\n          index: false;\n        },\n        {\n          name: \"tradeFeeDenominator\";\n          type: \"u64\";\n          index: false;\n        },\n        {\n          name: \"protocolTradeFeeNumerator\";\n          type: \"u64\";\n          index: false;\n        },\n        {\n          name: \"protocolTradeFeeDenominator\";\n          type: \"u64\";\n          index: false;\n        },\n        {\n          name: \"pool\";\n          type: \"publicKey\";\n          index: false;\n        }\n      ];\n    },\n    {\n      name: \"PoolInfo\";\n      fields: [\n        {\n          name: \"tokenAAmount\";\n          type: \"u64\";\n          index: false;\n        },\n        {\n          name: \"tokenBAmount\";\n          type: \"u64\";\n          index: false;\n        },\n        {\n          name: \"virtualPrice\";\n          type: \"f64\";\n          index: false;\n        },\n        {\n          name: \"currentTimestamp\";\n          type: \"u64\";\n          index: false;\n        }\n      ];\n    },\n    {\n      name: \"TransferAdmin\";\n      fields: [\n        {\n          name: \"admin\";\n          type: \"publicKey\";\n          index: false;\n        },\n        {\n          name: \"newAdmin\";\n          type: \"publicKey\";\n          index: false;\n        },\n        {\n          name: \"pool\";\n          type: \"publicKey\";\n          index: false;\n        }\n      ];\n    },\n    {\n      name: \"OverrideCurveParam\";\n      fields: [\n        {\n          name: \"newAmp\";\n          type: \"u64\";\n          index: false;\n        },\n        {\n          name: \"updatedTimestamp\";\n          type: \"u64\";\n          index: false;\n        },\n        {\n          name: \"pool\";\n          type: \"publicKey\";\n          index: false;\n        }\n      ];\n    },\n    {\n      name: \"PoolCreated\";\n      fields: [\n        {\n          name: \"lpMint\";\n          type: \"publicKey\";\n          index: false;\n        },\n        {\n          name: \"tokenAMint\";\n          type: \"publicKey\";\n          index: false;\n        },\n        {\n          name: \"tokenBMint\";\n          type: \"publicKey\";\n          index: false;\n        },\n        {\n          name: \"poolType\";\n          type: {\n            defined: \"PoolType\";\n          };\n          index: false;\n        },\n        {\n          name: \"pool\";\n          type: \"publicKey\";\n          index: false;\n        }\n      ];\n    },\n    {\n      name: \"PoolEnabled\";\n      fields: [\n        {\n          name: \"pool\";\n          type: \"publicKey\";\n          index: false;\n        },\n        {\n          name: \"enabled\";\n          type: \"bool\";\n          index: false;\n        }\n      ];\n    },\n    {\n      name: \"MigrateFeeAccount\";\n      fields: [\n        {\n          name: \"pool\";\n          type: \"publicKey\";\n          index: false;\n        },\n        {\n          name: \"newAdminTokenAFee\";\n          type: \"publicKey\";\n          index: false;\n        },\n        {\n          name: \"newAdminTokenBFee\";\n          type: \"publicKey\";\n          index: false;\n        },\n        {\n          name: \"tokenAAmount\";\n          type: \"u64\";\n          index: false;\n        },\n        {\n          name: \"tokenBAmount\";\n          type: \"u64\";\n          index: false;\n        }\n      ];\n    },\n    {\n      name: \"CreateLockEscrow\";\n      fields: [\n        {\n          name: \"pool\";\n          type: \"publicKey\";\n          index: false;\n        },\n        {\n          name: \"owner\";\n          type: \"publicKey\";\n          index: false;\n        }\n      ];\n    },\n    {\n      name: \"Lock\";\n      fields: [\n        {\n          name: \"pool\";\n          type: \"publicKey\";\n          index: false;\n        },\n        {\n          name: \"owner\";\n          type: \"publicKey\";\n          index: false;\n        },\n        {\n          name: \"amount\";\n          type: \"u64\";\n          index: false;\n        }\n      ];\n    },\n    {\n      name: \"ClaimFee\";\n      fields: [\n        {\n          name: \"pool\";\n          type: \"publicKey\";\n          index: false;\n        },\n        {\n          name: \"owner\";\n          type: \"publicKey\";\n          index: false;\n        },\n        {\n          name: \"amount\";\n          type: \"u64\";\n          index: false;\n        },\n        {\n          name: \"aFee\";\n          type: \"u64\";\n          index: false;\n        },\n        {\n          name: \"bFee\";\n          type: \"u64\";\n          index: false;\n        }\n      ];\n    },\n    {\n      name: \"CreateConfig\";\n      fields: [\n        {\n          name: \"tradeFeeNumerator\";\n          type: \"u64\";\n          index: false;\n        },\n        {\n          name: \"protocolTradeFeeNumerator\";\n          type: \"u64\";\n          index: false;\n        },\n        {\n          name: \"config\";\n          type: \"publicKey\";\n          index: false;\n        }\n      ];\n    },\n    {\n      name: \"CloseConfig\";\n      fields: [\n        {\n          name: \"config\";\n          type: \"publicKey\";\n          index: false;\n        }\n      ];\n    },\n    {\n      name: \"WithdrawProtocolFees\";\n      fields: [\n        {\n          name: \"pool\";\n          type: \"publicKey\";\n          index: false;\n        },\n        {\n          name: \"protocolAFee\";\n          type: \"u64\";\n          index: false;\n        },\n        {\n          name: \"protocolBFee\";\n          type: \"u64\";\n          index: false;\n        },\n        {\n          name: \"protocolAFeeOwner\";\n          type: \"publicKey\";\n          index: false;\n        },\n        {\n          name: \"protocolBFeeOwner\";\n          type: \"publicKey\";\n          index: false;\n        }\n      ];\n    }\n  ];\n  errors: [\n    {\n      code: 6000;\n      name: \"MathOverflow\";\n      msg: \"Math operation overflow\";\n    },\n    {\n      code: 6001;\n      name: \"InvalidFee\";\n      msg: \"Invalid fee setup\";\n    },\n    {\n      code: 6002;\n      name: \"InvalidInvariant\";\n      msg: \"Invalid invariant d\";\n    },\n    {\n      code: 6003;\n      name: \"FeeCalculationFailure\";\n      msg: \"Fee calculation failure\";\n    },\n    {\n      code: 6004;\n      name: \"ExceededSlippage\";\n      msg: \"Exceeded slippage tolerance\";\n    },\n    {\n      code: 6005;\n      name: \"InvalidCalculation\";\n      msg: \"Invalid curve calculation\";\n    },\n    {\n      code: 6006;\n      name: \"ZeroTradingTokens\";\n      msg: \"Given pool token amount results in zero trading tokens\";\n    },\n    {\n      code: 6007;\n      name: \"ConversionError\";\n      msg: \"Math conversion overflow\";\n    },\n    {\n      code: 6008;\n      name: \"FaultyLpMint\";\n      msg: \"LP mint authority must be 'A' vault lp, without freeze authority, and 0 supply\";\n    },\n    {\n      code: 6009;\n      name: \"MismatchedTokenMint\";\n      msg: \"Token mint mismatched\";\n    },\n    {\n      code: 6010;\n      name: \"MismatchedLpMint\";\n      msg: \"LP mint mismatched\";\n    },\n    {\n      code: 6011;\n      name: \"MismatchedOwner\";\n      msg: \"Invalid lp token owner\";\n    },\n    {\n      code: 6012;\n      name: \"InvalidVaultAccount\";\n      msg: \"Invalid vault account\";\n    },\n    {\n      code: 6013;\n      name: \"InvalidVaultLpAccount\";\n      msg: \"Invalid vault lp account\";\n    },\n    {\n      code: 6014;\n      name: \"InvalidPoolLpMintAccount\";\n      msg: \"Invalid pool lp mint account\";\n    },\n    {\n      code: 6015;\n      name: \"PoolDisabled\";\n      msg: \"Pool disabled\";\n    },\n    {\n      code: 6016;\n      name: \"InvalidAdminAccount\";\n      msg: \"Invalid admin account\";\n    },\n    {\n      code: 6017;\n      name: \"InvalidProtocolFeeAccount\";\n      msg: \"Invalid protocol fee account\";\n    },\n    {\n      code: 6018;\n      name: \"SameAdminAccount\";\n      msg: \"Same admin account\";\n    },\n    {\n      code: 6019;\n      name: \"IdenticalSourceDestination\";\n      msg: \"Identical user source and destination token account\";\n    },\n    {\n      code: 6020;\n      name: \"ApyCalculationError\";\n      msg: \"Apy calculation error\";\n    },\n    {\n      code: 6021;\n      name: \"InsufficientSnapshot\";\n      msg: \"Insufficient virtual price snapshot\";\n    },\n    {\n      code: 6022;\n      name: \"NonUpdatableCurve\";\n      msg: \"Current curve is non-updatable\";\n    },\n    {\n      code: 6023;\n      name: \"MisMatchedCurve\";\n      msg: \"New curve is mismatched with old curve\";\n    },\n    {\n      code: 6024;\n      name: \"InvalidAmplification\";\n      msg: \"Amplification is invalid\";\n    },\n    {\n      code: 6025;\n      name: \"UnsupportedOperation\";\n      msg: \"Operation is not supported\";\n    },\n    {\n      code: 6026;\n      name: \"ExceedMaxAChanges\";\n      msg: \"Exceed max amplification changes\";\n    },\n    {\n      code: 6027;\n      name: \"InvalidRemainingAccountsLen\";\n      msg: \"Invalid remaining accounts length\";\n    },\n    {\n      code: 6028;\n      name: \"InvalidRemainingAccounts\";\n      msg: \"Invalid remaining account\";\n    },\n    {\n      code: 6029;\n      name: \"MismatchedDepegMint\";\n      msg: \"Token mint B doesn't matches depeg type token mint\";\n    },\n    {\n      code: 6030;\n      name: \"InvalidApyAccount\";\n      msg: \"Invalid APY account\";\n    },\n    {\n      code: 6031;\n      name: \"InvalidTokenMultiplier\";\n      msg: \"Invalid token multiplier\";\n    },\n    {\n      code: 6032;\n      name: \"InvalidDepegInformation\";\n      msg: \"Invalid depeg information\";\n    },\n    {\n      code: 6033;\n      name: \"UpdateTimeConstraint\";\n      msg: \"Update time constraint violated\";\n    },\n    {\n      code: 6034;\n      name: \"ExceedMaxFeeBps\";\n      msg: \"Exceeded max fee bps\";\n    },\n    {\n      code: 6035;\n      name: \"InvalidAdmin\";\n      msg: \"Invalid admin\";\n    },\n    {\n      code: 6036;\n      name: \"PoolIsNotPermissioned\";\n      msg: \"Pool is not permissioned\";\n    },\n    {\n      code: 6037;\n      name: \"InvalidDepositAmount\";\n      msg: \"Invalid deposit amount\";\n    },\n    {\n      code: 6038;\n      name: \"InvalidFeeOwner\";\n      msg: \"Invalid fee owner\";\n    },\n    {\n      code: 6039;\n      name: \"NonDepletedPool\";\n      msg: \"Pool is not depleted\";\n    },\n    {\n      code: 6040;\n      name: \"AmountNotPeg\";\n      msg: \"Token amount is not 1:1\";\n    },\n    {\n      code: 6041;\n      name: \"AmountIsZero\";\n      msg: \"Amount is zero\";\n    },\n    {\n      code: 6042;\n      name: \"TypeCastFailed\";\n      msg: \"Type cast error\";\n    },\n    {\n      code: 6043;\n      name: \"AmountIsNotEnough\";\n      msg: \"Amount is not enough\";\n    },\n    {\n      code: 6044;\n      name: \"InvalidActivationDuration\";\n      msg: \"Invalid activation duration\";\n    },\n    {\n      code: 6045;\n      name: \"PoolIsNotLaunchPool\";\n      msg: \"Pool is not launch pool\";\n    },\n    {\n      code: 6046;\n      name: \"UnableToModifyActivationPoint\";\n      msg: \"Unable to modify activation point\";\n    },\n    {\n      code: 6047;\n      name: \"InvalidAuthorityToCreateThePool\";\n      msg: \"Invalid authority to create the pool\";\n    },\n    {\n      code: 6048;\n      name: \"InvalidActivationType\";\n      msg: \"Invalid activation type\";\n    },\n    {\n      code: 6049;\n      name: \"InvalidActivationPoint\";\n      msg: \"Invalid activation point\";\n    },\n    {\n      code: 6050;\n      name: \"PreActivationSwapStarted\";\n      msg: \"Pre activation swap window started\";\n    },\n    {\n      code: 6051;\n      name: \"InvalidPoolType\";\n      msg: \"Invalid pool type\";\n    }\n  ];\n};\n\nexport const IDL: Amm = {\n  version: \"0.5.1\",\n  name: \"amm\",\n  docs: [\"Program for AMM\"],\n  instructions: [\n    {\n      name: \"initializePermissionedPool\",\n      docs: [\"Initialize a new permissioned pool.\"],\n      accounts: [\n        {\n          name: \"pool\",\n          isMut: true,\n          isSigner: true,\n          docs: [\"Pool account (arbitrary address)\"],\n        },\n        {\n          name: \"lpMint\",\n          isMut: true,\n          isSigner: false,\n          docs: [\"LP token mint of the pool\"],\n        },\n        {\n          name: \"tokenAMint\",\n          isMut: false,\n          isSigner: false,\n          docs: [\"Token A mint of the pool. Eg: USDT\"],\n        },\n        {\n          name: \"tokenBMint\",\n          isMut: false,\n          isSigner: false,\n          docs: [\"Token B mint of the pool. Eg: USDC\"],\n        },\n        {\n          name: \"aVault\",\n          isMut: true,\n          isSigner: false,\n          docs: [\n            \"Vault account for token A. Token A of the pool will be deposit / withdraw from this vault account.\",\n          ],\n        },\n        {\n          name: \"bVault\",\n          isMut: true,\n          isSigner: false,\n          docs: [\n            \"Vault account for token B. Token B of the pool will be deposit / withdraw from this vault account.\",\n          ],\n        },\n        {\n          name: \"aVaultLpMint\",\n          isMut: true,\n          isSigner: false,\n          docs: [\"LP token mint of vault A\"],\n        },\n        {\n          name: \"bVaultLpMint\",\n          isMut: true,\n          isSigner: false,\n          docs: [\"LP token mint of vault B\"],\n        },\n        {\n          name: \"aVaultLp\",\n          isMut: true,\n          isSigner: false,\n          docs: [\n            \"LP token account of vault A. Used to receive/burn the vault LP upon deposit/withdraw from the vault.\",\n          ],\n        },\n        {\n          name: \"bVaultLp\",\n          isMut: true,\n          isSigner: false,\n          docs: [\n            \"LP token account of vault B. Used to receive/burn vault LP upon deposit/withdraw from the vault.\",\n          ],\n        },\n        {\n          name: \"adminTokenA\",\n          isMut: true,\n          isSigner: false,\n          docs: [\n            \"Admin token account for pool token A mint. Used to bootstrap the pool with initial liquidity.\",\n          ],\n        },\n        {\n          name: \"adminTokenB\",\n          isMut: true,\n          isSigner: false,\n          docs: [\n            \"Admin token account for pool token B mint. Used to bootstrap the pool with initial liquidity.\",\n          ],\n        },\n        {\n          name: \"adminPoolLp\",\n          isMut: true,\n          isSigner: false,\n          docs: [\n            \"Admin pool LP token account. Used to receive LP during first deposit (initialize pool)\",\n            \"Admin pool LP token account. Used to receive LP during first deposit (initialize pool)\",\n          ],\n        },\n        {\n          name: \"protocolTokenAFee\",\n          isMut: true,\n          isSigner: false,\n          docs: [\n            \"Protocol fee token account for token A. Used to receive trading fee.\",\n          ],\n        },\n        {\n          name: \"protocolTokenBFee\",\n          isMut: true,\n          isSigner: false,\n          docs: [\n            \"Protocol fee token account for token B. Used to receive trading fee.\",\n          ],\n        },\n        {\n          name: \"admin\",\n          isMut: true,\n          isSigner: true,\n          docs: [\n            \"Admin account. This account will be the admin of the pool, and the payer for PDA during initialize pool.\",\n          ],\n        },\n        {\n          name: \"feeOwner\",\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: \"rent\",\n          isMut: false,\n          isSigner: false,\n          docs: [\"Rent account.\"],\n        },\n        {\n          name: \"mintMetadata\",\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: \"metadataProgram\",\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: \"vaultProgram\",\n          isMut: false,\n          isSigner: false,\n          docs: [\n            \"Vault program. The pool will deposit/withdraw liquidity from the vault.\",\n          ],\n        },\n        {\n          name: \"tokenProgram\",\n          isMut: false,\n          isSigner: false,\n          docs: [\"Token program.\"],\n        },\n        {\n          name: \"associatedTokenProgram\",\n          isMut: false,\n          isSigner: false,\n          docs: [\"Associated token program.\"],\n        },\n        {\n          name: \"systemProgram\",\n          isMut: false,\n          isSigner: false,\n          docs: [\"System program.\"],\n        },\n      ],\n      args: [\n        {\n          name: \"curveType\",\n          type: {\n            defined: \"CurveType\",\n          },\n        },\n      ],\n    },\n    {\n      name: \"initializePermissionlessPool\",\n      docs: [\"Initialize a new permissionless pool.\"],\n      accounts: [\n        {\n          name: \"pool\",\n          isMut: true,\n          isSigner: false,\n          docs: [\"Pool account (PDA address)\"],\n        },\n        {\n          name: \"lpMint\",\n          isMut: true,\n          isSigner: false,\n          docs: [\"LP token mint of the pool\"],\n        },\n        {\n          name: \"tokenAMint\",\n          isMut: false,\n          isSigner: false,\n          docs: [\"Token A mint of the pool. Eg: USDT\"],\n        },\n        {\n          name: \"tokenBMint\",\n          isMut: false,\n          isSigner: false,\n          docs: [\"Token B mint of the pool. Eg: USDC\"],\n        },\n        {\n          name: \"aVault\",\n          isMut: true,\n          isSigner: false,\n          docs: [\n            \"Vault account for token A. Token A of the pool will be deposit / withdraw from this vault account.\",\n          ],\n        },\n        {\n          name: \"bVault\",\n          isMut: true,\n          isSigner: false,\n          docs: [\n            \"Vault account for token B. Token B of the pool will be deposit / withdraw from this vault account.\",\n          ],\n        },\n        {\n          name: \"aTokenVault\",\n          isMut: true,\n          isSigner: false,\n          docs: [\"Token vault account of vault A\"],\n        },\n        {\n          name: \"bTokenVault\",\n          isMut: true,\n          isSigner: false,\n          docs: [\"Token vault account of vault B\"],\n        },\n        {\n          name: \"aVaultLpMint\",\n          isMut: true,\n          isSigner: false,\n          docs: [\"LP token mint of vault A\"],\n        },\n        {\n          name: \"bVaultLpMint\",\n          isMut: true,\n          isSigner: false,\n          docs: [\"LP token mint of vault B\"],\n        },\n        {\n          name: \"aVaultLp\",\n          isMut: true,\n          isSigner: false,\n          docs: [\n            \"LP token account of vault A. Used to receive/burn the vault LP upon deposit/withdraw from the vault.\",\n          ],\n        },\n        {\n          name: \"bVaultLp\",\n          isMut: true,\n          isSigner: false,\n          docs: [\n            \"LP token account of vault B. Used to receive/burn vault LP upon deposit/withdraw from the vault.\",\n          ],\n        },\n        {\n          name: \"payerTokenA\",\n          isMut: true,\n          isSigner: false,\n          docs: [\n            \"Payer token account for pool token A mint. Used to bootstrap the pool with initial liquidity.\",\n          ],\n        },\n        {\n          name: \"payerTokenB\",\n          isMut: true,\n          isSigner: false,\n          docs: [\n            \"Admin token account for pool token B mint. Used to bootstrap the pool with initial liquidity.\",\n          ],\n        },\n        {\n          name: \"payerPoolLp\",\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: \"protocolTokenAFee\",\n          isMut: true,\n          isSigner: false,\n          docs: [\n            \"Protocol fee token account for token A. Used to receive trading fee.\",\n          ],\n        },\n        {\n          name: \"protocolTokenBFee\",\n          isMut: true,\n          isSigner: false,\n          docs: [\n            \"Protocol fee token account for token B. Used to receive trading fee.\",\n          ],\n        },\n        {\n          name: \"payer\",\n          isMut: true,\n          isSigner: true,\n          docs: [\n            \"Admin account. This account will be the admin of the pool, and the payer for PDA during initialize pool.\",\n          ],\n        },\n        {\n          name: \"feeOwner\",\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: \"rent\",\n          isMut: false,\n          isSigner: false,\n          docs: [\"Rent account.\"],\n        },\n        {\n          name: \"mintMetadata\",\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: \"metadataProgram\",\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: \"vaultProgram\",\n          isMut: false,\n          isSigner: false,\n          docs: [\n            \"Vault program. The pool will deposit/withdraw liquidity from the vault.\",\n          ],\n        },\n        {\n          name: \"tokenProgram\",\n          isMut: false,\n          isSigner: false,\n          docs: [\"Token program.\"],\n        },\n        {\n          name: \"associatedTokenProgram\",\n          isMut: false,\n          isSigner: false,\n          docs: [\"Associated token program.\"],\n        },\n        {\n          name: \"systemProgram\",\n          isMut: false,\n          isSigner: false,\n          docs: [\"System program.\"],\n        },\n      ],\n      args: [\n        {\n          name: \"curveType\",\n          type: {\n            defined: \"CurveType\",\n          },\n        },\n        {\n          name: \"tokenAAmount\",\n          type: \"u64\",\n        },\n        {\n          name: \"tokenBAmount\",\n          type: \"u64\",\n        },\n      ],\n    },\n    {\n      name: \"initializePermissionlessPoolWithFeeTier\",\n      docs: [\"Initialize a new permissionless pool with customized fee tier\"],\n      accounts: [\n        {\n          name: \"pool\",\n          isMut: true,\n          isSigner: false,\n          docs: [\"Pool account (PDA address)\"],\n        },\n        {\n          name: \"lpMint\",\n          isMut: true,\n          isSigner: false,\n          docs: [\"LP token mint of the pool\"],\n        },\n        {\n          name: \"tokenAMint\",\n          isMut: false,\n          isSigner: false,\n          docs: [\"Token A mint of the pool. Eg: USDT\"],\n        },\n        {\n          name: \"tokenBMint\",\n          isMut: false,\n          isSigner: false,\n          docs: [\"Token B mint of the pool. Eg: USDC\"],\n        },\n        {\n          name: \"aVault\",\n          isMut: true,\n          isSigner: false,\n          docs: [\n            \"Vault account for token A. Token A of the pool will be deposit / withdraw from this vault account.\",\n          ],\n        },\n        {\n          name: \"bVault\",\n          isMut: true,\n          isSigner: false,\n          docs: [\n            \"Vault account for token B. Token B of the pool will be deposit / withdraw from this vault account.\",\n          ],\n        },\n        {\n          name: \"aTokenVault\",\n          isMut: true,\n          isSigner: false,\n          docs: [\"Token vault account of vault A\"],\n        },\n        {\n          name: \"bTokenVault\",\n          isMut: true,\n          isSigner: false,\n          docs: [\"Token vault account of vault B\"],\n        },\n        {\n          name: \"aVaultLpMint\",\n          isMut: true,\n          isSigner: false,\n          docs: [\"LP token mint of vault A\"],\n        },\n        {\n          name: \"bVaultLpMint\",\n          isMut: true,\n          isSigner: false,\n          docs: [\"LP token mint of vault B\"],\n        },\n        {\n          name: \"aVaultLp\",\n          isMut: true,\n          isSigner: false,\n          docs: [\n            \"LP token account of vault A. Used to receive/burn the vault LP upon deposit/withdraw from the vault.\",\n          ],\n        },\n        {\n          name: \"bVaultLp\",\n          isMut: true,\n          isSigner: false,\n          docs: [\n            \"LP token account of vault B. Used to receive/burn vault LP upon deposit/withdraw from the vault.\",\n          ],\n        },\n        {\n          name: \"payerTokenA\",\n          isMut: true,\n          isSigner: false,\n          docs: [\n            \"Payer token account for pool token A mint. Used to bootstrap the pool with initial liquidity.\",\n          ],\n        },\n        {\n          name: \"payerTokenB\",\n          isMut: true,\n          isSigner: false,\n          docs: [\n            \"Admin token account for pool token B mint. Used to bootstrap the pool with initial liquidity.\",\n          ],\n        },\n        {\n          name: \"payerPoolLp\",\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: \"protocolTokenAFee\",\n          isMut: true,\n          isSigner: false,\n          docs: [\n            \"Protocol fee token account for token A. Used to receive trading fee.\",\n          ],\n        },\n        {\n          name: \"protocolTokenBFee\",\n          isMut: true,\n          isSigner: false,\n          docs: [\n            \"Protocol fee token account for token B. Used to receive trading fee.\",\n          ],\n        },\n        {\n          name: \"payer\",\n          isMut: true,\n          isSigner: true,\n          docs: [\n            \"Admin account. This account will be the admin of the pool, and the payer for PDA during initialize pool.\",\n          ],\n        },\n        {\n          name: \"feeOwner\",\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: \"rent\",\n          isMut: false,\n          isSigner: false,\n          docs: [\"Rent account.\"],\n        },\n        {\n          name: \"mintMetadata\",\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: \"metadataProgram\",\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: \"vaultProgram\",\n          isMut: false,\n          isSigner: false,\n          docs: [\n            \"Vault program. The pool will deposit/withdraw liquidity from the vault.\",\n          ],\n        },\n        {\n          name: \"tokenProgram\",\n          isMut: false,\n          isSigner: false,\n          docs: [\"Token program.\"],\n        },\n        {\n          name: \"associatedTokenProgram\",\n          isMut: false,\n          isSigner: false,\n          docs: [\"Associated token program.\"],\n        },\n        {\n          name: \"systemProgram\",\n          isMut: false,\n          isSigner: false,\n          docs: [\"System program.\"],\n        },\n      ],\n      args: [\n        {\n          name: \"curveType\",\n          type: {\n            defined: \"CurveType\",\n          },\n        },\n        {\n          name: \"tradeFeeBps\",\n          type: \"u64\",\n        },\n        {\n          name: \"tokenAAmount\",\n          type: \"u64\",\n        },\n        {\n          name: \"tokenBAmount\",\n          type: \"u64\",\n        },\n      ],\n    },\n    {\n      name: \"enableOrDisablePool\",\n      docs: [\n        \"Enable or disable a pool. A disabled pool allow only remove balanced liquidity operation.\",\n      ],\n      accounts: [\n        {\n          name: \"pool\",\n          isMut: true,\n          isSigner: false,\n          docs: [\"Pool account (PDA)\"],\n        },\n        {\n          name: \"admin\",\n          isMut: false,\n          isSigner: true,\n          docs: [\"Admin account. Must be owner of the pool.\"],\n        },\n      ],\n      args: [\n        {\n          name: \"enable\",\n          type: \"bool\",\n        },\n      ],\n    },\n    {\n      name: \"swap\",\n      docs: [\n        \"Swap token A to B, or vice versa. An amount of trading fee will be charged for liquidity provider, and the admin of the pool.\",\n      ],\n      accounts: [\n        {\n          name: \"pool\",\n          isMut: true,\n          isSigner: false,\n          docs: [\"Pool account (PDA)\"],\n        },\n        {\n          name: \"userSourceToken\",\n          isMut: true,\n          isSigner: false,\n          docs: [\n            \"User token account. Token from this account will be transfer into the vault by the pool in exchange for another token of the pool.\",\n          ],\n        },\n        {\n          name: \"userDestinationToken\",\n          isMut: true,\n          isSigner: false,\n          docs: [\n            \"User token account. The exchanged token will be transfer into this account from the pool.\",\n          ],\n        },\n        {\n          name: \"aVault\",\n          isMut: true,\n          isSigner: false,\n          docs: [\n            \"Vault account for token a. token a of the pool will be deposit / withdraw from this vault account.\",\n          ],\n        },\n        {\n          name: \"bVault\",\n          isMut: true,\n          isSigner: false,\n          docs: [\n            \"Vault account for token b. token b of the pool will be deposit / withdraw from this vault account.\",\n          ],\n        },\n        {\n          name: \"aTokenVault\",\n          isMut: true,\n          isSigner: false,\n          docs: [\"Token vault account of vault A\"],\n        },\n        {\n          name: \"bTokenVault\",\n          isMut: true,\n          isSigner: false,\n          docs: [\"Token vault account of vault B\"],\n        },\n        {\n          name: \"aVaultLpMint\",\n          isMut: true,\n          isSigner: false,\n          docs: [\"Lp token mint of vault a\"],\n        },\n        {\n          name: \"bVaultLpMint\",\n          isMut: true,\n          isSigner: false,\n          docs: [\"Lp token mint of vault b\"],\n        },\n        {\n          name: \"aVaultLp\",\n          isMut: true,\n          isSigner: false,\n          docs: [\n            \"LP token account of vault A. Used to receive/burn the vault LP upon deposit/withdraw from the vault.\",\n          ],\n        },\n        {\n          name: \"bVaultLp\",\n          isMut: true,\n          isSigner: false,\n          docs: [\n            \"LP token account of vault B. Used to receive/burn the vault LP upon deposit/withdraw from the vault.\",\n          ],\n        },\n        {\n          name: \"protocolTokenFee\",\n          isMut: true,\n          isSigner: false,\n          docs: [\n            \"Protocol fee token account. Used to receive trading fee. It's mint field must matched with user_source_token mint field.\",\n          ],\n        },\n        {\n          name: \"user\",\n          isMut: false,\n          isSigner: true,\n          docs: [\"User account. Must be owner of user_source_token.\"],\n        },\n        {\n          name: \"vaultProgram\",\n          isMut: false,\n          isSigner: false,\n          docs: [\n            \"Vault program. the pool will deposit/withdraw liquidity from the vault.\",\n          ],\n        },\n        {\n          name: \"tokenProgram\",\n          isMut: false,\n          isSigner: false,\n          docs: [\"Token program.\"],\n        },\n      ],\n      args: [\n        {\n          name: \"inAmount\",\n          type: \"u64\",\n        },\n        {\n          name: \"minimumOutAmount\",\n          type: \"u64\",\n        },\n      ],\n    },\n    {\n      name: \"removeLiquiditySingleSide\",\n      docs: [\n        \"Withdraw only single token from the pool. Only supported by pool with stable swap curve.\",\n      ],\n      accounts: [\n        {\n          name: \"pool\",\n          isMut: true,\n          isSigner: false,\n          docs: [\"Pool account (PDA)\"],\n        },\n        {\n          name: \"lpMint\",\n          isMut: true,\n          isSigner: false,\n          docs: [\"LP token mint of the pool\"],\n        },\n        {\n          name: \"userPoolLp\",\n          isMut: true,\n          isSigner: false,\n          docs: [\n            \"User pool lp token account. LP will be burned from this account upon success liquidity removal.\",\n          ],\n        },\n        {\n          name: \"aVaultLp\",\n          isMut: true,\n          isSigner: false,\n          docs: [\n            \"LP token account of vault A. Used to receive/burn the vault LP upon deposit/withdraw from the vault.\",\n          ],\n        },\n        {\n          name: \"bVaultLp\",\n          isMut: true,\n          isSigner: false,\n          docs: [\n            \"LP token account of vault B. Used to receive/burn the vault LP upon deposit/withdraw from the vault.\",\n          ],\n        },\n        {\n          name: \"aVault\",\n          isMut: true,\n          isSigner: false,\n          docs: [\n            \"Vault account for token A. Token A of the pool will be deposit / withdraw from this vault account.\",\n          ],\n        },\n        {\n          name: \"bVault\",\n          isMut: true,\n          isSigner: false,\n          docs: [\n            \"Vault account for token B. Token B of the pool will be deposit / withdraw from this vault account.\",\n          ],\n        },\n        {\n          name: \"aVaultLpMint\",\n          isMut: true,\n          isSigner: false,\n          docs: [\"LP token mint of vault A\"],\n        },\n        {\n          name: \"bVaultLpMint\",\n          isMut: true,\n          isSigner: false,\n          docs: [\"LP token mint of vault B\"],\n        },\n        {\n          name: \"aTokenVault\",\n          isMut: true,\n          isSigner: false,\n          docs: [\"Token vault account of vault A\"],\n        },\n        {\n          name: \"bTokenVault\",\n          isMut: true,\n          isSigner: false,\n          docs: [\"Token vault account of vault B\"],\n        },\n        {\n          name: \"userDestinationToken\",\n          isMut: true,\n          isSigner: false,\n          docs: [\n            \"User token account to receive token upon success liquidity removal.\",\n          ],\n        },\n        {\n          name: \"user\",\n          isMut: false,\n          isSigner: true,\n          docs: [\"User account. Must be owner of the user_pool_lp account.\"],\n        },\n        {\n          name: \"vaultProgram\",\n          isMut: false,\n          isSigner: false,\n          docs: [\n            \"Vault program. The pool will deposit/withdraw liquidity from the vault.\",\n          ],\n        },\n        {\n          name: \"tokenProgram\",\n          isMut: false,\n          isSigner: false,\n          docs: [\"Token program.\"],\n        },\n      ],\n      args: [\n        {\n          name: \"poolTokenAmount\",\n          type: \"u64\",\n        },\n        {\n          name: \"minimumOutAmount\",\n          type: \"u64\",\n        },\n      ],\n    },\n    {\n      name: \"addImbalanceLiquidity\",\n      docs: [\n        \"Deposit tokens to the pool in an imbalance ratio. Only supported by pool with stable swap curve.\",\n      ],\n      accounts: [\n        {\n          name: \"pool\",\n          isMut: true,\n          isSigner: false,\n          docs: [\"Pool account (PDA)\"],\n        },\n        {\n          name: \"lpMint\",\n          isMut: true,\n          isSigner: false,\n          docs: [\"LP token mint of the pool\"],\n        },\n        {\n          name: \"userPoolLp\",\n          isMut: true,\n          isSigner: false,\n          docs: [\n            \"user pool lp token account. lp will be burned from this account upon success liquidity removal.\",\n          ],\n        },\n        {\n          name: \"aVaultLp\",\n          isMut: true,\n          isSigner: false,\n          docs: [\n            \"LP token account of vault A. Used to receive/burn the vault LP upon deposit/withdraw from the vault.\",\n          ],\n        },\n        {\n          name: \"bVaultLp\",\n          isMut: true,\n          isSigner: false,\n          docs: [\n            \"LP token account of vault B. Used to receive/burn the vault LP upon deposit/withdraw from the vault.\",\n          ],\n        },\n        {\n          name: \"aVault\",\n          isMut: true,\n          isSigner: false,\n          docs: [\n            \"Vault account for token a. token a of the pool will be deposit / withdraw from this vault account.\",\n          ],\n        },\n        {\n          name: \"bVault\",\n          isMut: true,\n          isSigner: false,\n          docs: [\n            \"Vault account for token b. token b of the pool will be deposit / withdraw from this vault account.\",\n          ],\n        },\n        {\n          name: \"aVaultLpMint\",\n          isMut: true,\n          isSigner: false,\n          docs: [\"LP token mint of vault a\"],\n        },\n        {\n          name: \"bVaultLpMint\",\n          isMut: true,\n          isSigner: false,\n          docs: [\"LP token mint of vault b\"],\n        },\n        {\n          name: \"aTokenVault\",\n          isMut: true,\n          isSigner: false,\n          docs: [\"Token vault account of vault A\"],\n        },\n        {\n          name: \"bTokenVault\",\n          isMut: true,\n          isSigner: false,\n          docs: [\"Token vault account of vault B\"],\n        },\n        {\n          name: \"userAToken\",\n          isMut: true,\n          isSigner: false,\n          docs: [\n            \"User token A account. Token will be transfer from this account if it is add liquidity operation. Else, token will be transfer into this account.\",\n          ],\n        },\n        {\n          name: \"userBToken\",\n          isMut: true,\n          isSigner: false,\n          docs: [\n            \"User token B account. Token will be transfer from this account if it is add liquidity operation. Else, token will be transfer into this account.\",\n          ],\n        },\n        {\n          name: \"user\",\n          isMut: false,\n          isSigner: true,\n          docs: [\n            \"User account. Must be owner of user_a_token, and user_b_token.\",\n          ],\n        },\n        {\n          name: \"vaultProgram\",\n          isMut: false,\n          isSigner: false,\n          docs: [\n            \"Vault program. the pool will deposit/withdraw liquidity from the vault.\",\n          ],\n        },\n        {\n          name: \"tokenProgram\",\n          isMut: false,\n          isSigner: false,\n          docs: [\"Token program.\"],\n        },\n      ],\n      args: [\n        {\n          name: \"minimumPoolTokenAmount\",\n          type: \"u64\",\n        },\n        {\n          name: \"tokenAAmount\",\n          type: \"u64\",\n        },\n        {\n          name: \"tokenBAmount\",\n          type: \"u64\",\n        },\n      ],\n    },\n    {\n      name: \"removeBalanceLiquidity\",\n      docs: [\n        \"Withdraw tokens from the pool in a balanced ratio. User will still able to withdraw from pool even the pool is disabled. This allow user to exit their liquidity when there's some unforeseen event happen.\",\n      ],\n      accounts: [\n        {\n          name: \"pool\",\n          isMut: true,\n          isSigner: false,\n          docs: [\"Pool account (PDA)\"],\n        },\n        {\n          name: \"lpMint\",\n          isMut: true,\n          isSigner: false,\n          docs: [\"LP token mint of the pool\"],\n        },\n        {\n          name: \"userPoolLp\",\n          isMut: true,\n          isSigner: false,\n          docs: [\n            \"user pool lp token account. lp will be burned from this account upon success liquidity removal.\",\n          ],\n        },\n        {\n          name: \"aVaultLp\",\n          isMut: true,\n          isSigner: false,\n          docs: [\n            \"LP token account of vault A. Used to receive/burn the vault LP upon deposit/withdraw from the vault.\",\n          ],\n        },\n        {\n          name: \"bVaultLp\",\n          isMut: true,\n          isSigner: false,\n          docs: [\n            \"LP token account of vault B. Used to receive/burn the vault LP upon deposit/withdraw from the vault.\",\n          ],\n        },\n        {\n          name: \"aVault\",\n          isMut: true,\n          isSigner: false,\n          docs: [\n            \"Vault account for token a. token a of the pool will be deposit / withdraw from this vault account.\",\n          ],\n        },\n        {\n          name: \"bVault\",\n          isMut: true,\n          isSigner: false,\n          docs: [\n            \"Vault account for token b. token b of the pool will be deposit / withdraw from this vault account.\",\n          ],\n        },\n        {\n          name: \"aVaultLpMint\",\n          isMut: true,\n          isSigner: false,\n          docs: [\"LP token mint of vault a\"],\n        },\n        {\n          name: \"bVaultLpMint\",\n          isMut: true,\n          isSigner: false,\n          docs: [\"LP token mint of vault b\"],\n        },\n        {\n          name: \"aTokenVault\",\n          isMut: true,\n          isSigner: false,\n          docs: [\"Token vault account of vault A\"],\n        },\n        {\n          name: \"bTokenVault\",\n          isMut: true,\n          isSigner: false,\n          docs: [\"Token vault account of vault B\"],\n        },\n        {\n          name: \"userAToken\",\n          isMut: true,\n          isSigner: false,\n          docs: [\n            \"User token A account. Token will be transfer from this account if it is add liquidity operation. Else, token will be transfer into this account.\",\n          ],\n        },\n        {\n          name: \"userBToken\",\n          isMut: true,\n          isSigner: false,\n          docs: [\n            \"User token B account. Token will be transfer from this account if it is add liquidity operation. Else, token will be transfer into this account.\",\n          ],\n        },\n        {\n          name: \"user\",\n          isMut: false,\n          isSigner: true,\n          docs: [\n            \"User account. Must be owner of user_a_token, and user_b_token.\",\n          ],\n        },\n        {\n          name: \"vaultProgram\",\n          isMut: false,\n          isSigner: false,\n          docs: [\n            \"Vault program. the pool will deposit/withdraw liquidity from the vault.\",\n          ],\n        },\n        {\n          name: \"tokenProgram\",\n          isMut: false,\n          isSigner: false,\n          docs: [\"Token program.\"],\n        },\n      ],\n      args: [\n        {\n          name: \"poolTokenAmount\",\n          type: \"u64\",\n        },\n        {\n          name: \"minimumATokenOut\",\n          type: \"u64\",\n        },\n        {\n          name: \"minimumBTokenOut\",\n          type: \"u64\",\n        },\n      ],\n    },\n    {\n      name: \"addBalanceLiquidity\",\n      docs: [\"Deposit tokens to the pool in a balanced ratio.\"],\n      accounts: [\n        {\n          name: \"pool\",\n          isMut: true,\n          isSigner: false,\n          docs: [\"Pool account (PDA)\"],\n        },\n        {\n          name: \"lpMint\",\n          isMut: true,\n          isSigner: false,\n          docs: [\"LP token mint of the pool\"],\n        },\n        {\n          name: \"userPoolLp\",\n          isMut: true,\n          isSigner: false,\n          docs: [\n            \"user pool lp token account. lp will be burned from this account upon success liquidity removal.\",\n          ],\n        },\n        {\n          name: \"aVaultLp\",\n          isMut: true,\n          isSigner: false,\n          docs: [\n            \"LP token account of vault A. Used to receive/burn the vault LP upon deposit/withdraw from the vault.\",\n          ],\n        },\n        {\n          name: \"bVaultLp\",\n          isMut: true,\n          isSigner: false,\n          docs: [\n            \"LP token account of vault B. Used to receive/burn the vault LP upon deposit/withdraw from the vault.\",\n          ],\n        },\n        {\n          name: \"aVault\",\n          isMut: true,\n          isSigner: false,\n          docs: [\n            \"Vault account for token a. token a of the pool will be deposit / withdraw from this vault account.\",\n          ],\n        },\n        {\n          name: \"bVault\",\n          isMut: true,\n          isSigner: false,\n          docs: [\n            \"Vault account for token b. token b of the pool will be deposit / withdraw from this vault account.\",\n          ],\n        },\n        {\n          name: \"aVaultLpMint\",\n          isMut: true,\n          isSigner: false,\n          docs: [\"LP token mint of vault a\"],\n        },\n        {\n          name: \"bVaultLpMint\",\n          isMut: true,\n          isSigner: false,\n          docs: [\"LP token mint of vault b\"],\n        },\n        {\n          name: \"aTokenVault\",\n          isMut: true,\n          isSigner: false,\n          docs: [\"Token vault account of vault A\"],\n        },\n        {\n          name: \"bTokenVault\",\n          isMut: true,\n          isSigner: false,\n          docs: [\"Token vault account of vault B\"],\n        },\n        {\n          name: \"userAToken\",\n          isMut: true,\n          isSigner: false,\n          docs: [\n            \"User token A account. Token will be transfer from this account if it is add liquidity operation. Else, token will be transfer into this account.\",\n          ],\n        },\n        {\n          name: \"userBToken\",\n          isMut: true,\n          isSigner: false,\n          docs: [\n            \"User token B account. Token will be transfer from this account if it is add liquidity operation. Else, token will be transfer into this account.\",\n          ],\n        },\n        {\n          name: \"user\",\n          isMut: false,\n          isSigner: true,\n          docs: [\n            \"User account. Must be owner of user_a_token, and user_b_token.\",\n          ],\n        },\n        {\n          name: \"vaultProgram\",\n          isMut: false,\n          isSigner: false,\n          docs: [\n            \"Vault program. the pool will deposit/withdraw liquidity from the vault.\",\n          ],\n        },\n        {\n          name: \"tokenProgram\",\n          isMut: false,\n          isSigner: false,\n          docs: [\"Token program.\"],\n        },\n      ],\n      args: [\n        {\n          name: \"poolTokenAmount\",\n          type: \"u64\",\n        },\n        {\n          name: \"maximumTokenAAmount\",\n          type: \"u64\",\n        },\n        {\n          name: \"maximumTokenBAmount\",\n          type: \"u64\",\n        },\n      ],\n    },\n    {\n      name: \"setPoolFees\",\n      docs: [\"Update trading fee charged for liquidity provider, and admin.\"],\n      accounts: [\n        {\n          name: \"pool\",\n          isMut: true,\n          isSigner: false,\n          docs: [\"Pool account (PDA)\"],\n        },\n        {\n          name: \"feeOperator\",\n          isMut: false,\n          isSigner: true,\n          docs: [\"Fee operator account\"],\n        },\n      ],\n      args: [\n        {\n          name: \"fees\",\n          type: {\n            defined: \"PoolFees\",\n          },\n        },\n      ],\n    },\n    {\n      name: \"overrideCurveParam\",\n      docs: [\n        \"Update swap curve parameters. This function do not allow update of curve type. For example: stable swap curve to constant product curve. Only supported by pool with stable swap curve.\",\n        \"Only amp is allowed to be override. The other attributes of stable swap curve will be ignored.\",\n      ],\n      accounts: [\n        {\n          name: \"pool\",\n          isMut: true,\n          isSigner: false,\n          docs: [\"Pool account (PDA)\"],\n        },\n        {\n          name: \"admin\",\n          isMut: false,\n          isSigner: true,\n          docs: [\"Admin account.\"],\n        },\n      ],\n      args: [\n        {\n          name: \"curveType\",\n          type: {\n            defined: \"CurveType\",\n          },\n        },\n      ],\n    },\n    {\n      name: \"getPoolInfo\",\n      docs: [\"Get the general information of the pool.\"],\n      accounts: [\n        {\n          name: \"pool\",\n          isMut: false,\n          isSigner: false,\n          docs: [\"Pool account (PDA)\"],\n        },\n        {\n          name: \"lpMint\",\n          isMut: false,\n          isSigner: false,\n          docs: [\"LP token mint of the pool\"],\n        },\n        {\n          name: \"aVaultLp\",\n          isMut: false,\n          isSigner: false,\n          docs: [\n            \"LP token account of vault A. Used to receive/burn the vault LP upon deposit/withdraw from the vault.\",\n          ],\n        },\n        {\n          name: \"bVaultLp\",\n          isMut: false,\n          isSigner: false,\n          docs: [\n            \"LP token account of vault B. Used to receive/burn the vault LP upon deposit/withdraw from the vault.\",\n          ],\n        },\n        {\n          name: \"aVault\",\n          isMut: false,\n          isSigner: false,\n          docs: [\n            \"Vault account for token a. token a of the pool will be deposit / withdraw from this vault account.\",\n          ],\n        },\n        {\n          name: \"bVault\",\n          isMut: false,\n          isSigner: false,\n          docs: [\n            \"Vault account for token b. token b of the pool will be deposit / withdraw from this vault account.\",\n          ],\n        },\n        {\n          name: \"aVaultLpMint\",\n          isMut: false,\n          isSigner: false,\n          docs: [\"LP token mint of vault a\"],\n        },\n        {\n          name: \"bVaultLpMint\",\n          isMut: false,\n          isSigner: false,\n          docs: [\"LP token mint of vault b\"],\n        },\n      ],\n      args: [],\n    },\n    {\n      name: \"bootstrapLiquidity\",\n      docs: [\"Bootstrap the pool when liquidity is depleted.\"],\n      accounts: [\n        {\n          name: \"pool\",\n          isMut: true,\n          isSigner: false,\n          docs: [\"Pool account (PDA)\"],\n        },\n        {\n          name: \"lpMint\",\n          isMut: true,\n          isSigner: false,\n          docs: [\"LP token mint of the pool\"],\n        },\n        {\n          name: \"userPoolLp\",\n          isMut: true,\n          isSigner: false,\n          docs: [\n            \"user pool lp token account. lp will be burned from this account upon success liquidity removal.\",\n          ],\n        },\n        {\n          name: \"aVaultLp\",\n          isMut: true,\n          isSigner: false,\n          docs: [\n            \"LP token account of vault A. Used to receive/burn the vault LP upon deposit/withdraw from the vault.\",\n          ],\n        },\n        {\n          name: \"bVaultLp\",\n          isMut: true,\n          isSigner: false,\n          docs: [\n            \"LP token account of vault B. Used to receive/burn the vault LP upon deposit/withdraw from the vault.\",\n          ],\n        },\n        {\n          name: \"aVault\",\n          isMut: true,\n          isSigner: false,\n          docs: [\n            \"Vault account for token a. token a of the pool will be deposit / withdraw from this vault account.\",\n          ],\n        },\n        {\n          name: \"bVault\",\n          isMut: true,\n          isSigner: false,\n          docs: [\n            \"Vault account for token b. token b of the pool will be deposit / withdraw from this vault account.\",\n          ],\n        },\n        {\n          name: \"aVaultLpMint\",\n          isMut: true,\n          isSigner: false,\n          docs: [\"LP token mint of vault a\"],\n        },\n        {\n          name: \"bVaultLpMint\",\n          isMut: true,\n          isSigner: false,\n          docs: [\"LP token mint of vault b\"],\n        },\n        {\n          name: \"aTokenVault\",\n          isMut: true,\n          isSigner: false,\n          docs: [\"Token vault account of vault A\"],\n        },\n        {\n          name: \"bTokenVault\",\n          isMut: true,\n          isSigner: false,\n          docs: [\"Token vault account of vault B\"],\n        },\n        {\n          name: \"userAToken\",\n          isMut: true,\n          isSigner: false,\n          docs: [\n            \"User token A account. Token will be transfer from this account if it is add liquidity operation. Else, token will be transfer into this account.\",\n          ],\n        },\n        {\n          name: \"userBToken\",\n          isMut: true,\n          isSigner: false,\n          docs: [\n            \"User token B account. Token will be transfer from this account if it is add liquidity operation. Else, token will be transfer into this account.\",\n          ],\n        },\n        {\n          name: \"user\",\n          isMut: false,\n          isSigner: true,\n          docs: [\n            \"User account. Must be owner of user_a_token, and user_b_token.\",\n          ],\n        },\n        {\n          name: \"vaultProgram\",\n          isMut: false,\n          isSigner: false,\n          docs: [\n            \"Vault program. the pool will deposit/withdraw liquidity from the vault.\",\n          ],\n        },\n        {\n          name: \"tokenProgram\",\n          isMut: false,\n          isSigner: false,\n          docs: [\"Token program.\"],\n        },\n      ],\n      args: [\n        {\n          name: \"tokenAAmount\",\n          type: \"u64\",\n        },\n        {\n          name: \"tokenBAmount\",\n          type: \"u64\",\n        },\n      ],\n    },\n    {\n      name: \"createMintMetadata\",\n      docs: [\"Create mint metadata account for old pools\"],\n      accounts: [\n        {\n          name: \"pool\",\n          isMut: false,\n          isSigner: false,\n          docs: [\"Pool account\"],\n        },\n        {\n          name: \"lpMint\",\n          isMut: false,\n          isSigner: false,\n          docs: [\"LP mint account of the pool\"],\n        },\n        {\n          name: \"aVaultLp\",\n          isMut: false,\n          isSigner: false,\n          docs: [\"Vault A LP account of the pool\"],\n        },\n        {\n          name: \"mintMetadata\",\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: \"metadataProgram\",\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: \"systemProgram\",\n          isMut: false,\n          isSigner: false,\n          docs: [\"System program.\"],\n        },\n        {\n          name: \"payer\",\n          isMut: true,\n          isSigner: true,\n          docs: [\"Payer\"],\n        },\n      ],\n      args: [],\n    },\n    {\n      name: \"createLockEscrow\",\n      docs: [\"Create lock account\"],\n      accounts: [\n        {\n          name: \"pool\",\n          isMut: false,\n          isSigner: false,\n          docs: [\"Pool account\"],\n        },\n        {\n          name: \"lockEscrow\",\n          isMut: true,\n          isSigner: false,\n          docs: [\"Lock account\"],\n        },\n        {\n          name: \"owner\",\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: \"lpMint\",\n          isMut: false,\n          isSigner: false,\n          docs: [\"LP token mint of the pool\"],\n        },\n        {\n          name: \"payer\",\n          isMut: true,\n          isSigner: true,\n          docs: [\"Payer account\"],\n        },\n        {\n          name: \"systemProgram\",\n          isMut: false,\n          isSigner: false,\n          docs: [\"System program.\"],\n        },\n      ],\n      args: [],\n    },\n    {\n      name: \"lock\",\n      docs: [\"Lock Lp token\"],\n      accounts: [\n        {\n          name: \"pool\",\n          isMut: true,\n          isSigner: false,\n          docs: [\"Pool account\"],\n        },\n        {\n          name: \"lpMint\",\n          isMut: false,\n          isSigner: false,\n          docs: [\"LP token mint of the pool\"],\n        },\n        {\n          name: \"lockEscrow\",\n          isMut: true,\n          isSigner: false,\n          docs: [\"Lock account\"],\n        },\n        {\n          name: \"owner\",\n          isMut: true,\n          isSigner: true,\n          docs: [\"Can be anyone\"],\n        },\n        {\n          name: \"sourceTokens\",\n          isMut: true,\n          isSigner: false,\n          docs: [\"owner lp token account\"],\n        },\n        {\n          name: \"escrowVault\",\n          isMut: true,\n          isSigner: false,\n          docs: [\"Escrow vault\"],\n        },\n        {\n          name: \"tokenProgram\",\n          isMut: false,\n          isSigner: false,\n          docs: [\"Token program.\"],\n        },\n        {\n          name: \"aVault\",\n          isMut: false,\n          isSigner: false,\n          docs: [\n            \"Vault account for token a. token a of the pool will be deposit / withdraw from this vault account.\",\n          ],\n        },\n        {\n          name: \"bVault\",\n          isMut: false,\n          isSigner: false,\n          docs: [\n            \"Vault account for token b. token b of the pool will be deposit / withdraw from this vault account.\",\n          ],\n        },\n        {\n          name: \"aVaultLp\",\n          isMut: false,\n          isSigner: false,\n          docs: [\n            \"LP token account of vault A. Used to receive/burn the vault LP upon deposit/withdraw from the vault.\",\n          ],\n        },\n        {\n          name: \"bVaultLp\",\n          isMut: false,\n          isSigner: false,\n          docs: [\n            \"LP token account of vault B. Used to receive/burn the vault LP upon deposit/withdraw from the vault.\",\n          ],\n        },\n        {\n          name: \"aVaultLpMint\",\n          isMut: false,\n          isSigner: false,\n          docs: [\"LP token mint of vault a\"],\n        },\n        {\n          name: \"bVaultLpMint\",\n          isMut: false,\n          isSigner: false,\n          docs: [\"LP token mint of vault b\"],\n        },\n      ],\n      args: [\n        {\n          name: \"maxAmount\",\n          type: \"u64\",\n        },\n      ],\n    },\n    {\n      name: \"claimFee\",\n      docs: [\"Claim fee\"],\n      accounts: [\n        {\n          name: \"pool\",\n          isMut: true,\n          isSigner: false,\n          docs: [\"Pool account\"],\n        },\n        {\n          name: \"lpMint\",\n          isMut: true,\n          isSigner: false,\n          docs: [\"LP token mint of the pool\"],\n        },\n        {\n          name: \"lockEscrow\",\n          isMut: true,\n          isSigner: false,\n          docs: [\"Lock account\"],\n        },\n        {\n          name: \"owner\",\n          isMut: true,\n          isSigner: true,\n          docs: [\"Owner of lock account\"],\n        },\n        {\n          name: \"sourceTokens\",\n          isMut: true,\n          isSigner: false,\n          docs: [\"owner lp token account\"],\n        },\n        {\n          name: \"escrowVault\",\n          isMut: true,\n          isSigner: false,\n          docs: [\"Escrow vault\"],\n        },\n        {\n          name: \"tokenProgram\",\n          isMut: false,\n          isSigner: false,\n          docs: [\"Token program.\"],\n        },\n        {\n          name: \"aTokenVault\",\n          isMut: true,\n          isSigner: false,\n          docs: [\"Token vault account of vault A\"],\n        },\n        {\n          name: \"bTokenVault\",\n          isMut: true,\n          isSigner: false,\n          docs: [\"Token vault account of vault B\"],\n        },\n        {\n          name: \"aVault\",\n          isMut: true,\n          isSigner: false,\n          docs: [\n            \"Vault account for token a. token a of the pool will be deposit / withdraw from this vault account.\",\n          ],\n        },\n        {\n          name: \"bVault\",\n          isMut: true,\n          isSigner: false,\n          docs: [\n            \"Vault account for token b. token b of the pool will be deposit / withdraw from this vault account.\",\n          ],\n        },\n        {\n          name: \"aVaultLp\",\n          isMut: true,\n          isSigner: false,\n          docs: [\n            \"LP token account of vault A. Used to receive/burn the vault LP upon deposit/withdraw from the vault.\",\n          ],\n        },\n        {\n          name: \"bVaultLp\",\n          isMut: true,\n          isSigner: false,\n          docs: [\n            \"LP token account of vault B. Used to receive/burn the vault LP upon deposit/withdraw from the vault.\",\n          ],\n        },\n        {\n          name: \"aVaultLpMint\",\n          isMut: true,\n          isSigner: false,\n          docs: [\"LP token mint of vault a\"],\n        },\n        {\n          name: \"bVaultLpMint\",\n          isMut: true,\n          isSigner: false,\n          docs: [\"LP token mint of vault b\"],\n        },\n        {\n          name: \"userAToken\",\n          isMut: true,\n          isSigner: false,\n          docs: [\n            \"User token A account. Token will be transfer from this account if it is add liquidity operation. Else, token will be transfer into this account.\",\n          ],\n        },\n        {\n          name: \"userBToken\",\n          isMut: true,\n          isSigner: false,\n          docs: [\n            \"User token B account. Token will be transfer from this account if it is add liquidity operation. Else, token will be transfer into this account.\",\n          ],\n        },\n        {\n          name: \"vaultProgram\",\n          isMut: false,\n          isSigner: false,\n          docs: [\n            \"Vault program. the pool will deposit/withdraw liquidity from the vault.\",\n          ],\n        },\n      ],\n      args: [\n        {\n          name: \"maxAmount\",\n          type: \"u64\",\n        },\n      ],\n    },\n    {\n      name: \"createConfig\",\n      docs: [\"Create config\"],\n      accounts: [\n        {\n          name: \"config\",\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: \"admin\",\n          isMut: true,\n          isSigner: true,\n        },\n        {\n          name: \"systemProgram\",\n          isMut: false,\n          isSigner: false,\n        },\n      ],\n      args: [\n        {\n          name: \"configParameters\",\n          type: {\n            defined: \"ConfigParameters\",\n          },\n        },\n      ],\n    },\n    {\n      name: \"closeConfig\",\n      docs: [\"Close config\"],\n      accounts: [\n        {\n          name: \"config\",\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: \"admin\",\n          isMut: true,\n          isSigner: true,\n        },\n        {\n          name: \"rentReceiver\",\n          isMut: true,\n          isSigner: false,\n        },\n      ],\n      args: [],\n    },\n    {\n      name: \"initializePermissionlessConstantProductPoolWithConfig\",\n      docs: [\"Initialize permissionless pool with config\"],\n      accounts: [\n        {\n          name: \"pool\",\n          isMut: true,\n          isSigner: false,\n          docs: [\"Pool account (PDA address)\"],\n        },\n        {\n          name: \"config\",\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: \"lpMint\",\n          isMut: true,\n          isSigner: false,\n          docs: [\"LP token mint of the pool\"],\n        },\n        {\n          name: \"tokenAMint\",\n          isMut: false,\n          isSigner: false,\n          docs: [\"Token A mint of the pool. Eg: USDT\"],\n        },\n        {\n          name: \"tokenBMint\",\n          isMut: false,\n          isSigner: false,\n          docs: [\"Token B mint of the pool. Eg: USDC\"],\n        },\n        {\n          name: \"aVault\",\n          isMut: true,\n          isSigner: false,\n          docs: [\n            \"Vault account for token A. Token A of the pool will be deposit / withdraw from this vault account.\",\n          ],\n        },\n        {\n          name: \"bVault\",\n          isMut: true,\n          isSigner: false,\n          docs: [\n            \"Vault account for token B. Token B of the pool will be deposit / withdraw from this vault account.\",\n          ],\n        },\n        {\n          name: \"aTokenVault\",\n          isMut: true,\n          isSigner: false,\n          docs: [\"Token vault account of vault A\"],\n        },\n        {\n          name: \"bTokenVault\",\n          isMut: true,\n          isSigner: false,\n          docs: [\"Token vault account of vault B\"],\n        },\n        {\n          name: \"aVaultLpMint\",\n          isMut: true,\n          isSigner: false,\n          docs: [\"LP token mint of vault A\"],\n        },\n        {\n          name: \"bVaultLpMint\",\n          isMut: true,\n          isSigner: false,\n          docs: [\"LP token mint of vault B\"],\n        },\n        {\n          name: \"aVaultLp\",\n          isMut: true,\n          isSigner: false,\n          docs: [\n            \"LP token account of vault A. Used to receive/burn the vault LP upon deposit/withdraw from the vault.\",\n          ],\n        },\n        {\n          name: \"bVaultLp\",\n          isMut: true,\n          isSigner: false,\n          docs: [\n            \"LP token account of vault B. Used to receive/burn vault LP upon deposit/withdraw from the vault.\",\n          ],\n        },\n        {\n          name: \"payerTokenA\",\n          isMut: true,\n          isSigner: false,\n          docs: [\n            \"Payer token account for pool token A mint. Used to bootstrap the pool with initial liquidity.\",\n          ],\n        },\n        {\n          name: \"payerTokenB\",\n          isMut: true,\n          isSigner: false,\n          docs: [\n            \"Admin token account for pool token B mint. Used to bootstrap the pool with initial liquidity.\",\n          ],\n        },\n        {\n          name: \"payerPoolLp\",\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: \"protocolTokenAFee\",\n          isMut: true,\n          isSigner: false,\n          docs: [\n            \"Protocol fee token account for token A. Used to receive trading fee.\",\n          ],\n        },\n        {\n          name: \"protocolTokenBFee\",\n          isMut: true,\n          isSigner: false,\n          docs: [\n            \"Protocol fee token account for token B. Used to receive trading fee.\",\n          ],\n        },\n        {\n          name: \"payer\",\n          isMut: true,\n          isSigner: true,\n          docs: [\n            \"Admin account. This account will be the admin of the pool, and the payer for PDA during initialize pool.\",\n          ],\n        },\n        {\n          name: \"rent\",\n          isMut: false,\n          isSigner: false,\n          docs: [\"Rent account.\"],\n        },\n        {\n          name: \"mintMetadata\",\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: \"metadataProgram\",\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: \"vaultProgram\",\n          isMut: false,\n          isSigner: false,\n          docs: [\n            \"Vault program. The pool will deposit/withdraw liquidity from the vault.\",\n          ],\n        },\n        {\n          name: \"tokenProgram\",\n          isMut: false,\n          isSigner: false,\n          docs: [\"Token program.\"],\n        },\n        {\n          name: \"associatedTokenProgram\",\n          isMut: false,\n          isSigner: false,\n          docs: [\"Associated token program.\"],\n        },\n        {\n          name: \"systemProgram\",\n          isMut: false,\n          isSigner: false,\n          docs: [\"System program.\"],\n        },\n      ],\n      args: [\n        {\n          name: \"tokenAAmount\",\n          type: \"u64\",\n        },\n        {\n          name: \"tokenBAmount\",\n          type: \"u64\",\n        },\n      ],\n    },\n    {\n      name: \"initializePermissionlessConstantProductPoolWithConfig2\",\n      docs: [\"Initialize permissionless pool with config 2\"],\n      accounts: [\n        {\n          name: \"pool\",\n          isMut: true,\n          isSigner: false,\n          docs: [\"Pool account (PDA address)\"],\n        },\n        {\n          name: \"config\",\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: \"lpMint\",\n          isMut: true,\n          isSigner: false,\n          docs: [\"LP token mint of the pool\"],\n        },\n        {\n          name: \"tokenAMint\",\n          isMut: false,\n          isSigner: false,\n          docs: [\"Token A mint of the pool. Eg: USDT\"],\n        },\n        {\n          name: \"tokenBMint\",\n          isMut: false,\n          isSigner: false,\n          docs: [\"Token B mint of the pool. Eg: USDC\"],\n        },\n        {\n          name: \"aVault\",\n          isMut: true,\n          isSigner: false,\n          docs: [\n            \"Vault account for token A. Token A of the pool will be deposit / withdraw from this vault account.\",\n          ],\n        },\n        {\n          name: \"bVault\",\n          isMut: true,\n          isSigner: false,\n          docs: [\n            \"Vault account for token B. Token B of the pool will be deposit / withdraw from this vault account.\",\n          ],\n        },\n        {\n          name: \"aTokenVault\",\n          isMut: true,\n          isSigner: false,\n          docs: [\"Token vault account of vault A\"],\n        },\n        {\n          name: \"bTokenVault\",\n          isMut: true,\n          isSigner: false,\n          docs: [\"Token vault account of vault B\"],\n        },\n        {\n          name: \"aVaultLpMint\",\n          isMut: true,\n          isSigner: false,\n          docs: [\"LP token mint of vault A\"],\n        },\n        {\n          name: \"bVaultLpMint\",\n          isMut: true,\n          isSigner: false,\n          docs: [\"LP token mint of vault B\"],\n        },\n        {\n          name: \"aVaultLp\",\n          isMut: true,\n          isSigner: false,\n          docs: [\n            \"LP token account of vault A. Used to receive/burn the vault LP upon deposit/withdraw from the vault.\",\n          ],\n        },\n        {\n          name: \"bVaultLp\",\n          isMut: true,\n          isSigner: false,\n          docs: [\n            \"LP token account of vault B. Used to receive/burn vault LP upon deposit/withdraw from the vault.\",\n          ],\n        },\n        {\n          name: \"payerTokenA\",\n          isMut: true,\n          isSigner: false,\n          docs: [\n            \"Payer token account for pool token A mint. Used to bootstrap the pool with initial liquidity.\",\n          ],\n        },\n        {\n          name: \"payerTokenB\",\n          isMut: true,\n          isSigner: false,\n          docs: [\n            \"Admin token account for pool token B mint. Used to bootstrap the pool with initial liquidity.\",\n          ],\n        },\n        {\n          name: \"payerPoolLp\",\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: \"protocolTokenAFee\",\n          isMut: true,\n          isSigner: false,\n          docs: [\n            \"Protocol fee token account for token A. Used to receive trading fee.\",\n          ],\n        },\n        {\n          name: \"protocolTokenBFee\",\n          isMut: true,\n          isSigner: false,\n          docs: [\n            \"Protocol fee token account for token B. Used to receive trading fee.\",\n          ],\n        },\n        {\n          name: \"payer\",\n          isMut: true,\n          isSigner: true,\n          docs: [\n            \"Admin account. This account will be the admin of the pool, and the payer for PDA during initialize pool.\",\n          ],\n        },\n        {\n          name: \"rent\",\n          isMut: false,\n          isSigner: false,\n          docs: [\"Rent account.\"],\n        },\n        {\n          name: \"mintMetadata\",\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: \"metadataProgram\",\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: \"vaultProgram\",\n          isMut: false,\n          isSigner: false,\n          docs: [\n            \"Vault program. The pool will deposit/withdraw liquidity from the vault.\",\n          ],\n        },\n        {\n          name: \"tokenProgram\",\n          isMut: false,\n          isSigner: false,\n          docs: [\"Token program.\"],\n        },\n        {\n          name: \"associatedTokenProgram\",\n          isMut: false,\n          isSigner: false,\n          docs: [\"Associated token program.\"],\n        },\n        {\n          name: \"systemProgram\",\n          isMut: false,\n          isSigner: false,\n          docs: [\"System program.\"],\n        },\n      ],\n      args: [\n        {\n          name: \"tokenAAmount\",\n          type: \"u64\",\n        },\n        {\n          name: \"tokenBAmount\",\n          type: \"u64\",\n        },\n        {\n          name: \"activationPoint\",\n          type: {\n            option: \"u64\",\n          },\n        },\n      ],\n    },\n    {\n      name: \"updateActivationPoint\",\n      docs: [\"Update activation slot\"],\n      accounts: [\n        {\n          name: \"pool\",\n          isMut: true,\n          isSigner: false,\n          docs: [\"Pool account (PDA)\"],\n        },\n        {\n          name: \"admin\",\n          isMut: false,\n          isSigner: true,\n          docs: [\"Admin account.\"],\n        },\n      ],\n      args: [\n        {\n          name: \"newActivationPoint\",\n          type: \"u64\",\n        },\n      ],\n    },\n    {\n      name: \"withdrawProtocolFees\",\n      docs: [\"Withdraw protocol fee\"],\n      accounts: [\n        {\n          name: \"pool\",\n          isMut: false,\n          isSigner: false,\n          docs: [\"Pool account (PDA)\"],\n        },\n        {\n          name: \"aVaultLp\",\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: \"protocolTokenAFee\",\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: \"protocolTokenBFee\",\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: \"treasuryTokenA\",\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: \"treasuryTokenB\",\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: \"tokenProgram\",\n          isMut: false,\n          isSigner: false,\n        },\n      ],\n      args: [],\n    },\n    {\n      name: \"setWhitelistedVault\",\n      docs: [\"Set whitelisted vault\"],\n      accounts: [\n        {\n          name: \"pool\",\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: \"admin\",\n          isMut: false,\n          isSigner: true,\n        },\n      ],\n      args: [\n        {\n          name: \"whitelistedVault\",\n          type: \"publicKey\",\n        },\n      ],\n    },\n  ],\n  accounts: [\n    {\n      name: \"config\",\n      type: {\n        kind: \"struct\",\n        fields: [\n          {\n            name: \"poolFees\",\n            type: {\n              defined: \"PoolFees\",\n            },\n          },\n          {\n            name: \"activationDuration\",\n            type: \"u64\",\n          },\n          {\n            name: \"vaultConfigKey\",\n            type: \"publicKey\",\n          },\n          {\n            name: \"poolCreatorAuthority\",\n            type: \"publicKey\",\n          },\n          {\n            name: \"activationType\",\n            type: \"u8\",\n          },\n          {\n            name: \"padding\",\n            type: {\n              array: [\"u8\", 227],\n            },\n          },\n        ],\n      },\n    },\n    {\n      name: \"lockEscrow\",\n      docs: [\"State of lock escrow account\"],\n      type: {\n        kind: \"struct\",\n        fields: [\n          {\n            name: \"pool\",\n            docs: [\"Pool address\"],\n            type: \"publicKey\",\n          },\n          {\n            name: \"owner\",\n            docs: [\"Owner address\"],\n            type: \"publicKey\",\n          },\n          {\n            name: \"escrowVault\",\n            docs: [\"Vault address, store the lock user lock\"],\n            type: \"publicKey\",\n          },\n          {\n            name: \"bump\",\n            docs: [\"bump, used to sign\"],\n            type: \"u8\",\n          },\n          {\n            name: \"totalLockedAmount\",\n            docs: [\"Total locked amount\"],\n            type: \"u64\",\n          },\n          {\n            name: \"lpPerToken\",\n            docs: [\"Lp per token, virtual price of lp token\"],\n            type: \"u128\",\n          },\n          {\n            name: \"unclaimedFeePending\",\n            docs: [\"Unclaimed fee pending\"],\n            type: \"u64\",\n          },\n          {\n            name: \"aFee\",\n            docs: [\"Total a fee claimed so far\"],\n            type: \"u64\",\n          },\n          {\n            name: \"bFee\",\n            docs: [\"Total b fee claimed so far\"],\n            type: \"u64\",\n          },\n        ],\n      },\n    },\n    {\n      name: \"pool\",\n      docs: [\"State of pool account\"],\n      type: {\n        kind: \"struct\",\n        fields: [\n          {\n            name: \"lpMint\",\n            docs: [\"LP token mint of the pool\"],\n            type: \"publicKey\",\n          },\n          {\n            name: \"tokenAMint\",\n            docs: [\"Token A mint of the pool. Eg: USDT\"],\n            type: \"publicKey\",\n          },\n          {\n            name: \"tokenBMint\",\n            docs: [\"Token B mint of the pool. Eg: USDC\"],\n            type: \"publicKey\",\n          },\n          {\n            name: \"aVault\",\n            docs: [\n              \"Vault account for token A. Token A of the pool will be deposit / withdraw from this vault account.\",\n            ],\n            type: \"publicKey\",\n          },\n          {\n            name: \"bVault\",\n            docs: [\n              \"Vault account for token B. Token B of the pool will be deposit / withdraw from this vault account.\",\n            ],\n            type: \"publicKey\",\n          },\n          {\n            name: \"aVaultLp\",\n            docs: [\n              \"LP token account of vault A. Used to receive/burn the vault LP upon deposit/withdraw from the vault.\",\n            ],\n            type: \"publicKey\",\n          },\n          {\n            name: \"bVaultLp\",\n            docs: [\n              \"LP token account of vault B. Used to receive/burn the vault LP upon deposit/withdraw from the vault.\",\n            ],\n            type: \"publicKey\",\n          },\n          {\n            name: \"aVaultLpBump\",\n            docs: ['\"A\" vault lp bump. Used to create signer seeds.'],\n            type: \"u8\",\n          },\n          {\n            name: \"enabled\",\n            docs: [\n              \"Flag to determine whether the pool is enabled, or disabled.\",\n            ],\n            type: \"bool\",\n          },\n          {\n            name: \"protocolTokenAFee\",\n            docs: [\n              \"Protocol fee token account for token A. Used to receive trading fee.\",\n            ],\n            type: \"publicKey\",\n          },\n          {\n            name: \"protocolTokenBFee\",\n            docs: [\n              \"Protocol fee token account for token B. Used to receive trading fee.\",\n            ],\n            type: \"publicKey\",\n          },\n          {\n            name: \"feeLastUpdatedAt\",\n            docs: [\"Fee last updated timestamp\"],\n            type: \"u64\",\n          },\n          {\n            name: \"padding0\",\n            type: {\n              array: [\"u8\", 24],\n            },\n          },\n          {\n            name: \"fees\",\n            docs: [\"Store the fee charges setting.\"],\n            type: {\n              defined: \"PoolFees\",\n            },\n          },\n          {\n            name: \"poolType\",\n            docs: [\"Pool type\"],\n            type: {\n              defined: \"PoolType\",\n            },\n          },\n          {\n            name: \"stake\",\n            docs: [\"Stake pubkey of SPL stake pool\"],\n            type: \"publicKey\",\n          },\n          {\n            name: \"totalLockedLp\",\n            docs: [\"Total locked lp token\"],\n            type: \"u64\",\n          },\n          {\n            name: \"bootstrapping\",\n            docs: [\"bootstrapping config\"],\n            type: {\n              defined: \"Bootstrapping\",\n            },\n          },\n          {\n            name: \"padding\",\n            docs: [\"Padding for future pool field\"],\n            type: {\n              defined: \"Padding\",\n            },\n          },\n          {\n            name: \"curveType\",\n            docs: [\"The type of the swap curve supported by the pool.\"],\n            type: {\n              defined: \"CurveType\",\n            },\n          },\n        ],\n      },\n    },\n  ],\n  types: [\n    {\n      name: \"TokenMultiplier\",\n      docs: [\n        \"Multiplier for the pool token. Used to normalized token with different decimal into the same precision.\",\n      ],\n      type: {\n        kind: \"struct\",\n        fields: [\n          {\n            name: \"tokenAMultiplier\",\n            docs: [\"Multiplier for token A of the pool.\"],\n            type: \"u64\",\n          },\n          {\n            name: \"tokenBMultiplier\",\n            docs: [\"Multiplier for token B of the pool.\"],\n            type: \"u64\",\n          },\n          {\n            name: \"precisionFactor\",\n            docs: [\n              \"Record the highest token decimal in the pool. For example, Token A is 6 decimal, token B is 9 decimal. This will save value of 9.\",\n            ],\n            type: \"u8\",\n          },\n        ],\n      },\n    },\n    {\n      name: \"PoolFees\",\n      docs: [\"Information regarding fee charges\"],\n      type: {\n        kind: \"struct\",\n        fields: [\n          {\n            name: \"tradeFeeNumerator\",\n            docs: [\n              \"Trade fees are extra token amounts that are held inside the token\",\n              \"accounts during a trade, making the value of liquidity tokens rise.\",\n              \"Trade fee numerator\",\n            ],\n            type: \"u64\",\n          },\n          {\n            name: \"tradeFeeDenominator\",\n            docs: [\"Trade fee denominator\"],\n            type: \"u64\",\n          },\n          {\n            name: \"protocolTradeFeeNumerator\",\n            docs: [\n              \"Protocol trading fees are extra token amounts that are held inside the token\",\n              \"accounts during a trade, with the equivalent in pool tokens minted to\",\n              \"the protocol of the program.\",\n              \"Protocol trade fee numerator\",\n            ],\n            type: \"u64\",\n          },\n          {\n            name: \"protocolTradeFeeDenominator\",\n            docs: [\"Protocol trade fee denominator\"],\n            type: \"u64\",\n          },\n        ],\n      },\n    },\n    {\n      name: \"Depeg\",\n      docs: [\"Contains information for depeg pool\"],\n      type: {\n        kind: \"struct\",\n        fields: [\n          {\n            name: \"baseVirtualPrice\",\n            docs: [\"The virtual price of staking / interest bearing token\"],\n            type: \"u64\",\n          },\n          {\n            name: \"baseCacheUpdated\",\n            docs: [\"The last time base_virtual_price is updated\"],\n            type: \"u64\",\n          },\n          {\n            name: \"depegType\",\n            docs: [\"Type of the depeg pool\"],\n            type: {\n              defined: \"DepegType\",\n            },\n          },\n        ],\n      },\n    },\n    {\n      name: \"ConfigParameters\",\n      type: {\n        kind: \"struct\",\n        fields: [\n          {\n            name: \"tradeFeeNumerator\",\n            type: \"u64\",\n          },\n          {\n            name: \"protocolTradeFeeNumerator\",\n            type: \"u64\",\n          },\n          {\n            name: \"activationDuration\",\n            type: \"u64\",\n          },\n          {\n            name: \"vaultConfigKey\",\n            type: \"publicKey\",\n          },\n          {\n            name: \"poolCreatorAuthority\",\n            type: \"publicKey\",\n          },\n          {\n            name: \"activationType\",\n            type: \"u8\",\n          },\n          {\n            name: \"index\",\n            type: \"u64\",\n          },\n        ],\n      },\n    },\n    {\n      name: \"Padding\",\n      docs: [\"Padding for future pool fields\"],\n      type: {\n        kind: \"struct\",\n        fields: [\n          {\n            name: \"padding0\",\n            docs: [\"Padding 0\"],\n            type: {\n              array: [\"u8\", 14],\n            },\n          },\n          {\n            name: \"padding\",\n            docs: [\"Padding 1\"],\n            type: {\n              array: [\"u128\", 24],\n            },\n          },\n        ],\n      },\n    },\n    {\n      name: \"Bootstrapping\",\n      type: {\n        kind: \"struct\",\n        fields: [\n          {\n            name: \"activationPoint\",\n            docs: [\"Activation point, can be slot or timestamp\"],\n            type: \"u64\",\n          },\n          {\n            name: \"whitelistedVault\",\n            docs: [\n              \"Whitelisted vault to be able to buy pool before activation_point\",\n            ],\n            type: \"publicKey\",\n          },\n          {\n            name: \"poolCreator\",\n            docs: [\n              \"Need to store pool creator in lauch pool, so they can modify liquidity before activation_point\",\n            ],\n            type: \"publicKey\",\n          },\n          {\n            name: \"activationType\",\n            docs: [\"Activation type, 0 means by slot, 1 means by timestamp\"],\n            type: \"u8\",\n          },\n        ],\n      },\n    },\n    {\n      name: \"ActivationType\",\n      docs: [\"Type of the activation\"],\n      type: {\n        kind: \"enum\",\n        variants: [\n          {\n            name: \"Slot\",\n          },\n          {\n            name: \"Timestamp\",\n          },\n        ],\n      },\n    },\n    {\n      name: \"RoundDirection\",\n      docs: [\"Rounding direction\"],\n      type: {\n        kind: \"enum\",\n        variants: [\n          {\n            name: \"Floor\",\n          },\n          {\n            name: \"Ceiling\",\n          },\n        ],\n      },\n    },\n    {\n      name: \"TradeDirection\",\n      docs: [\"Trade (swap) direction\"],\n      type: {\n        kind: \"enum\",\n        variants: [\n          {\n            name: \"AtoB\",\n          },\n          {\n            name: \"BtoA\",\n          },\n        ],\n      },\n    },\n    {\n      name: \"NewCurveType\",\n      docs: [\"Type of the swap curve\"],\n      type: {\n        kind: \"enum\",\n        variants: [\n          {\n            name: \"ConstantProduct\",\n          },\n          {\n            name: \"Stable\",\n            fields: [\n              {\n                name: \"amp\",\n                docs: [\"Amplification coefficient\"],\n                type: \"u64\",\n              },\n              {\n                name: \"token_multiplier\",\n                docs: [\n                  \"Multiplier for the pool token. Used to normalized token with different decimal into the same precision.\",\n                ],\n                type: {\n                  defined: \"TokenMultiplier\",\n                },\n              },\n              {\n                name: \"depeg\",\n                docs: [\n                  \"Depeg pool information. Contains functions to allow token amount to be repeg using stake / interest bearing token virtual price\",\n                ],\n                type: {\n                  defined: \"Depeg\",\n                },\n              },\n              {\n                name: \"last_amp_updated_timestamp\",\n                docs: [\n                  \"The last amp updated timestamp. Used to prevent update_curve_info called infinitely many times within a short period\",\n                ],\n                type: \"u64\",\n              },\n            ],\n          },\n          {\n            name: \"NewCurve\",\n            fields: [\n              {\n                name: \"field_one\",\n                type: \"u64\",\n              },\n              {\n                name: \"field_two\",\n                type: \"u64\",\n              },\n            ],\n          },\n        ],\n      },\n    },\n    {\n      name: \"CurveType\",\n      docs: [\"Type of the swap curve\"],\n      type: {\n        kind: \"enum\",\n        variants: [\n          {\n            name: \"ConstantProduct\",\n          },\n          {\n            name: \"Stable\",\n            fields: [\n              {\n                name: \"amp\",\n                docs: [\"Amplification coefficient\"],\n                type: \"u64\",\n              },\n              {\n                name: \"token_multiplier\",\n                docs: [\n                  \"Multiplier for the pool token. Used to normalized token with different decimal into the same precision.\",\n                ],\n                type: {\n                  defined: \"TokenMultiplier\",\n                },\n              },\n              {\n                name: \"depeg\",\n                docs: [\n                  \"Depeg pool information. Contains functions to allow token amount to be repeg using stake / interest bearing token virtual price\",\n                ],\n                type: {\n                  defined: \"Depeg\",\n                },\n              },\n              {\n                name: \"last_amp_updated_timestamp\",\n                docs: [\n                  \"The last amp updated timestamp. Used to prevent update_curve_info called infinitely many times within a short period\",\n                ],\n                type: \"u64\",\n              },\n            ],\n          },\n        ],\n      },\n    },\n    {\n      name: \"DepegType\",\n      docs: [\"Type of depeg pool\"],\n      type: {\n        kind: \"enum\",\n        variants: [\n          {\n            name: \"None\",\n          },\n          {\n            name: \"Marinade\",\n          },\n          {\n            name: \"Lido\",\n          },\n          {\n            name: \"SplStake\",\n          },\n        ],\n      },\n    },\n    {\n      name: \"Rounding\",\n      docs: [\"Round up, down\"],\n      type: {\n        kind: \"enum\",\n        variants: [\n          {\n            name: \"Up\",\n          },\n          {\n            name: \"Down\",\n          },\n        ],\n      },\n    },\n    {\n      name: \"PoolType\",\n      docs: [\"Pool type\"],\n      type: {\n        kind: \"enum\",\n        variants: [\n          {\n            name: \"Permissioned\",\n          },\n          {\n            name: \"Permissionless\",\n          },\n        ],\n      },\n    },\n  ],\n  events: [\n    {\n      name: \"AddLiquidity\",\n      fields: [\n        {\n          name: \"lpMintAmount\",\n          type: \"u64\",\n          index: false,\n        },\n        {\n          name: \"tokenAAmount\",\n          type: \"u64\",\n          index: false,\n        },\n        {\n          name: \"tokenBAmount\",\n          type: \"u64\",\n          index: false,\n        },\n      ],\n    },\n    {\n      name: \"RemoveLiquidity\",\n      fields: [\n        {\n          name: \"lpUnmintAmount\",\n          type: \"u64\",\n          index: false,\n        },\n        {\n          name: \"tokenAOutAmount\",\n          type: \"u64\",\n          index: false,\n        },\n        {\n          name: \"tokenBOutAmount\",\n          type: \"u64\",\n          index: false,\n        },\n      ],\n    },\n    {\n      name: \"BootstrapLiquidity\",\n      fields: [\n        {\n          name: \"lpMintAmount\",\n          type: \"u64\",\n          index: false,\n        },\n        {\n          name: \"tokenAAmount\",\n          type: \"u64\",\n          index: false,\n        },\n        {\n          name: \"tokenBAmount\",\n          type: \"u64\",\n          index: false,\n        },\n        {\n          name: \"pool\",\n          type: \"publicKey\",\n          index: false,\n        },\n      ],\n    },\n    {\n      name: \"Swap\",\n      fields: [\n        {\n          name: \"inAmount\",\n          type: \"u64\",\n          index: false,\n        },\n        {\n          name: \"outAmount\",\n          type: \"u64\",\n          index: false,\n        },\n        {\n          name: \"tradeFee\",\n          type: \"u64\",\n          index: false,\n        },\n        {\n          name: \"protocolFee\",\n          type: \"u64\",\n          index: false,\n        },\n        {\n          name: \"hostFee\",\n          type: \"u64\",\n          index: false,\n        },\n      ],\n    },\n    {\n      name: \"SetPoolFees\",\n      fields: [\n        {\n          name: \"tradeFeeNumerator\",\n          type: \"u64\",\n          index: false,\n        },\n        {\n          name: \"tradeFeeDenominator\",\n          type: \"u64\",\n          index: false,\n        },\n        {\n          name: \"protocolTradeFeeNumerator\",\n          type: \"u64\",\n          index: false,\n        },\n        {\n          name: \"protocolTradeFeeDenominator\",\n          type: \"u64\",\n          index: false,\n        },\n        {\n          name: \"pool\",\n          type: \"publicKey\",\n          index: false,\n        },\n      ],\n    },\n    {\n      name: \"PoolInfo\",\n      fields: [\n        {\n          name: \"tokenAAmount\",\n          type: \"u64\",\n          index: false,\n        },\n        {\n          name: \"tokenBAmount\",\n          type: \"u64\",\n          index: false,\n        },\n        {\n          name: \"virtualPrice\",\n          type: \"f64\",\n          index: false,\n        },\n        {\n          name: \"currentTimestamp\",\n          type: \"u64\",\n          index: false,\n        },\n      ],\n    },\n    {\n      name: \"TransferAdmin\",\n      fields: [\n        {\n          name: \"admin\",\n          type: \"publicKey\",\n          index: false,\n        },\n        {\n          name: \"newAdmin\",\n          type: \"publicKey\",\n          index: false,\n        },\n        {\n          name: \"pool\",\n          type: \"publicKey\",\n          index: false,\n        },\n      ],\n    },\n    {\n      name: \"OverrideCurveParam\",\n      fields: [\n        {\n          name: \"newAmp\",\n          type: \"u64\",\n          index: false,\n        },\n        {\n          name: \"updatedTimestamp\",\n          type: \"u64\",\n          index: false,\n        },\n        {\n          name: \"pool\",\n          type: \"publicKey\",\n          index: false,\n        },\n      ],\n    },\n    {\n      name: \"PoolCreated\",\n      fields: [\n        {\n          name: \"lpMint\",\n          type: \"publicKey\",\n          index: false,\n        },\n        {\n          name: \"tokenAMint\",\n          type: \"publicKey\",\n          index: false,\n        },\n        {\n          name: \"tokenBMint\",\n          type: \"publicKey\",\n          index: false,\n        },\n        {\n          name: \"poolType\",\n          type: {\n            defined: \"PoolType\",\n          },\n          index: false,\n        },\n        {\n          name: \"pool\",\n          type: \"publicKey\",\n          index: false,\n        },\n      ],\n    },\n    {\n      name: \"PoolEnabled\",\n      fields: [\n        {\n          name: \"pool\",\n          type: \"publicKey\",\n          index: false,\n        },\n        {\n          name: \"enabled\",\n          type: \"bool\",\n          index: false,\n        },\n      ],\n    },\n    {\n      name: \"MigrateFeeAccount\",\n      fields: [\n        {\n          name: \"pool\",\n          type: \"publicKey\",\n          index: false,\n        },\n        {\n          name: \"newAdminTokenAFee\",\n          type: \"publicKey\",\n          index: false,\n        },\n        {\n          name: \"newAdminTokenBFee\",\n          type: \"publicKey\",\n          index: false,\n        },\n        {\n          name: \"tokenAAmount\",\n          type: \"u64\",\n          index: false,\n        },\n        {\n          name: \"tokenBAmount\",\n          type: \"u64\",\n          index: false,\n        },\n      ],\n    },\n    {\n      name: \"CreateLockEscrow\",\n      fields: [\n        {\n          name: \"pool\",\n          type: \"publicKey\",\n          index: false,\n        },\n        {\n          name: \"owner\",\n          type: \"publicKey\",\n          index: false,\n        },\n      ],\n    },\n    {\n      name: \"Lock\",\n      fields: [\n        {\n          name: \"pool\",\n          type: \"publicKey\",\n          index: false,\n        },\n        {\n          name: \"owner\",\n          type: \"publicKey\",\n          index: false,\n        },\n        {\n          name: \"amount\",\n          type: \"u64\",\n          index: false,\n        },\n      ],\n    },\n    {\n      name: \"ClaimFee\",\n      fields: [\n        {\n          name: \"pool\",\n          type: \"publicKey\",\n          index: false,\n        },\n        {\n          name: \"owner\",\n          type: \"publicKey\",\n          index: false,\n        },\n        {\n          name: \"amount\",\n          type: \"u64\",\n          index: false,\n        },\n        {\n          name: \"aFee\",\n          type: \"u64\",\n          index: false,\n        },\n        {\n          name: \"bFee\",\n          type: \"u64\",\n          index: false,\n        },\n      ],\n    },\n    {\n      name: \"CreateConfig\",\n      fields: [\n        {\n          name: \"tradeFeeNumerator\",\n          type: \"u64\",\n          index: false,\n        },\n        {\n          name: \"protocolTradeFeeNumerator\",\n          type: \"u64\",\n          index: false,\n        },\n        {\n          name: \"config\",\n          type: \"publicKey\",\n          index: false,\n        },\n      ],\n    },\n    {\n      name: \"CloseConfig\",\n      fields: [\n        {\n          name: \"config\",\n          type: \"publicKey\",\n          index: false,\n        },\n      ],\n    },\n    {\n      name: \"WithdrawProtocolFees\",\n      fields: [\n        {\n          name: \"pool\",\n          type: \"publicKey\",\n          index: false,\n        },\n        {\n          name: \"protocolAFee\",\n          type: \"u64\",\n          index: false,\n        },\n        {\n          name: \"protocolBFee\",\n          type: \"u64\",\n          index: false,\n        },\n        {\n          name: \"protocolAFeeOwner\",\n          type: \"publicKey\",\n          index: false,\n        },\n        {\n          name: \"protocolBFeeOwner\",\n          type: \"publicKey\",\n          index: false,\n        },\n      ],\n    },\n  ],\n  errors: [\n    {\n      code: 6000,\n      name: \"MathOverflow\",\n      msg: \"Math operation overflow\",\n    },\n    {\n      code: 6001,\n      name: \"InvalidFee\",\n      msg: \"Invalid fee setup\",\n    },\n    {\n      code: 6002,\n      name: \"InvalidInvariant\",\n      msg: \"Invalid invariant d\",\n    },\n    {\n      code: 6003,\n      name: \"FeeCalculationFailure\",\n      msg: \"Fee calculation failure\",\n    },\n    {\n      code: 6004,\n      name: \"ExceededSlippage\",\n      msg: \"Exceeded slippage tolerance\",\n    },\n    {\n      code: 6005,\n      name: \"InvalidCalculation\",\n      msg: \"Invalid curve calculation\",\n    },\n    {\n      code: 6006,\n      name: \"ZeroTradingTokens\",\n      msg: \"Given pool token amount results in zero trading tokens\",\n    },\n    {\n      code: 6007,\n      name: \"ConversionError\",\n      msg: \"Math conversion overflow\",\n    },\n    {\n      code: 6008,\n      name: \"FaultyLpMint\",\n      msg: \"LP mint authority must be 'A' vault lp, without freeze authority, and 0 supply\",\n    },\n    {\n      code: 6009,\n      name: \"MismatchedTokenMint\",\n      msg: \"Token mint mismatched\",\n    },\n    {\n      code: 6010,\n      name: \"MismatchedLpMint\",\n      msg: \"LP mint mismatched\",\n    },\n    {\n      code: 6011,\n      name: \"MismatchedOwner\",\n      msg: \"Invalid lp token owner\",\n    },\n    {\n      code: 6012,\n      name: \"InvalidVaultAccount\",\n      msg: \"Invalid vault account\",\n    },\n    {\n      code: 6013,\n      name: \"InvalidVaultLpAccount\",\n      msg: \"Invalid vault lp account\",\n    },\n    {\n      code: 6014,\n      name: \"InvalidPoolLpMintAccount\",\n      msg: \"Invalid pool lp mint account\",\n    },\n    {\n      code: 6015,\n      name: \"PoolDisabled\",\n      msg: \"Pool disabled\",\n    },\n    {\n      code: 6016,\n      name: \"InvalidAdminAccount\",\n      msg: \"Invalid admin account\",\n    },\n    {\n      code: 6017,\n      name: \"InvalidProtocolFeeAccount\",\n      msg: \"Invalid protocol fee account\",\n    },\n    {\n      code: 6018,\n      name: \"SameAdminAccount\",\n      msg: \"Same admin account\",\n    },\n    {\n      code: 6019,\n      name: \"IdenticalSourceDestination\",\n      msg: \"Identical user source and destination token account\",\n    },\n    {\n      code: 6020,\n      name: \"ApyCalculationError\",\n      msg: \"Apy calculation error\",\n    },\n    {\n      code: 6021,\n      name: \"InsufficientSnapshot\",\n      msg: \"Insufficient virtual price snapshot\",\n    },\n    {\n      code: 6022,\n      name: \"NonUpdatableCurve\",\n      msg: \"Current curve is non-updatable\",\n    },\n    {\n      code: 6023,\n      name: \"MisMatchedCurve\",\n      msg: \"New curve is mismatched with old curve\",\n    },\n    {\n      code: 6024,\n      name: \"InvalidAmplification\",\n      msg: \"Amplification is invalid\",\n    },\n    {\n      code: 6025,\n      name: \"UnsupportedOperation\",\n      msg: \"Operation is not supported\",\n    },\n    {\n      code: 6026,\n      name: \"ExceedMaxAChanges\",\n      msg: \"Exceed max amplification changes\",\n    },\n    {\n      code: 6027,\n      name: \"InvalidRemainingAccountsLen\",\n      msg: \"Invalid remaining accounts length\",\n    },\n    {\n      code: 6028,\n      name: \"InvalidRemainingAccounts\",\n      msg: \"Invalid remaining account\",\n    },\n    {\n      code: 6029,\n      name: \"MismatchedDepegMint\",\n      msg: \"Token mint B doesn't matches depeg type token mint\",\n    },\n    {\n      code: 6030,\n      name: \"InvalidApyAccount\",\n      msg: \"Invalid APY account\",\n    },\n    {\n      code: 6031,\n      name: \"InvalidTokenMultiplier\",\n      msg: \"Invalid token multiplier\",\n    },\n    {\n      code: 6032,\n      name: \"InvalidDepegInformation\",\n      msg: \"Invalid depeg information\",\n    },\n    {\n      code: 6033,\n      name: \"UpdateTimeConstraint\",\n      msg: \"Update time constraint violated\",\n    },\n    {\n      code: 6034,\n      name: \"ExceedMaxFeeBps\",\n      msg: \"Exceeded max fee bps\",\n    },\n    {\n      code: 6035,\n      name: \"InvalidAdmin\",\n      msg: \"Invalid admin\",\n    },\n    {\n      code: 6036,\n      name: \"PoolIsNotPermissioned\",\n      msg: \"Pool is not permissioned\",\n    },\n    {\n      code: 6037,\n      name: \"InvalidDepositAmount\",\n      msg: \"Invalid deposit amount\",\n    },\n    {\n      code: 6038,\n      name: \"InvalidFeeOwner\",\n      msg: \"Invalid fee owner\",\n    },\n    {\n      code: 6039,\n      name: \"NonDepletedPool\",\n      msg: \"Pool is not depleted\",\n    },\n    {\n      code: 6040,\n      name: \"AmountNotPeg\",\n      msg: \"Token amount is not 1:1\",\n    },\n    {\n      code: 6041,\n      name: \"AmountIsZero\",\n      msg: \"Amount is zero\",\n    },\n    {\n      code: 6042,\n      name: \"TypeCastFailed\",\n      msg: \"Type cast error\",\n    },\n    {\n      code: 6043,\n      name: \"AmountIsNotEnough\",\n      msg: \"Amount is not enough\",\n    },\n    {\n      code: 6044,\n      name: \"InvalidActivationDuration\",\n      msg: \"Invalid activation duration\",\n    },\n    {\n      code: 6045,\n      name: \"PoolIsNotLaunchPool\",\n      msg: \"Pool is not launch pool\",\n    },\n    {\n      code: 6046,\n      name: \"UnableToModifyActivationPoint\",\n      msg: \"Unable to modify activation point\",\n    },\n    {\n      code: 6047,\n      name: \"InvalidAuthorityToCreateThePool\",\n      msg: \"Invalid authority to create the pool\",\n    },\n    {\n      code: 6048,\n      name: \"InvalidActivationType\",\n      msg: \"Invalid activation type\",\n    },\n    {\n      code: 6049,\n      name: \"InvalidActivationPoint\",\n      msg: \"Invalid activation point\",\n    },\n    {\n      code: 6050,\n      name: \"PreActivationSwapStarted\",\n      msg: \"Pre activation swap window started\",\n    },\n    {\n      code: 6051,\n      name: \"InvalidPoolType\",\n      msg: \"Invalid pool type\",\n    },\n  ],\n};\n","export type Vault = {\n    \"version\": \"0.9.1\",\n    \"name\": \"vault\",\n    \"docs\": [\n      \"Program for vault\"\n    ],\n    \"instructions\": [\n      {\n        \"name\": \"initialize\",\n        \"docs\": [\n          \"initialize new vault\"\n        ],\n        \"accounts\": [\n          {\n            \"name\": \"vault\",\n            \"isMut\": true,\n            \"isSigner\": false,\n            \"docs\": [\n              \"This is base account for all vault\",\n              \"No need base key now because we only allow 1 vault per token now\",\n              \"Vault account\"\n            ]\n          },\n          {\n            \"name\": \"payer\",\n            \"isMut\": true,\n            \"isSigner\": true,\n            \"docs\": [\n              \"Payer can be anyone\"\n            ]\n          },\n          {\n            \"name\": \"tokenVault\",\n            \"isMut\": true,\n            \"isSigner\": false,\n            \"docs\": [\n              \"Token vault account\"\n            ]\n          },\n          {\n            \"name\": \"tokenMint\",\n            \"isMut\": false,\n            \"isSigner\": false,\n            \"docs\": [\n              \"Token mint account\"\n            ]\n          },\n          {\n            \"name\": \"lpMint\",\n            \"isMut\": true,\n            \"isSigner\": false,\n            \"docs\": [\n              \"LP mint account\"\n            ]\n          },\n          {\n            \"name\": \"rent\",\n            \"isMut\": false,\n            \"isSigner\": false,\n            \"docs\": [\n              \"rent\"\n            ]\n          },\n          {\n            \"name\": \"tokenProgram\",\n            \"isMut\": false,\n            \"isSigner\": false,\n            \"docs\": [\n              \"token_program\"\n            ]\n          },\n          {\n            \"name\": \"systemProgram\",\n            \"isMut\": false,\n            \"isSigner\": false,\n            \"docs\": [\n              \"system_program\"\n            ]\n          }\n        ],\n        \"args\": []\n      },\n      {\n        \"name\": \"initializeIdleVault\",\n        \"docs\": [\n          \"initialize idle vault the vault that cannot be rebalanced\"\n        ],\n        \"accounts\": [\n          {\n            \"name\": \"vault\",\n            \"isMut\": true,\n            \"isSigner\": false,\n            \"docs\": [\n              \"Vault account\"\n            ]\n          },\n          {\n            \"name\": \"payer\",\n            \"isMut\": true,\n            \"isSigner\": true,\n            \"docs\": [\n              \"Payer can be anyone\"\n            ]\n          },\n          {\n            \"name\": \"tokenVault\",\n            \"isMut\": true,\n            \"isSigner\": false,\n            \"docs\": [\n              \"Token vault account\"\n            ]\n          },\n          {\n            \"name\": \"tokenMint\",\n            \"isMut\": false,\n            \"isSigner\": false,\n            \"docs\": [\n              \"Token mint account\"\n            ]\n          },\n          {\n            \"name\": \"lpMint\",\n            \"isMut\": true,\n            \"isSigner\": false,\n            \"docs\": [\n              \"LP mint\"\n            ]\n          },\n          {\n            \"name\": \"rent\",\n            \"isMut\": false,\n            \"isSigner\": false,\n            \"docs\": [\n              \"rent\"\n            ]\n          },\n          {\n            \"name\": \"tokenProgram\",\n            \"isMut\": false,\n            \"isSigner\": false,\n            \"docs\": [\n              \"token_program\"\n            ]\n          },\n          {\n            \"name\": \"systemProgram\",\n            \"isMut\": false,\n            \"isSigner\": false,\n            \"docs\": [\n              \"system_program\"\n            ]\n          }\n        ],\n        \"args\": []\n      },\n      {\n        \"name\": \"enableVault\",\n        \"docs\": [\n          \"enable vault\"\n        ],\n        \"accounts\": [\n          {\n            \"name\": \"vault\",\n            \"isMut\": true,\n            \"isSigner\": false,\n            \"docs\": [\n              \"Vault account\"\n            ]\n          },\n          {\n            \"name\": \"admin\",\n            \"isMut\": false,\n            \"isSigner\": true,\n            \"docs\": [\n              \"Admin account\"\n            ]\n          }\n        ],\n        \"args\": [\n          {\n            \"name\": \"enabled\",\n            \"type\": \"u8\"\n          }\n        ]\n      },\n      {\n        \"name\": \"setOperator\",\n        \"docs\": [\n          \"set new operator\"\n        ],\n        \"accounts\": [\n          {\n            \"name\": \"vault\",\n            \"isMut\": true,\n            \"isSigner\": false,\n            \"docs\": [\n              \"Vault account\"\n            ]\n          },\n          {\n            \"name\": \"operator\",\n            \"isMut\": false,\n            \"isSigner\": false\n          },\n          {\n            \"name\": \"admin\",\n            \"isMut\": false,\n            \"isSigner\": true,\n            \"docs\": [\n              \"admin\"\n            ]\n          }\n        ],\n        \"args\": []\n      },\n      {\n        \"name\": \"updateLockedProfitDegradation\",\n        \"docs\": [\n          \"update locked profit degradation\"\n        ],\n        \"accounts\": [\n          {\n            \"name\": \"vault\",\n            \"isMut\": true,\n            \"isSigner\": false,\n            \"docs\": [\n              \"Vault account\"\n            ]\n          },\n          {\n            \"name\": \"admin\",\n            \"isMut\": false,\n            \"isSigner\": true,\n            \"docs\": [\n              \"Admin account\"\n            ]\n          }\n        ],\n        \"args\": [\n          {\n            \"name\": \"lockedProfitDegradation\",\n            \"type\": \"u64\"\n          }\n        ]\n      },\n      {\n        \"name\": \"getUnlockedAmount\",\n        \"docs\": [\n          \"get unlocked amount\"\n        ],\n        \"accounts\": [\n          {\n            \"name\": \"vault\",\n            \"isMut\": false,\n            \"isSigner\": false,\n            \"docs\": [\n              \"Vault account\"\n            ]\n          }\n        ],\n        \"args\": []\n      },\n      {\n        \"name\": \"transferAdmin\",\n        \"docs\": [\n          \"transfer admin\"\n        ],\n        \"accounts\": [\n          {\n            \"name\": \"vault\",\n            \"isMut\": true,\n            \"isSigner\": false,\n            \"docs\": [\n              \"Vault account\"\n            ]\n          },\n          {\n            \"name\": \"admin\",\n            \"isMut\": false,\n            \"isSigner\": true,\n            \"docs\": [\n              \"Admin account\"\n            ]\n          },\n          {\n            \"name\": \"newAdmin\",\n            \"isMut\": false,\n            \"isSigner\": true,\n            \"docs\": [\n              \"New vault admin\"\n            ]\n          }\n        ],\n        \"args\": []\n      },\n      {\n        \"name\": \"transferFeeVault\",\n        \"docs\": [\n          \"transfer fee account\"\n        ],\n        \"accounts\": [\n          {\n            \"name\": \"vault\",\n            \"isMut\": true,\n            \"isSigner\": false,\n            \"docs\": [\n              \"Vault account\"\n            ]\n          },\n          {\n            \"name\": \"admin\",\n            \"isMut\": false,\n            \"isSigner\": true,\n            \"docs\": [\n              \"Admin account\"\n            ]\n          },\n          {\n            \"name\": \"newFeeVault\",\n            \"isMut\": false,\n            \"isSigner\": false,\n            \"docs\": [\n              \"New fee vault account\"\n            ]\n          }\n        ],\n        \"args\": []\n      },\n      {\n        \"name\": \"initializeStrategy\",\n        \"docs\": [\n          \"Initialize a strategy and add strategy to vault.strategies index\"\n        ],\n        \"accounts\": [\n          {\n            \"name\": \"vault\",\n            \"isMut\": true,\n            \"isSigner\": false,\n            \"docs\": [\n              \"Vault account\"\n            ]\n          },\n          {\n            \"name\": \"strategyProgram\",\n            \"isMut\": false,\n            \"isSigner\": false\n          },\n          {\n            \"name\": \"strategy\",\n            \"isMut\": true,\n            \"isSigner\": false,\n            \"docs\": [\n              \"Strategy account\"\n            ]\n          },\n          {\n            \"name\": \"reserve\",\n            \"isMut\": true,\n            \"isSigner\": false\n          },\n          {\n            \"name\": \"collateralVault\",\n            \"isMut\": true,\n            \"isSigner\": false,\n            \"docs\": [\n              \"Collateral vault account\"\n            ]\n          },\n          {\n            \"name\": \"collateralMint\",\n            \"isMut\": false,\n            \"isSigner\": false,\n            \"docs\": [\n              \"Collateral mint account\"\n            ]\n          },\n          {\n            \"name\": \"admin\",\n            \"isMut\": true,\n            \"isSigner\": true,\n            \"docs\": [\n              \"Admin account\"\n            ]\n          },\n          {\n            \"name\": \"systemProgram\",\n            \"isMut\": false,\n            \"isSigner\": false,\n            \"docs\": [\n              \"System program account\"\n            ]\n          },\n          {\n            \"name\": \"rent\",\n            \"isMut\": false,\n            \"isSigner\": false,\n            \"docs\": [\n              \"Rent account\"\n            ]\n          },\n          {\n            \"name\": \"tokenProgram\",\n            \"isMut\": false,\n            \"isSigner\": false,\n            \"docs\": [\n              \"Token program account\"\n            ]\n          }\n        ],\n        \"args\": [\n          {\n            \"name\": \"bumps\",\n            \"type\": {\n              \"defined\": \"StrategyBumps\"\n            }\n          },\n          {\n            \"name\": \"strategyType\",\n            \"type\": {\n              \"defined\": \"StrategyType\"\n            }\n          }\n        ]\n      },\n      {\n        \"name\": \"removeStrategy\",\n        \"docs\": [\n          \"remove a strategy\"\n        ],\n        \"accounts\": [\n          {\n            \"name\": \"vault\",\n            \"isMut\": true,\n            \"isSigner\": false,\n            \"docs\": [\n              \"Vault account\"\n            ]\n          },\n          {\n            \"name\": \"strategy\",\n            \"isMut\": true,\n            \"isSigner\": false,\n            \"docs\": [\n              \"Strategy account\"\n            ]\n          },\n          {\n            \"name\": \"strategyProgram\",\n            \"isMut\": false,\n            \"isSigner\": false\n          },\n          {\n            \"name\": \"collateralVault\",\n            \"isMut\": true,\n            \"isSigner\": false,\n            \"docs\": [\n              \"Collateral vault account\"\n            ]\n          },\n          {\n            \"name\": \"reserve\",\n            \"isMut\": true,\n            \"isSigner\": false\n          },\n          {\n            \"name\": \"tokenVault\",\n            \"isMut\": true,\n            \"isSigner\": false,\n            \"docs\": [\n              \"token_vault\"\n            ]\n          },\n          {\n            \"name\": \"feeVault\",\n            \"isMut\": true,\n            \"isSigner\": false,\n            \"docs\": [\n              \"fee_vault\"\n            ]\n          },\n          {\n            \"name\": \"lpMint\",\n            \"isMut\": true,\n            \"isSigner\": false,\n            \"docs\": [\n              \"lp_mint\"\n            ]\n          },\n          {\n            \"name\": \"tokenProgram\",\n            \"isMut\": false,\n            \"isSigner\": false,\n            \"docs\": [\n              \"token_program\"\n            ]\n          },\n          {\n            \"name\": \"admin\",\n            \"isMut\": false,\n            \"isSigner\": true,\n            \"docs\": [\n              \"admin\"\n            ]\n          }\n        ],\n        \"args\": []\n      },\n      {\n        \"name\": \"removeStrategy2\",\n        \"docs\": [\n          \"remove a strategy by advance payment\"\n        ],\n        \"accounts\": [\n          {\n            \"name\": \"vault\",\n            \"isMut\": true,\n            \"isSigner\": false,\n            \"docs\": [\n              \"Vault account\"\n            ]\n          },\n          {\n            \"name\": \"strategy\",\n            \"isMut\": true,\n            \"isSigner\": false,\n            \"docs\": [\n              \"Strategy account\"\n            ]\n          },\n          {\n            \"name\": \"strategyProgram\",\n            \"isMut\": false,\n            \"isSigner\": false\n          },\n          {\n            \"name\": \"collateralVault\",\n            \"isMut\": true,\n            \"isSigner\": false,\n            \"docs\": [\n              \"Collateral vault account\"\n            ]\n          },\n          {\n            \"name\": \"reserve\",\n            \"isMut\": true,\n            \"isSigner\": false\n          },\n          {\n            \"name\": \"tokenVault\",\n            \"isMut\": true,\n            \"isSigner\": false,\n            \"docs\": [\n              \"token_vault\"\n            ]\n          },\n          {\n            \"name\": \"tokenAdminAdvancePayment\",\n            \"isMut\": true,\n            \"isSigner\": false,\n            \"docs\": [\n              \"token_advance_payemnt\",\n              \"the owner of token_advance_payment must be admin\"\n            ]\n          },\n          {\n            \"name\": \"tokenVaultAdvancePayment\",\n            \"isMut\": true,\n            \"isSigner\": false,\n            \"docs\": [\n              \"token_vault_advance_payment\",\n              \"the account must be different from token_vault\",\n              \"the owner of token_advance_payment must be vault\"\n            ]\n          },\n          {\n            \"name\": \"feeVault\",\n            \"isMut\": true,\n            \"isSigner\": false,\n            \"docs\": [\n              \"fee_vault\"\n            ]\n          },\n          {\n            \"name\": \"lpMint\",\n            \"isMut\": true,\n            \"isSigner\": false,\n            \"docs\": [\n              \"lp_mint\"\n            ]\n          },\n          {\n            \"name\": \"tokenProgram\",\n            \"isMut\": false,\n            \"isSigner\": false,\n            \"docs\": [\n              \"token_program\"\n            ]\n          },\n          {\n            \"name\": \"admin\",\n            \"isMut\": false,\n            \"isSigner\": true,\n            \"docs\": [\n              \"admin\"\n            ]\n          }\n        ],\n        \"args\": [\n          {\n            \"name\": \"maxAdminPayAmount\",\n            \"type\": \"u64\"\n          }\n        ]\n      },\n      {\n        \"name\": \"collectDust\",\n        \"docs\": [\n          \"collect token, that someone send wrongly\",\n          \"also help in case Mango reimbursement\"\n        ],\n        \"accounts\": [\n          {\n            \"name\": \"vault\",\n            \"isMut\": false,\n            \"isSigner\": false,\n            \"docs\": [\n              \"vault\"\n            ]\n          },\n          {\n            \"name\": \"tokenVault\",\n            \"isMut\": true,\n            \"isSigner\": false,\n            \"docs\": [\n              \"Token vault, must be different from vault.token_vault\"\n            ]\n          },\n          {\n            \"name\": \"tokenAdmin\",\n            \"isMut\": true,\n            \"isSigner\": false,\n            \"docs\": [\n              \"token admin, enforce owner is admin to avoid mistake\"\n            ]\n          },\n          {\n            \"name\": \"admin\",\n            \"isMut\": false,\n            \"isSigner\": true,\n            \"docs\": [\n              \"admin\"\n            ]\n          },\n          {\n            \"name\": \"tokenProgram\",\n            \"isMut\": false,\n            \"isSigner\": false,\n            \"docs\": [\n              \"token_program\"\n            ]\n          }\n        ],\n        \"args\": []\n      },\n      {\n        \"name\": \"addStrategy\",\n        \"docs\": [\n          \"add a strategy\"\n        ],\n        \"accounts\": [\n          {\n            \"name\": \"vault\",\n            \"isMut\": true,\n            \"isSigner\": false,\n            \"docs\": [\n              \"vault\"\n            ]\n          },\n          {\n            \"name\": \"strategy\",\n            \"isMut\": false,\n            \"isSigner\": false,\n            \"docs\": [\n              \"strategy\"\n            ]\n          },\n          {\n            \"name\": \"admin\",\n            \"isMut\": false,\n            \"isSigner\": true,\n            \"docs\": [\n              \"admin\"\n            ]\n          }\n        ],\n        \"args\": []\n      },\n      {\n        \"name\": \"depositStrategy\",\n        \"docs\": [\n          \"deposit liquidity to a strategy\"\n        ],\n        \"accounts\": [\n          {\n            \"name\": \"vault\",\n            \"isMut\": true,\n            \"isSigner\": false,\n            \"docs\": [\n              \"vault\"\n            ]\n          },\n          {\n            \"name\": \"strategy\",\n            \"isMut\": true,\n            \"isSigner\": false,\n            \"docs\": [\n              \"strategy\"\n            ]\n          },\n          {\n            \"name\": \"tokenVault\",\n            \"isMut\": true,\n            \"isSigner\": false,\n            \"docs\": [\n              \"token_vault\"\n            ]\n          },\n          {\n            \"name\": \"feeVault\",\n            \"isMut\": true,\n            \"isSigner\": false,\n            \"docs\": [\n              \"fee_vault\"\n            ]\n          },\n          {\n            \"name\": \"lpMint\",\n            \"isMut\": true,\n            \"isSigner\": false,\n            \"docs\": [\n              \"lp_mint\"\n            ]\n          },\n          {\n            \"name\": \"strategyProgram\",\n            \"isMut\": false,\n            \"isSigner\": false\n          },\n          {\n            \"name\": \"collateralVault\",\n            \"isMut\": true,\n            \"isSigner\": false,\n            \"docs\": [\n              \"collateral_vault\"\n            ]\n          },\n          {\n            \"name\": \"reserve\",\n            \"isMut\": true,\n            \"isSigner\": false\n          },\n          {\n            \"name\": \"tokenProgram\",\n            \"isMut\": false,\n            \"isSigner\": false,\n            \"docs\": [\n              \"token_program\"\n            ]\n          },\n          {\n            \"name\": \"operator\",\n            \"isMut\": false,\n            \"isSigner\": true,\n            \"docs\": [\n              \"operator\"\n            ]\n          }\n        ],\n        \"args\": [\n          {\n            \"name\": \"amount\",\n            \"type\": \"u64\"\n          }\n        ]\n      },\n      {\n        \"name\": \"withdrawStrategy\",\n        \"docs\": [\n          \"withdraw liquidity from a strategy\"\n        ],\n        \"accounts\": [\n          {\n            \"name\": \"vault\",\n            \"isMut\": true,\n            \"isSigner\": false,\n            \"docs\": [\n              \"vault\"\n            ]\n          },\n          {\n            \"name\": \"strategy\",\n            \"isMut\": true,\n            \"isSigner\": false,\n            \"docs\": [\n              \"strategy\"\n            ]\n          },\n          {\n            \"name\": \"tokenVault\",\n            \"isMut\": true,\n            \"isSigner\": false,\n            \"docs\": [\n              \"token_vault\"\n            ]\n          },\n          {\n            \"name\": \"feeVault\",\n            \"isMut\": true,\n            \"isSigner\": false,\n            \"docs\": [\n              \"fee_vault\"\n            ]\n          },\n          {\n            \"name\": \"lpMint\",\n            \"isMut\": true,\n            \"isSigner\": false,\n            \"docs\": [\n              \"lp_mint\"\n            ]\n          },\n          {\n            \"name\": \"strategyProgram\",\n            \"isMut\": false,\n            \"isSigner\": false\n          },\n          {\n            \"name\": \"collateralVault\",\n            \"isMut\": true,\n            \"isSigner\": false,\n            \"docs\": [\n              \"collateral_vault\"\n            ]\n          },\n          {\n            \"name\": \"reserve\",\n            \"isMut\": true,\n            \"isSigner\": false\n          },\n          {\n            \"name\": \"tokenProgram\",\n            \"isMut\": false,\n            \"isSigner\": false,\n            \"docs\": [\n              \"token_program\"\n            ]\n          },\n          {\n            \"name\": \"operator\",\n            \"isMut\": false,\n            \"isSigner\": true,\n            \"docs\": [\n              \"operator\"\n            ]\n          }\n        ],\n        \"args\": [\n          {\n            \"name\": \"amount\",\n            \"type\": \"u64\"\n          }\n        ]\n      },\n      {\n        \"name\": \"claimRewards\",\n        \"docs\": [\n          \"claim rewards from a strategy\"\n        ],\n        \"accounts\": [\n          {\n            \"name\": \"vault\",\n            \"isMut\": false,\n            \"isSigner\": false,\n            \"docs\": [\n              \"vault\"\n            ]\n          },\n          {\n            \"name\": \"strategy\",\n            \"isMut\": false,\n            \"isSigner\": false,\n            \"docs\": [\n              \"strategy\"\n            ]\n          },\n          {\n            \"name\": \"tokenProgram\",\n            \"isMut\": false,\n            \"isSigner\": false,\n            \"docs\": [\n              \"token_program\"\n            ]\n          },\n          {\n            \"name\": \"tokenRewardAcc\",\n            \"isMut\": true,\n            \"isSigner\": false,\n            \"docs\": [\n              \"token_reward_acc\"\n            ]\n          },\n          {\n            \"name\": \"operator\",\n            \"isMut\": false,\n            \"isSigner\": true,\n            \"docs\": [\n              \"operator\"\n            ]\n          }\n        ],\n        \"args\": []\n      },\n      {\n        \"name\": \"withdraw2\",\n        \"docs\": [\n          \"Withdraw v2. Withdraw from token vault if no remaining accounts are available. Else, it will attempt to withdraw from strategy and token vault. This method just proxy between 2 methods. Protocol integration should be using withdraw instead of this function.\"\n        ],\n        \"accounts\": [\n          {\n            \"name\": \"vault\",\n            \"isMut\": true,\n            \"isSigner\": false,\n            \"docs\": [\n              \"vault\"\n            ]\n          },\n          {\n            \"name\": \"tokenVault\",\n            \"isMut\": true,\n            \"isSigner\": false,\n            \"docs\": [\n              \"token_vault\"\n            ]\n          },\n          {\n            \"name\": \"lpMint\",\n            \"isMut\": true,\n            \"isSigner\": false,\n            \"docs\": [\n              \"lp_mint\"\n            ]\n          },\n          {\n            \"name\": \"userToken\",\n            \"isMut\": true,\n            \"isSigner\": false,\n            \"docs\": [\n              \"user_token\"\n            ]\n          },\n          {\n            \"name\": \"userLp\",\n            \"isMut\": true,\n            \"isSigner\": false,\n            \"docs\": [\n              \"user_lp\"\n            ]\n          },\n          {\n            \"name\": \"user\",\n            \"isMut\": false,\n            \"isSigner\": true,\n            \"docs\": [\n              \"user\"\n            ]\n          },\n          {\n            \"name\": \"tokenProgram\",\n            \"isMut\": false,\n            \"isSigner\": false,\n            \"docs\": [\n              \"token_program\"\n            ]\n          }\n        ],\n        \"args\": [\n          {\n            \"name\": \"unmintAmount\",\n            \"type\": \"u64\"\n          },\n          {\n            \"name\": \"minOutAmount\",\n            \"type\": \"u64\"\n          }\n        ]\n      },\n      {\n        \"name\": \"deposit\",\n        \"docs\": [\n          \"user deposit liquidity to vault\"\n        ],\n        \"accounts\": [\n          {\n            \"name\": \"vault\",\n            \"isMut\": true,\n            \"isSigner\": false,\n            \"docs\": [\n              \"vault\"\n            ]\n          },\n          {\n            \"name\": \"tokenVault\",\n            \"isMut\": true,\n            \"isSigner\": false,\n            \"docs\": [\n              \"token_vault\"\n            ]\n          },\n          {\n            \"name\": \"lpMint\",\n            \"isMut\": true,\n            \"isSigner\": false,\n            \"docs\": [\n              \"lp_mint\"\n            ]\n          },\n          {\n            \"name\": \"userToken\",\n            \"isMut\": true,\n            \"isSigner\": false,\n            \"docs\": [\n              \"user_token\"\n            ]\n          },\n          {\n            \"name\": \"userLp\",\n            \"isMut\": true,\n            \"isSigner\": false,\n            \"docs\": [\n              \"user_lp\"\n            ]\n          },\n          {\n            \"name\": \"user\",\n            \"isMut\": false,\n            \"isSigner\": true,\n            \"docs\": [\n              \"user\"\n            ]\n          },\n          {\n            \"name\": \"tokenProgram\",\n            \"isMut\": false,\n            \"isSigner\": false,\n            \"docs\": [\n              \"token_program\"\n            ]\n          }\n        ],\n        \"args\": [\n          {\n            \"name\": \"tokenAmount\",\n            \"type\": \"u64\"\n          },\n          {\n            \"name\": \"minimumLpTokenAmount\",\n            \"type\": \"u64\"\n          }\n        ]\n      },\n      {\n        \"name\": \"withdraw\",\n        \"docs\": [\n          \"user withdraw liquidity from vault\"\n        ],\n        \"accounts\": [\n          {\n            \"name\": \"vault\",\n            \"isMut\": true,\n            \"isSigner\": false,\n            \"docs\": [\n              \"vault\"\n            ]\n          },\n          {\n            \"name\": \"tokenVault\",\n            \"isMut\": true,\n            \"isSigner\": false,\n            \"docs\": [\n              \"token_vault\"\n            ]\n          },\n          {\n            \"name\": \"lpMint\",\n            \"isMut\": true,\n            \"isSigner\": false,\n            \"docs\": [\n              \"lp_mint\"\n            ]\n          },\n          {\n            \"name\": \"userToken\",\n            \"isMut\": true,\n            \"isSigner\": false,\n            \"docs\": [\n              \"user_token\"\n            ]\n          },\n          {\n            \"name\": \"userLp\",\n            \"isMut\": true,\n            \"isSigner\": false,\n            \"docs\": [\n              \"user_lp\"\n            ]\n          },\n          {\n            \"name\": \"user\",\n            \"isMut\": false,\n            \"isSigner\": true,\n            \"docs\": [\n              \"user\"\n            ]\n          },\n          {\n            \"name\": \"tokenProgram\",\n            \"isMut\": false,\n            \"isSigner\": false,\n            \"docs\": [\n              \"token_program\"\n            ]\n          }\n        ],\n        \"args\": [\n          {\n            \"name\": \"unmintAmount\",\n            \"type\": \"u64\"\n          },\n          {\n            \"name\": \"minOutAmount\",\n            \"type\": \"u64\"\n          }\n        ]\n      },\n      {\n        \"name\": \"withdrawDirectlyFromStrategy\",\n        \"docs\": [\n          \"user withdraw liquidity from vault, if vault reserve doesn't have enough liquidity, it will withdraw from the strategy firstly\"\n        ],\n        \"accounts\": [\n          {\n            \"name\": \"vault\",\n            \"isMut\": true,\n            \"isSigner\": false,\n            \"docs\": [\n              \"vault\"\n            ]\n          },\n          {\n            \"name\": \"strategy\",\n            \"isMut\": true,\n            \"isSigner\": false,\n            \"docs\": [\n              \"strategy\"\n            ]\n          },\n          {\n            \"name\": \"reserve\",\n            \"isMut\": true,\n            \"isSigner\": false\n          },\n          {\n            \"name\": \"strategyProgram\",\n            \"isMut\": false,\n            \"isSigner\": false\n          },\n          {\n            \"name\": \"collateralVault\",\n            \"isMut\": true,\n            \"isSigner\": false,\n            \"docs\": [\n              \"collateral_vault\"\n            ]\n          },\n          {\n            \"name\": \"tokenVault\",\n            \"isMut\": true,\n            \"isSigner\": false,\n            \"docs\": [\n              \"token_vault\"\n            ]\n          },\n          {\n            \"name\": \"lpMint\",\n            \"isMut\": true,\n            \"isSigner\": false,\n            \"docs\": [\n              \"lp_mint\"\n            ]\n          },\n          {\n            \"name\": \"feeVault\",\n            \"isMut\": true,\n            \"isSigner\": false,\n            \"docs\": [\n              \"fee_vault\"\n            ]\n          },\n          {\n            \"name\": \"userToken\",\n            \"isMut\": true,\n            \"isSigner\": false,\n            \"docs\": [\n              \"user_token\"\n            ]\n          },\n          {\n            \"name\": \"userLp\",\n            \"isMut\": true,\n            \"isSigner\": false,\n            \"docs\": [\n              \"user_lp\"\n            ]\n          },\n          {\n            \"name\": \"user\",\n            \"isMut\": false,\n            \"isSigner\": true,\n            \"docs\": [\n              \"user\"\n            ]\n          },\n          {\n            \"name\": \"tokenProgram\",\n            \"isMut\": false,\n            \"isSigner\": false,\n            \"docs\": [\n              \"token_program\"\n            ]\n          }\n        ],\n        \"args\": [\n          {\n            \"name\": \"unmintAmount\",\n            \"type\": \"u64\"\n          },\n          {\n            \"name\": \"minOutAmount\",\n            \"type\": \"u64\"\n          }\n        ]\n      }\n    ],\n    \"accounts\": [\n      {\n        \"name\": \"vault\",\n        \"docs\": [\n          \"Vault struct\"\n        ],\n        \"type\": {\n          \"kind\": \"struct\",\n          \"fields\": [\n            {\n              \"name\": \"enabled\",\n              \"docs\": [\n                \"The flag, if admin set enable = false, then the user can only withdraw and cannot deposit in the vault.\"\n              ],\n              \"type\": \"u8\"\n            },\n            {\n              \"name\": \"bumps\",\n              \"docs\": [\n                \"Vault nonce, to create vault seeds\"\n              ],\n              \"type\": {\n                \"defined\": \"VaultBumps\"\n              }\n            },\n            {\n              \"name\": \"totalAmount\",\n              \"docs\": [\n                \"The total liquidity of the vault, including remaining tokens in token_vault and the liquidity in all strategies.\"\n              ],\n              \"type\": \"u64\"\n            },\n            {\n              \"name\": \"tokenVault\",\n              \"docs\": [\n                \"Token account, hold liquidity in vault reserve\"\n              ],\n              \"type\": \"publicKey\"\n            },\n            {\n              \"name\": \"feeVault\",\n              \"docs\": [\n                \"Hold lp token of vault, each time rebalance crank is called, vault calculate performance fee and mint corresponding lp token amount to fee_vault. fee_vault is owned by treasury address\"\n              ],\n              \"type\": \"publicKey\"\n            },\n            {\n              \"name\": \"tokenMint\",\n              \"docs\": [\n                \"Token mint that vault supports\"\n              ],\n              \"type\": \"publicKey\"\n            },\n            {\n              \"name\": \"lpMint\",\n              \"docs\": [\n                \"Lp mint of vault\"\n              ],\n              \"type\": \"publicKey\"\n            },\n            {\n              \"name\": \"strategies\",\n              \"docs\": [\n                \"The list of strategy addresses that vault supports, vault can support up to MAX_STRATEGY strategies at the same time.\"\n              ],\n              \"type\": {\n                \"array\": [\n                  \"publicKey\",\n                  30\n                ]\n              }\n            },\n            {\n              \"name\": \"base\",\n              \"docs\": [\n                \"The base address to create vault seeds\"\n              ],\n              \"type\": \"publicKey\"\n            },\n            {\n              \"name\": \"admin\",\n              \"docs\": [\n                \"Admin of vault\"\n              ],\n              \"type\": \"publicKey\"\n            },\n            {\n              \"name\": \"operator\",\n              \"docs\": [\n                \"Person who can send the crank. Operator can only send liquidity to strategies that admin defined, and claim reward to account of treasury address\"\n              ],\n              \"type\": \"publicKey\"\n            },\n            {\n              \"name\": \"lockedProfitTracker\",\n              \"docs\": [\n                \"Stores information for locked profit.\"\n              ],\n              \"type\": {\n                \"defined\": \"LockedProfitTracker\"\n              }\n            }\n          ]\n        }\n      },\n      {\n        \"name\": \"strategy\",\n        \"docs\": [\n          \"Strategy struct\"\n        ],\n        \"type\": {\n          \"kind\": \"struct\",\n          \"fields\": [\n            {\n              \"name\": \"reserve\",\n              \"docs\": [\n                \"Lending pool address, that the strategy will deposit/withdraw balance\"\n              ],\n              \"type\": \"publicKey\"\n            },\n            {\n              \"name\": \"collateralVault\",\n              \"docs\": [\n                \"The token account, that holds the collateral token\"\n              ],\n              \"type\": \"publicKey\"\n            },\n            {\n              \"name\": \"strategyType\",\n              \"docs\": [\n                \"Specify type of strategy\"\n              ],\n              \"type\": {\n                \"defined\": \"StrategyType\"\n              }\n            },\n            {\n              \"name\": \"currentLiquidity\",\n              \"docs\": [\n                \"The liquidity in strategy at the time vault deposit/withdraw from a lending protocol\"\n              ],\n              \"type\": \"u64\"\n            },\n            {\n              \"name\": \"bumps\",\n              \"docs\": [\n                \"Hold some bumps, in case the strategy needs to use other seeds to sign a CPI call.\"\n              ],\n              \"type\": {\n                \"array\": [\n                  \"u8\",\n                  10\n                ]\n              }\n            },\n            {\n              \"name\": \"vault\",\n              \"docs\": [\n                \"Vault address, that the strategy belongs\"\n              ],\n              \"type\": \"publicKey\"\n            },\n            {\n              \"name\": \"isDisable\",\n              \"docs\": [\n                \"If we remove strategy by remove_strategy2 endpoint, this account will be never added again\"\n              ],\n              \"type\": \"u8\"\n            }\n          ]\n        }\n      }\n    ],\n    \"types\": [\n      {\n        \"name\": \"LockedProfitTracker\",\n        \"docs\": [\n          \"LockedProfitTracker struct\"\n        ],\n        \"type\": {\n          \"kind\": \"struct\",\n          \"fields\": [\n            {\n              \"name\": \"lastUpdatedLockedProfit\",\n              \"docs\": [\n                \"The total locked profit from the last report\"\n              ],\n              \"type\": \"u64\"\n            },\n            {\n              \"name\": \"lastReport\",\n              \"docs\": [\n                \"The last timestamp (in seconds) rebalancing\"\n              ],\n              \"type\": \"u64\"\n            },\n            {\n              \"name\": \"lockedProfitDegradation\",\n              \"docs\": [\n                \"Rate per second of degradation\"\n              ],\n              \"type\": \"u64\"\n            }\n          ]\n        }\n      },\n      {\n        \"name\": \"VaultBumps\",\n        \"docs\": [\n          \"Vault bumps struct\"\n        ],\n        \"type\": {\n          \"kind\": \"struct\",\n          \"fields\": [\n            {\n              \"name\": \"vaultBump\",\n              \"docs\": [\n                \"vault_bump\"\n              ],\n              \"type\": \"u8\"\n            },\n            {\n              \"name\": \"tokenVaultBump\",\n              \"docs\": [\n                \"token_vault_bump\"\n              ],\n              \"type\": \"u8\"\n            }\n          ]\n        }\n      },\n      {\n        \"name\": \"StrategyBumps\",\n        \"docs\": [\n          \"Strategy bumps struct\"\n        ],\n        \"type\": {\n          \"kind\": \"struct\",\n          \"fields\": [\n            {\n              \"name\": \"strategyIndex\",\n              \"docs\": [\n                \"strategy_index\"\n              ],\n              \"type\": \"u8\"\n            },\n            {\n              \"name\": \"otherBumps\",\n              \"docs\": [\n                \"Bumps of PDAs for the integrated protocol.\"\n              ],\n              \"type\": {\n                \"array\": [\n                  \"u8\",\n                  10\n                ]\n              }\n            }\n          ]\n        }\n      },\n      {\n        \"name\": \"StrategyType\",\n        \"docs\": [\n          \"StrategyType struct\"\n        ],\n        \"type\": {\n          \"kind\": \"enum\",\n          \"variants\": [\n            {\n              \"name\": \"PortFinanceWithoutLM\"\n            },\n            {\n              \"name\": \"PortFinanceWithLM\"\n            },\n            {\n              \"name\": \"SolendWithoutLM\"\n            },\n            {\n              \"name\": \"Mango\"\n            },\n            {\n              \"name\": \"SolendWithLM\"\n            },\n            {\n              \"name\": \"ApricotWithoutLM\"\n            },\n            {\n              \"name\": \"Francium\"\n            },\n            {\n              \"name\": \"Tulip\"\n            },\n            {\n              \"name\": \"Vault\"\n            },\n            {\n              \"name\": \"Drift\"\n            },\n            {\n              \"name\": \"Frakt\"\n            },\n            {\n              \"name\": \"Marginfi\"\n            },\n            {\n              \"name\": \"Kamino\"\n            }\n          ]\n        }\n      },\n      {\n        \"name\": \"VaultType\",\n        \"docs\": [\n          \"Vault type\"\n        ],\n        \"type\": {\n          \"kind\": \"enum\",\n          \"variants\": [\n            {\n              \"name\": \"IdleVault\"\n            },\n            {\n              \"name\": \"RebalanceVault\"\n            }\n          ]\n        }\n      }\n    ],\n    \"events\": [\n      {\n        \"name\": \"AddLiquidity\",\n        \"fields\": [\n          {\n            \"name\": \"lpMintAmount\",\n            \"type\": \"u64\",\n            \"index\": false\n          },\n          {\n            \"name\": \"tokenAmount\",\n            \"type\": \"u64\",\n            \"index\": false\n          }\n        ]\n      },\n      {\n        \"name\": \"RemoveLiquidity\",\n        \"fields\": [\n          {\n            \"name\": \"lpUnmintAmount\",\n            \"type\": \"u64\",\n            \"index\": false\n          },\n          {\n            \"name\": \"tokenAmount\",\n            \"type\": \"u64\",\n            \"index\": false\n          }\n        ]\n      },\n      {\n        \"name\": \"StrategyDeposit\",\n        \"fields\": [\n          {\n            \"name\": \"strategyType\",\n            \"type\": {\n              \"defined\": \"StrategyType\"\n            },\n            \"index\": false\n          },\n          {\n            \"name\": \"tokenAmount\",\n            \"type\": \"u64\",\n            \"index\": false\n          }\n        ]\n      },\n      {\n        \"name\": \"StrategyWithdraw\",\n        \"fields\": [\n          {\n            \"name\": \"strategyType\",\n            \"type\": {\n              \"defined\": \"StrategyType\"\n            },\n            \"index\": false\n          },\n          {\n            \"name\": \"collateralAmount\",\n            \"type\": \"u64\",\n            \"index\": false\n          },\n          {\n            \"name\": \"estimatedTokenAmount\",\n            \"type\": \"u64\",\n            \"index\": false\n          }\n        ]\n      },\n      {\n        \"name\": \"ClaimReward\",\n        \"fields\": [\n          {\n            \"name\": \"strategyType\",\n            \"type\": {\n              \"defined\": \"StrategyType\"\n            },\n            \"index\": false\n          },\n          {\n            \"name\": \"tokenAmount\",\n            \"type\": \"u64\",\n            \"index\": false\n          },\n          {\n            \"name\": \"mintAccount\",\n            \"type\": \"publicKey\",\n            \"index\": false\n          }\n        ]\n      },\n      {\n        \"name\": \"PerformanceFee\",\n        \"fields\": [\n          {\n            \"name\": \"lpMintMore\",\n            \"type\": \"u64\",\n            \"index\": false\n          }\n        ]\n      },\n      {\n        \"name\": \"ReportLoss\",\n        \"fields\": [\n          {\n            \"name\": \"strategy\",\n            \"type\": \"publicKey\",\n            \"index\": false\n          },\n          {\n            \"name\": \"loss\",\n            \"type\": \"u64\",\n            \"index\": false\n          }\n        ]\n      },\n      {\n        \"name\": \"TotalAmount\",\n        \"fields\": [\n          {\n            \"name\": \"totalAmount\",\n            \"type\": \"u64\",\n            \"index\": false\n          }\n        ]\n      }\n    ],\n    \"errors\": [\n      {\n        \"code\": 6000,\n        \"name\": \"VaultIsDisabled\",\n        \"msg\": \"Vault is disabled\"\n      },\n      {\n        \"code\": 6001,\n        \"name\": \"ExceededSlippage\",\n        \"msg\": \"Exceeded slippage tolerance\"\n      },\n      {\n        \"code\": 6002,\n        \"name\": \"StrategyIsNotExisted\",\n        \"msg\": \"Strategy is not existed\"\n      },\n      {\n        \"code\": 6003,\n        \"name\": \"UnAuthorized\",\n        \"msg\": \"UnAuthorized\"\n      },\n      {\n        \"code\": 6004,\n        \"name\": \"MathOverflow\",\n        \"msg\": \"Math operation overflow\"\n      },\n      {\n        \"code\": 6005,\n        \"name\": \"ProtocolIsNotSupported\",\n        \"msg\": \"Protocol is not supported\"\n      },\n      {\n        \"code\": 6006,\n        \"name\": \"UnMatchReserve\",\n        \"msg\": \"Reserve does not support token mint\"\n      },\n      {\n        \"code\": 6007,\n        \"name\": \"InvalidLockedProfitDegradation\",\n        \"msg\": \"lockedProfitDegradation is invalid\"\n      },\n      {\n        \"code\": 6008,\n        \"name\": \"MaxStrategyReached\",\n        \"msg\": \"Maximum number of strategies have been reached\"\n      },\n      {\n        \"code\": 6009,\n        \"name\": \"StrategyExisted\",\n        \"msg\": \"Strategy existed\"\n      },\n      {\n        \"code\": 6010,\n        \"name\": \"InvalidUnmintAmount\",\n        \"msg\": \"Invalid unmint amount\"\n      },\n      {\n        \"code\": 6011,\n        \"name\": \"InvalidAccountsForStrategy\",\n        \"msg\": \"Invalid accounts for strategy\"\n      },\n      {\n        \"code\": 6012,\n        \"name\": \"InvalidBump\",\n        \"msg\": \"Invalid bump\"\n      },\n      {\n        \"code\": 6013,\n        \"name\": \"AmountMustGreaterThanZero\",\n        \"msg\": \"Amount must be greater than 0\"\n      },\n      {\n        \"code\": 6014,\n        \"name\": \"MangoIsNotSupportedAnymore\",\n        \"msg\": \"Mango is not supported anymore\"\n      },\n      {\n        \"code\": 6015,\n        \"name\": \"StrategyIsNotSupported\",\n        \"msg\": \"Strategy is not supported\"\n      },\n      {\n        \"code\": 6016,\n        \"name\": \"PayAmountIsExeeced\",\n        \"msg\": \"Pay amount is exceeded\"\n      },\n      {\n        \"code\": 6017,\n        \"name\": \"FeeVaultIsNotSet\",\n        \"msg\": \"Fee vault is not set\"\n      },\n      {\n        \"code\": 6018,\n        \"name\": \"LendingAssertionViolation\",\n        \"msg\": \"deposit amount in lending is not matched\"\n      },\n      {\n        \"code\": 6019,\n        \"name\": \"HaveMoneyInLending\",\n        \"msg\": \"Cannot remove strategy becase we have some in lending\"\n      }\n    ]\n  };\n  \n  export const IDL: Vault = {\n    \"version\": \"0.9.1\",\n    \"name\": \"vault\",\n    \"docs\": [\n      \"Program for vault\"\n    ],\n    \"instructions\": [\n      {\n        \"name\": \"initialize\",\n        \"docs\": [\n          \"initialize new vault\"\n        ],\n        \"accounts\": [\n          {\n            \"name\": \"vault\",\n            \"isMut\": true,\n            \"isSigner\": false,\n            \"docs\": [\n              \"This is base account for all vault\",\n              \"No need base key now because we only allow 1 vault per token now\",\n              \"Vault account\"\n            ]\n          },\n          {\n            \"name\": \"payer\",\n            \"isMut\": true,\n            \"isSigner\": true,\n            \"docs\": [\n              \"Payer can be anyone\"\n            ]\n          },\n          {\n            \"name\": \"tokenVault\",\n            \"isMut\": true,\n            \"isSigner\": false,\n            \"docs\": [\n              \"Token vault account\"\n            ]\n          },\n          {\n            \"name\": \"tokenMint\",\n            \"isMut\": false,\n            \"isSigner\": false,\n            \"docs\": [\n              \"Token mint account\"\n            ]\n          },\n          {\n            \"name\": \"lpMint\",\n            \"isMut\": true,\n            \"isSigner\": false,\n            \"docs\": [\n              \"LP mint account\"\n            ]\n          },\n          {\n            \"name\": \"rent\",\n            \"isMut\": false,\n            \"isSigner\": false,\n            \"docs\": [\n              \"rent\"\n            ]\n          },\n          {\n            \"name\": \"tokenProgram\",\n            \"isMut\": false,\n            \"isSigner\": false,\n            \"docs\": [\n              \"token_program\"\n            ]\n          },\n          {\n            \"name\": \"systemProgram\",\n            \"isMut\": false,\n            \"isSigner\": false,\n            \"docs\": [\n              \"system_program\"\n            ]\n          }\n        ],\n        \"args\": []\n      },\n      {\n        \"name\": \"initializeIdleVault\",\n        \"docs\": [\n          \"initialize idle vault the vault that cannot be rebalanced\"\n        ],\n        \"accounts\": [\n          {\n            \"name\": \"vault\",\n            \"isMut\": true,\n            \"isSigner\": false,\n            \"docs\": [\n              \"Vault account\"\n            ]\n          },\n          {\n            \"name\": \"payer\",\n            \"isMut\": true,\n            \"isSigner\": true,\n            \"docs\": [\n              \"Payer can be anyone\"\n            ]\n          },\n          {\n            \"name\": \"tokenVault\",\n            \"isMut\": true,\n            \"isSigner\": false,\n            \"docs\": [\n              \"Token vault account\"\n            ]\n          },\n          {\n            \"name\": \"tokenMint\",\n            \"isMut\": false,\n            \"isSigner\": false,\n            \"docs\": [\n              \"Token mint account\"\n            ]\n          },\n          {\n            \"name\": \"lpMint\",\n            \"isMut\": true,\n            \"isSigner\": false,\n            \"docs\": [\n              \"LP mint\"\n            ]\n          },\n          {\n            \"name\": \"rent\",\n            \"isMut\": false,\n            \"isSigner\": false,\n            \"docs\": [\n              \"rent\"\n            ]\n          },\n          {\n            \"name\": \"tokenProgram\",\n            \"isMut\": false,\n            \"isSigner\": false,\n            \"docs\": [\n              \"token_program\"\n            ]\n          },\n          {\n            \"name\": \"systemProgram\",\n            \"isMut\": false,\n            \"isSigner\": false,\n            \"docs\": [\n              \"system_program\"\n            ]\n          }\n        ],\n        \"args\": []\n      },\n      {\n        \"name\": \"enableVault\",\n        \"docs\": [\n          \"enable vault\"\n        ],\n        \"accounts\": [\n          {\n            \"name\": \"vault\",\n            \"isMut\": true,\n            \"isSigner\": false,\n            \"docs\": [\n              \"Vault account\"\n            ]\n          },\n          {\n            \"name\": \"admin\",\n            \"isMut\": false,\n            \"isSigner\": true,\n            \"docs\": [\n              \"Admin account\"\n            ]\n          }\n        ],\n        \"args\": [\n          {\n            \"name\": \"enabled\",\n            \"type\": \"u8\"\n          }\n        ]\n      },\n      {\n        \"name\": \"setOperator\",\n        \"docs\": [\n          \"set new operator\"\n        ],\n        \"accounts\": [\n          {\n            \"name\": \"vault\",\n            \"isMut\": true,\n            \"isSigner\": false,\n            \"docs\": [\n              \"Vault account\"\n            ]\n          },\n          {\n            \"name\": \"operator\",\n            \"isMut\": false,\n            \"isSigner\": false\n          },\n          {\n            \"name\": \"admin\",\n            \"isMut\": false,\n            \"isSigner\": true,\n            \"docs\": [\n              \"admin\"\n            ]\n          }\n        ],\n        \"args\": []\n      },\n      {\n        \"name\": \"updateLockedProfitDegradation\",\n        \"docs\": [\n          \"update locked profit degradation\"\n        ],\n        \"accounts\": [\n          {\n            \"name\": \"vault\",\n            \"isMut\": true,\n            \"isSigner\": false,\n            \"docs\": [\n              \"Vault account\"\n            ]\n          },\n          {\n            \"name\": \"admin\",\n            \"isMut\": false,\n            \"isSigner\": true,\n            \"docs\": [\n              \"Admin account\"\n            ]\n          }\n        ],\n        \"args\": [\n          {\n            \"name\": \"lockedProfitDegradation\",\n            \"type\": \"u64\"\n          }\n        ]\n      },\n      {\n        \"name\": \"getUnlockedAmount\",\n        \"docs\": [\n          \"get unlocked amount\"\n        ],\n        \"accounts\": [\n          {\n            \"name\": \"vault\",\n            \"isMut\": false,\n            \"isSigner\": false,\n            \"docs\": [\n              \"Vault account\"\n            ]\n          }\n        ],\n        \"args\": []\n      },\n      {\n        \"name\": \"transferAdmin\",\n        \"docs\": [\n          \"transfer admin\"\n        ],\n        \"accounts\": [\n          {\n            \"name\": \"vault\",\n            \"isMut\": true,\n            \"isSigner\": false,\n            \"docs\": [\n              \"Vault account\"\n            ]\n          },\n          {\n            \"name\": \"admin\",\n            \"isMut\": false,\n            \"isSigner\": true,\n            \"docs\": [\n              \"Admin account\"\n            ]\n          },\n          {\n            \"name\": \"newAdmin\",\n            \"isMut\": false,\n            \"isSigner\": true,\n            \"docs\": [\n              \"New vault admin\"\n            ]\n          }\n        ],\n        \"args\": []\n      },\n      {\n        \"name\": \"transferFeeVault\",\n        \"docs\": [\n          \"transfer fee account\"\n        ],\n        \"accounts\": [\n          {\n            \"name\": \"vault\",\n            \"isMut\": true,\n            \"isSigner\": false,\n            \"docs\": [\n              \"Vault account\"\n            ]\n          },\n          {\n            \"name\": \"admin\",\n            \"isMut\": false,\n            \"isSigner\": true,\n            \"docs\": [\n              \"Admin account\"\n            ]\n          },\n          {\n            \"name\": \"newFeeVault\",\n            \"isMut\": false,\n            \"isSigner\": false,\n            \"docs\": [\n              \"New fee vault account\"\n            ]\n          }\n        ],\n        \"args\": []\n      },\n      {\n        \"name\": \"initializeStrategy\",\n        \"docs\": [\n          \"Initialize a strategy and add strategy to vault.strategies index\"\n        ],\n        \"accounts\": [\n          {\n            \"name\": \"vault\",\n            \"isMut\": true,\n            \"isSigner\": false,\n            \"docs\": [\n              \"Vault account\"\n            ]\n          },\n          {\n            \"name\": \"strategyProgram\",\n            \"isMut\": false,\n            \"isSigner\": false\n          },\n          {\n            \"name\": \"strategy\",\n            \"isMut\": true,\n            \"isSigner\": false,\n            \"docs\": [\n              \"Strategy account\"\n            ]\n          },\n          {\n            \"name\": \"reserve\",\n            \"isMut\": true,\n            \"isSigner\": false\n          },\n          {\n            \"name\": \"collateralVault\",\n            \"isMut\": true,\n            \"isSigner\": false,\n            \"docs\": [\n              \"Collateral vault account\"\n            ]\n          },\n          {\n            \"name\": \"collateralMint\",\n            \"isMut\": false,\n            \"isSigner\": false,\n            \"docs\": [\n              \"Collateral mint account\"\n            ]\n          },\n          {\n            \"name\": \"admin\",\n            \"isMut\": true,\n            \"isSigner\": true,\n            \"docs\": [\n              \"Admin account\"\n            ]\n          },\n          {\n            \"name\": \"systemProgram\",\n            \"isMut\": false,\n            \"isSigner\": false,\n            \"docs\": [\n              \"System program account\"\n            ]\n          },\n          {\n            \"name\": \"rent\",\n            \"isMut\": false,\n            \"isSigner\": false,\n            \"docs\": [\n              \"Rent account\"\n            ]\n          },\n          {\n            \"name\": \"tokenProgram\",\n            \"isMut\": false,\n            \"isSigner\": false,\n            \"docs\": [\n              \"Token program account\"\n            ]\n          }\n        ],\n        \"args\": [\n          {\n            \"name\": \"bumps\",\n            \"type\": {\n              \"defined\": \"StrategyBumps\"\n            }\n          },\n          {\n            \"name\": \"strategyType\",\n            \"type\": {\n              \"defined\": \"StrategyType\"\n            }\n          }\n        ]\n      },\n      {\n        \"name\": \"removeStrategy\",\n        \"docs\": [\n          \"remove a strategy\"\n        ],\n        \"accounts\": [\n          {\n            \"name\": \"vault\",\n            \"isMut\": true,\n            \"isSigner\": false,\n            \"docs\": [\n              \"Vault account\"\n            ]\n          },\n          {\n            \"name\": \"strategy\",\n            \"isMut\": true,\n            \"isSigner\": false,\n            \"docs\": [\n              \"Strategy account\"\n            ]\n          },\n          {\n            \"name\": \"strategyProgram\",\n            \"isMut\": false,\n            \"isSigner\": false\n          },\n          {\n            \"name\": \"collateralVault\",\n            \"isMut\": true,\n            \"isSigner\": false,\n            \"docs\": [\n              \"Collateral vault account\"\n            ]\n          },\n          {\n            \"name\": \"reserve\",\n            \"isMut\": true,\n            \"isSigner\": false\n          },\n          {\n            \"name\": \"tokenVault\",\n            \"isMut\": true,\n            \"isSigner\": false,\n            \"docs\": [\n              \"token_vault\"\n            ]\n          },\n          {\n            \"name\": \"feeVault\",\n            \"isMut\": true,\n            \"isSigner\": false,\n            \"docs\": [\n              \"fee_vault\"\n            ]\n          },\n          {\n            \"name\": \"lpMint\",\n            \"isMut\": true,\n            \"isSigner\": false,\n            \"docs\": [\n              \"lp_mint\"\n            ]\n          },\n          {\n            \"name\": \"tokenProgram\",\n            \"isMut\": false,\n            \"isSigner\": false,\n            \"docs\": [\n              \"token_program\"\n            ]\n          },\n          {\n            \"name\": \"admin\",\n            \"isMut\": false,\n            \"isSigner\": true,\n            \"docs\": [\n              \"admin\"\n            ]\n          }\n        ],\n        \"args\": []\n      },\n      {\n        \"name\": \"removeStrategy2\",\n        \"docs\": [\n          \"remove a strategy by advance payment\"\n        ],\n        \"accounts\": [\n          {\n            \"name\": \"vault\",\n            \"isMut\": true,\n            \"isSigner\": false,\n            \"docs\": [\n              \"Vault account\"\n            ]\n          },\n          {\n            \"name\": \"strategy\",\n            \"isMut\": true,\n            \"isSigner\": false,\n            \"docs\": [\n              \"Strategy account\"\n            ]\n          },\n          {\n            \"name\": \"strategyProgram\",\n            \"isMut\": false,\n            \"isSigner\": false\n          },\n          {\n            \"name\": \"collateralVault\",\n            \"isMut\": true,\n            \"isSigner\": false,\n            \"docs\": [\n              \"Collateral vault account\"\n            ]\n          },\n          {\n            \"name\": \"reserve\",\n            \"isMut\": true,\n            \"isSigner\": false\n          },\n          {\n            \"name\": \"tokenVault\",\n            \"isMut\": true,\n            \"isSigner\": false,\n            \"docs\": [\n              \"token_vault\"\n            ]\n          },\n          {\n            \"name\": \"tokenAdminAdvancePayment\",\n            \"isMut\": true,\n            \"isSigner\": false,\n            \"docs\": [\n              \"token_advance_payemnt\",\n              \"the owner of token_advance_payment must be admin\"\n            ]\n          },\n          {\n            \"name\": \"tokenVaultAdvancePayment\",\n            \"isMut\": true,\n            \"isSigner\": false,\n            \"docs\": [\n              \"token_vault_advance_payment\",\n              \"the account must be different from token_vault\",\n              \"the owner of token_advance_payment must be vault\"\n            ]\n          },\n          {\n            \"name\": \"feeVault\",\n            \"isMut\": true,\n            \"isSigner\": false,\n            \"docs\": [\n              \"fee_vault\"\n            ]\n          },\n          {\n            \"name\": \"lpMint\",\n            \"isMut\": true,\n            \"isSigner\": false,\n            \"docs\": [\n              \"lp_mint\"\n            ]\n          },\n          {\n            \"name\": \"tokenProgram\",\n            \"isMut\": false,\n            \"isSigner\": false,\n            \"docs\": [\n              \"token_program\"\n            ]\n          },\n          {\n            \"name\": \"admin\",\n            \"isMut\": false,\n            \"isSigner\": true,\n            \"docs\": [\n              \"admin\"\n            ]\n          }\n        ],\n        \"args\": [\n          {\n            \"name\": \"maxAdminPayAmount\",\n            \"type\": \"u64\"\n          }\n        ]\n      },\n      {\n        \"name\": \"collectDust\",\n        \"docs\": [\n          \"collect token, that someone send wrongly\",\n          \"also help in case Mango reimbursement\"\n        ],\n        \"accounts\": [\n          {\n            \"name\": \"vault\",\n            \"isMut\": false,\n            \"isSigner\": false,\n            \"docs\": [\n              \"vault\"\n            ]\n          },\n          {\n            \"name\": \"tokenVault\",\n            \"isMut\": true,\n            \"isSigner\": false,\n            \"docs\": [\n              \"Token vault, must be different from vault.token_vault\"\n            ]\n          },\n          {\n            \"name\": \"tokenAdmin\",\n            \"isMut\": true,\n            \"isSigner\": false,\n            \"docs\": [\n              \"token admin, enforce owner is admin to avoid mistake\"\n            ]\n          },\n          {\n            \"name\": \"admin\",\n            \"isMut\": false,\n            \"isSigner\": true,\n            \"docs\": [\n              \"admin\"\n            ]\n          },\n          {\n            \"name\": \"tokenProgram\",\n            \"isMut\": false,\n            \"isSigner\": false,\n            \"docs\": [\n              \"token_program\"\n            ]\n          }\n        ],\n        \"args\": []\n      },\n      {\n        \"name\": \"addStrategy\",\n        \"docs\": [\n          \"add a strategy\"\n        ],\n        \"accounts\": [\n          {\n            \"name\": \"vault\",\n            \"isMut\": true,\n            \"isSigner\": false,\n            \"docs\": [\n              \"vault\"\n            ]\n          },\n          {\n            \"name\": \"strategy\",\n            \"isMut\": false,\n            \"isSigner\": false,\n            \"docs\": [\n              \"strategy\"\n            ]\n          },\n          {\n            \"name\": \"admin\",\n            \"isMut\": false,\n            \"isSigner\": true,\n            \"docs\": [\n              \"admin\"\n            ]\n          }\n        ],\n        \"args\": []\n      },\n      {\n        \"name\": \"depositStrategy\",\n        \"docs\": [\n          \"deposit liquidity to a strategy\"\n        ],\n        \"accounts\": [\n          {\n            \"name\": \"vault\",\n            \"isMut\": true,\n            \"isSigner\": false,\n            \"docs\": [\n              \"vault\"\n            ]\n          },\n          {\n            \"name\": \"strategy\",\n            \"isMut\": true,\n            \"isSigner\": false,\n            \"docs\": [\n              \"strategy\"\n            ]\n          },\n          {\n            \"name\": \"tokenVault\",\n            \"isMut\": true,\n            \"isSigner\": false,\n            \"docs\": [\n              \"token_vault\"\n            ]\n          },\n          {\n            \"name\": \"feeVault\",\n            \"isMut\": true,\n            \"isSigner\": false,\n            \"docs\": [\n              \"fee_vault\"\n            ]\n          },\n          {\n            \"name\": \"lpMint\",\n            \"isMut\": true,\n            \"isSigner\": false,\n            \"docs\": [\n              \"lp_mint\"\n            ]\n          },\n          {\n            \"name\": \"strategyProgram\",\n            \"isMut\": false,\n            \"isSigner\": false\n          },\n          {\n            \"name\": \"collateralVault\",\n            \"isMut\": true,\n            \"isSigner\": false,\n            \"docs\": [\n              \"collateral_vault\"\n            ]\n          },\n          {\n            \"name\": \"reserve\",\n            \"isMut\": true,\n            \"isSigner\": false\n          },\n          {\n            \"name\": \"tokenProgram\",\n            \"isMut\": false,\n            \"isSigner\": false,\n            \"docs\": [\n              \"token_program\"\n            ]\n          },\n          {\n            \"name\": \"operator\",\n            \"isMut\": false,\n            \"isSigner\": true,\n            \"docs\": [\n              \"operator\"\n            ]\n          }\n        ],\n        \"args\": [\n          {\n            \"name\": \"amount\",\n            \"type\": \"u64\"\n          }\n        ]\n      },\n      {\n        \"name\": \"withdrawStrategy\",\n        \"docs\": [\n          \"withdraw liquidity from a strategy\"\n        ],\n        \"accounts\": [\n          {\n            \"name\": \"vault\",\n            \"isMut\": true,\n            \"isSigner\": false,\n            \"docs\": [\n              \"vault\"\n            ]\n          },\n          {\n            \"name\": \"strategy\",\n            \"isMut\": true,\n            \"isSigner\": false,\n            \"docs\": [\n              \"strategy\"\n            ]\n          },\n          {\n            \"name\": \"tokenVault\",\n            \"isMut\": true,\n            \"isSigner\": false,\n            \"docs\": [\n              \"token_vault\"\n            ]\n          },\n          {\n            \"name\": \"feeVault\",\n            \"isMut\": true,\n            \"isSigner\": false,\n            \"docs\": [\n              \"fee_vault\"\n            ]\n          },\n          {\n            \"name\": \"lpMint\",\n            \"isMut\": true,\n            \"isSigner\": false,\n            \"docs\": [\n              \"lp_mint\"\n            ]\n          },\n          {\n            \"name\": \"strategyProgram\",\n            \"isMut\": false,\n            \"isSigner\": false\n          },\n          {\n            \"name\": \"collateralVault\",\n            \"isMut\": true,\n            \"isSigner\": false,\n            \"docs\": [\n              \"collateral_vault\"\n            ]\n          },\n          {\n            \"name\": \"reserve\",\n            \"isMut\": true,\n            \"isSigner\": false\n          },\n          {\n            \"name\": \"tokenProgram\",\n            \"isMut\": false,\n            \"isSigner\": false,\n            \"docs\": [\n              \"token_program\"\n            ]\n          },\n          {\n            \"name\": \"operator\",\n            \"isMut\": false,\n            \"isSigner\": true,\n            \"docs\": [\n              \"operator\"\n            ]\n          }\n        ],\n        \"args\": [\n          {\n            \"name\": \"amount\",\n            \"type\": \"u64\"\n          }\n        ]\n      },\n      {\n        \"name\": \"claimRewards\",\n        \"docs\": [\n          \"claim rewards from a strategy\"\n        ],\n        \"accounts\": [\n          {\n            \"name\": \"vault\",\n            \"isMut\": false,\n            \"isSigner\": false,\n            \"docs\": [\n              \"vault\"\n            ]\n          },\n          {\n            \"name\": \"strategy\",\n            \"isMut\": false,\n            \"isSigner\": false,\n            \"docs\": [\n              \"strategy\"\n            ]\n          },\n          {\n            \"name\": \"tokenProgram\",\n            \"isMut\": false,\n            \"isSigner\": false,\n            \"docs\": [\n              \"token_program\"\n            ]\n          },\n          {\n            \"name\": \"tokenRewardAcc\",\n            \"isMut\": true,\n            \"isSigner\": false,\n            \"docs\": [\n              \"token_reward_acc\"\n            ]\n          },\n          {\n            \"name\": \"operator\",\n            \"isMut\": false,\n            \"isSigner\": true,\n            \"docs\": [\n              \"operator\"\n            ]\n          }\n        ],\n        \"args\": []\n      },\n      {\n        \"name\": \"withdraw2\",\n        \"docs\": [\n          \"Withdraw v2. Withdraw from token vault if no remaining accounts are available. Else, it will attempt to withdraw from strategy and token vault. This method just proxy between 2 methods. Protocol integration should be using withdraw instead of this function.\"\n        ],\n        \"accounts\": [\n          {\n            \"name\": \"vault\",\n            \"isMut\": true,\n            \"isSigner\": false,\n            \"docs\": [\n              \"vault\"\n            ]\n          },\n          {\n            \"name\": \"tokenVault\",\n            \"isMut\": true,\n            \"isSigner\": false,\n            \"docs\": [\n              \"token_vault\"\n            ]\n          },\n          {\n            \"name\": \"lpMint\",\n            \"isMut\": true,\n            \"isSigner\": false,\n            \"docs\": [\n              \"lp_mint\"\n            ]\n          },\n          {\n            \"name\": \"userToken\",\n            \"isMut\": true,\n            \"isSigner\": false,\n            \"docs\": [\n              \"user_token\"\n            ]\n          },\n          {\n            \"name\": \"userLp\",\n            \"isMut\": true,\n            \"isSigner\": false,\n            \"docs\": [\n              \"user_lp\"\n            ]\n          },\n          {\n            \"name\": \"user\",\n            \"isMut\": false,\n            \"isSigner\": true,\n            \"docs\": [\n              \"user\"\n            ]\n          },\n          {\n            \"name\": \"tokenProgram\",\n            \"isMut\": false,\n            \"isSigner\": false,\n            \"docs\": [\n              \"token_program\"\n            ]\n          }\n        ],\n        \"args\": [\n          {\n            \"name\": \"unmintAmount\",\n            \"type\": \"u64\"\n          },\n          {\n            \"name\": \"minOutAmount\",\n            \"type\": \"u64\"\n          }\n        ]\n      },\n      {\n        \"name\": \"deposit\",\n        \"docs\": [\n          \"user deposit liquidity to vault\"\n        ],\n        \"accounts\": [\n          {\n            \"name\": \"vault\",\n            \"isMut\": true,\n            \"isSigner\": false,\n            \"docs\": [\n              \"vault\"\n            ]\n          },\n          {\n            \"name\": \"tokenVault\",\n            \"isMut\": true,\n            \"isSigner\": false,\n            \"docs\": [\n              \"token_vault\"\n            ]\n          },\n          {\n            \"name\": \"lpMint\",\n            \"isMut\": true,\n            \"isSigner\": false,\n            \"docs\": [\n              \"lp_mint\"\n            ]\n          },\n          {\n            \"name\": \"userToken\",\n            \"isMut\": true,\n            \"isSigner\": false,\n            \"docs\": [\n              \"user_token\"\n            ]\n          },\n          {\n            \"name\": \"userLp\",\n            \"isMut\": true,\n            \"isSigner\": false,\n            \"docs\": [\n              \"user_lp\"\n            ]\n          },\n          {\n            \"name\": \"user\",\n            \"isMut\": false,\n            \"isSigner\": true,\n            \"docs\": [\n              \"user\"\n            ]\n          },\n          {\n            \"name\": \"tokenProgram\",\n            \"isMut\": false,\n            \"isSigner\": false,\n            \"docs\": [\n              \"token_program\"\n            ]\n          }\n        ],\n        \"args\": [\n          {\n            \"name\": \"tokenAmount\",\n            \"type\": \"u64\"\n          },\n          {\n            \"name\": \"minimumLpTokenAmount\",\n            \"type\": \"u64\"\n          }\n        ]\n      },\n      {\n        \"name\": \"withdraw\",\n        \"docs\": [\n          \"user withdraw liquidity from vault\"\n        ],\n        \"accounts\": [\n          {\n            \"name\": \"vault\",\n            \"isMut\": true,\n            \"isSigner\": false,\n            \"docs\": [\n              \"vault\"\n            ]\n          },\n          {\n            \"name\": \"tokenVault\",\n            \"isMut\": true,\n            \"isSigner\": false,\n            \"docs\": [\n              \"token_vault\"\n            ]\n          },\n          {\n            \"name\": \"lpMint\",\n            \"isMut\": true,\n            \"isSigner\": false,\n            \"docs\": [\n              \"lp_mint\"\n            ]\n          },\n          {\n            \"name\": \"userToken\",\n            \"isMut\": true,\n            \"isSigner\": false,\n            \"docs\": [\n              \"user_token\"\n            ]\n          },\n          {\n            \"name\": \"userLp\",\n            \"isMut\": true,\n            \"isSigner\": false,\n            \"docs\": [\n              \"user_lp\"\n            ]\n          },\n          {\n            \"name\": \"user\",\n            \"isMut\": false,\n            \"isSigner\": true,\n            \"docs\": [\n              \"user\"\n            ]\n          },\n          {\n            \"name\": \"tokenProgram\",\n            \"isMut\": false,\n            \"isSigner\": false,\n            \"docs\": [\n              \"token_program\"\n            ]\n          }\n        ],\n        \"args\": [\n          {\n            \"name\": \"unmintAmount\",\n            \"type\": \"u64\"\n          },\n          {\n            \"name\": \"minOutAmount\",\n            \"type\": \"u64\"\n          }\n        ]\n      },\n      {\n        \"name\": \"withdrawDirectlyFromStrategy\",\n        \"docs\": [\n          \"user withdraw liquidity from vault, if vault reserve doesn't have enough liquidity, it will withdraw from the strategy firstly\"\n        ],\n        \"accounts\": [\n          {\n            \"name\": \"vault\",\n            \"isMut\": true,\n            \"isSigner\": false,\n            \"docs\": [\n              \"vault\"\n            ]\n          },\n          {\n            \"name\": \"strategy\",\n            \"isMut\": true,\n            \"isSigner\": false,\n            \"docs\": [\n              \"strategy\"\n            ]\n          },\n          {\n            \"name\": \"reserve\",\n            \"isMut\": true,\n            \"isSigner\": false\n          },\n          {\n            \"name\": \"strategyProgram\",\n            \"isMut\": false,\n            \"isSigner\": false\n          },\n          {\n            \"name\": \"collateralVault\",\n            \"isMut\": true,\n            \"isSigner\": false,\n            \"docs\": [\n              \"collateral_vault\"\n            ]\n          },\n          {\n            \"name\": \"tokenVault\",\n            \"isMut\": true,\n            \"isSigner\": false,\n            \"docs\": [\n              \"token_vault\"\n            ]\n          },\n          {\n            \"name\": \"lpMint\",\n            \"isMut\": true,\n            \"isSigner\": false,\n            \"docs\": [\n              \"lp_mint\"\n            ]\n          },\n          {\n            \"name\": \"feeVault\",\n            \"isMut\": true,\n            \"isSigner\": false,\n            \"docs\": [\n              \"fee_vault\"\n            ]\n          },\n          {\n            \"name\": \"userToken\",\n            \"isMut\": true,\n            \"isSigner\": false,\n            \"docs\": [\n              \"user_token\"\n            ]\n          },\n          {\n            \"name\": \"userLp\",\n            \"isMut\": true,\n            \"isSigner\": false,\n            \"docs\": [\n              \"user_lp\"\n            ]\n          },\n          {\n            \"name\": \"user\",\n            \"isMut\": false,\n            \"isSigner\": true,\n            \"docs\": [\n              \"user\"\n            ]\n          },\n          {\n            \"name\": \"tokenProgram\",\n            \"isMut\": false,\n            \"isSigner\": false,\n            \"docs\": [\n              \"token_program\"\n            ]\n          }\n        ],\n        \"args\": [\n          {\n            \"name\": \"unmintAmount\",\n            \"type\": \"u64\"\n          },\n          {\n            \"name\": \"minOutAmount\",\n            \"type\": \"u64\"\n          }\n        ]\n      }\n    ],\n    \"accounts\": [\n      {\n        \"name\": \"vault\",\n        \"docs\": [\n          \"Vault struct\"\n        ],\n        \"type\": {\n          \"kind\": \"struct\",\n          \"fields\": [\n            {\n              \"name\": \"enabled\",\n              \"docs\": [\n                \"The flag, if admin set enable = false, then the user can only withdraw and cannot deposit in the vault.\"\n              ],\n              \"type\": \"u8\"\n            },\n            {\n              \"name\": \"bumps\",\n              \"docs\": [\n                \"Vault nonce, to create vault seeds\"\n              ],\n              \"type\": {\n                \"defined\": \"VaultBumps\"\n              }\n            },\n            {\n              \"name\": \"totalAmount\",\n              \"docs\": [\n                \"The total liquidity of the vault, including remaining tokens in token_vault and the liquidity in all strategies.\"\n              ],\n              \"type\": \"u64\"\n            },\n            {\n              \"name\": \"tokenVault\",\n              \"docs\": [\n                \"Token account, hold liquidity in vault reserve\"\n              ],\n              \"type\": \"publicKey\"\n            },\n            {\n              \"name\": \"feeVault\",\n              \"docs\": [\n                \"Hold lp token of vault, each time rebalance crank is called, vault calculate performance fee and mint corresponding lp token amount to fee_vault. fee_vault is owned by treasury address\"\n              ],\n              \"type\": \"publicKey\"\n            },\n            {\n              \"name\": \"tokenMint\",\n              \"docs\": [\n                \"Token mint that vault supports\"\n              ],\n              \"type\": \"publicKey\"\n            },\n            {\n              \"name\": \"lpMint\",\n              \"docs\": [\n                \"Lp mint of vault\"\n              ],\n              \"type\": \"publicKey\"\n            },\n            {\n              \"name\": \"strategies\",\n              \"docs\": [\n                \"The list of strategy addresses that vault supports, vault can support up to MAX_STRATEGY strategies at the same time.\"\n              ],\n              \"type\": {\n                \"array\": [\n                  \"publicKey\",\n                  30\n                ]\n              }\n            },\n            {\n              \"name\": \"base\",\n              \"docs\": [\n                \"The base address to create vault seeds\"\n              ],\n              \"type\": \"publicKey\"\n            },\n            {\n              \"name\": \"admin\",\n              \"docs\": [\n                \"Admin of vault\"\n              ],\n              \"type\": \"publicKey\"\n            },\n            {\n              \"name\": \"operator\",\n              \"docs\": [\n                \"Person who can send the crank. Operator can only send liquidity to strategies that admin defined, and claim reward to account of treasury address\"\n              ],\n              \"type\": \"publicKey\"\n            },\n            {\n              \"name\": \"lockedProfitTracker\",\n              \"docs\": [\n                \"Stores information for locked profit.\"\n              ],\n              \"type\": {\n                \"defined\": \"LockedProfitTracker\"\n              }\n            }\n          ]\n        }\n      },\n      {\n        \"name\": \"strategy\",\n        \"docs\": [\n          \"Strategy struct\"\n        ],\n        \"type\": {\n          \"kind\": \"struct\",\n          \"fields\": [\n            {\n              \"name\": \"reserve\",\n              \"docs\": [\n                \"Lending pool address, that the strategy will deposit/withdraw balance\"\n              ],\n              \"type\": \"publicKey\"\n            },\n            {\n              \"name\": \"collateralVault\",\n              \"docs\": [\n                \"The token account, that holds the collateral token\"\n              ],\n              \"type\": \"publicKey\"\n            },\n            {\n              \"name\": \"strategyType\",\n              \"docs\": [\n                \"Specify type of strategy\"\n              ],\n              \"type\": {\n                \"defined\": \"StrategyType\"\n              }\n            },\n            {\n              \"name\": \"currentLiquidity\",\n              \"docs\": [\n                \"The liquidity in strategy at the time vault deposit/withdraw from a lending protocol\"\n              ],\n              \"type\": \"u64\"\n            },\n            {\n              \"name\": \"bumps\",\n              \"docs\": [\n                \"Hold some bumps, in case the strategy needs to use other seeds to sign a CPI call.\"\n              ],\n              \"type\": {\n                \"array\": [\n                  \"u8\",\n                  10\n                ]\n              }\n            },\n            {\n              \"name\": \"vault\",\n              \"docs\": [\n                \"Vault address, that the strategy belongs\"\n              ],\n              \"type\": \"publicKey\"\n            },\n            {\n              \"name\": \"isDisable\",\n              \"docs\": [\n                \"If we remove strategy by remove_strategy2 endpoint, this account will be never added again\"\n              ],\n              \"type\": \"u8\"\n            }\n          ]\n        }\n      }\n    ],\n    \"types\": [\n      {\n        \"name\": \"LockedProfitTracker\",\n        \"docs\": [\n          \"LockedProfitTracker struct\"\n        ],\n        \"type\": {\n          \"kind\": \"struct\",\n          \"fields\": [\n            {\n              \"name\": \"lastUpdatedLockedProfit\",\n              \"docs\": [\n                \"The total locked profit from the last report\"\n              ],\n              \"type\": \"u64\"\n            },\n            {\n              \"name\": \"lastReport\",\n              \"docs\": [\n                \"The last timestamp (in seconds) rebalancing\"\n              ],\n              \"type\": \"u64\"\n            },\n            {\n              \"name\": \"lockedProfitDegradation\",\n              \"docs\": [\n                \"Rate per second of degradation\"\n              ],\n              \"type\": \"u64\"\n            }\n          ]\n        }\n      },\n      {\n        \"name\": \"VaultBumps\",\n        \"docs\": [\n          \"Vault bumps struct\"\n        ],\n        \"type\": {\n          \"kind\": \"struct\",\n          \"fields\": [\n            {\n              \"name\": \"vaultBump\",\n              \"docs\": [\n                \"vault_bump\"\n              ],\n              \"type\": \"u8\"\n            },\n            {\n              \"name\": \"tokenVaultBump\",\n              \"docs\": [\n                \"token_vault_bump\"\n              ],\n              \"type\": \"u8\"\n            }\n          ]\n        }\n      },\n      {\n        \"name\": \"StrategyBumps\",\n        \"docs\": [\n          \"Strategy bumps struct\"\n        ],\n        \"type\": {\n          \"kind\": \"struct\",\n          \"fields\": [\n            {\n              \"name\": \"strategyIndex\",\n              \"docs\": [\n                \"strategy_index\"\n              ],\n              \"type\": \"u8\"\n            },\n            {\n              \"name\": \"otherBumps\",\n              \"docs\": [\n                \"Bumps of PDAs for the integrated protocol.\"\n              ],\n              \"type\": {\n                \"array\": [\n                  \"u8\",\n                  10\n                ]\n              }\n            }\n          ]\n        }\n      },\n      {\n        \"name\": \"StrategyType\",\n        \"docs\": [\n          \"StrategyType struct\"\n        ],\n        \"type\": {\n          \"kind\": \"enum\",\n          \"variants\": [\n            {\n              \"name\": \"PortFinanceWithoutLM\"\n            },\n            {\n              \"name\": \"PortFinanceWithLM\"\n            },\n            {\n              \"name\": \"SolendWithoutLM\"\n            },\n            {\n              \"name\": \"Mango\"\n            },\n            {\n              \"name\": \"SolendWithLM\"\n            },\n            {\n              \"name\": \"ApricotWithoutLM\"\n            },\n            {\n              \"name\": \"Francium\"\n            },\n            {\n              \"name\": \"Tulip\"\n            },\n            {\n              \"name\": \"Vault\"\n            },\n            {\n              \"name\": \"Drift\"\n            },\n            {\n              \"name\": \"Frakt\"\n            },\n            {\n              \"name\": \"Marginfi\"\n            },\n            {\n              \"name\": \"Kamino\"\n            }\n          ]\n        }\n      },\n      {\n        \"name\": \"VaultType\",\n        \"docs\": [\n          \"Vault type\"\n        ],\n        \"type\": {\n          \"kind\": \"enum\",\n          \"variants\": [\n            {\n              \"name\": \"IdleVault\"\n            },\n            {\n              \"name\": \"RebalanceVault\"\n            }\n          ]\n        }\n      }\n    ],\n    \"events\": [\n      {\n        \"name\": \"AddLiquidity\",\n        \"fields\": [\n          {\n            \"name\": \"lpMintAmount\",\n            \"type\": \"u64\",\n            \"index\": false\n          },\n          {\n            \"name\": \"tokenAmount\",\n            \"type\": \"u64\",\n            \"index\": false\n          }\n        ]\n      },\n      {\n        \"name\": \"RemoveLiquidity\",\n        \"fields\": [\n          {\n            \"name\": \"lpUnmintAmount\",\n            \"type\": \"u64\",\n            \"index\": false\n          },\n          {\n            \"name\": \"tokenAmount\",\n            \"type\": \"u64\",\n            \"index\": false\n          }\n        ]\n      },\n      {\n        \"name\": \"StrategyDeposit\",\n        \"fields\": [\n          {\n            \"name\": \"strategyType\",\n            \"type\": {\n              \"defined\": \"StrategyType\"\n            },\n            \"index\": false\n          },\n          {\n            \"name\": \"tokenAmount\",\n            \"type\": \"u64\",\n            \"index\": false\n          }\n        ]\n      },\n      {\n        \"name\": \"StrategyWithdraw\",\n        \"fields\": [\n          {\n            \"name\": \"strategyType\",\n            \"type\": {\n              \"defined\": \"StrategyType\"\n            },\n            \"index\": false\n          },\n          {\n            \"name\": \"collateralAmount\",\n            \"type\": \"u64\",\n            \"index\": false\n          },\n          {\n            \"name\": \"estimatedTokenAmount\",\n            \"type\": \"u64\",\n            \"index\": false\n          }\n        ]\n      },\n      {\n        \"name\": \"ClaimReward\",\n        \"fields\": [\n          {\n            \"name\": \"strategyType\",\n            \"type\": {\n              \"defined\": \"StrategyType\"\n            },\n            \"index\": false\n          },\n          {\n            \"name\": \"tokenAmount\",\n            \"type\": \"u64\",\n            \"index\": false\n          },\n          {\n            \"name\": \"mintAccount\",\n            \"type\": \"publicKey\",\n            \"index\": false\n          }\n        ]\n      },\n      {\n        \"name\": \"PerformanceFee\",\n        \"fields\": [\n          {\n            \"name\": \"lpMintMore\",\n            \"type\": \"u64\",\n            \"index\": false\n          }\n        ]\n      },\n      {\n        \"name\": \"ReportLoss\",\n        \"fields\": [\n          {\n            \"name\": \"strategy\",\n            \"type\": \"publicKey\",\n            \"index\": false\n          },\n          {\n            \"name\": \"loss\",\n            \"type\": \"u64\",\n            \"index\": false\n          }\n        ]\n      },\n      {\n        \"name\": \"TotalAmount\",\n        \"fields\": [\n          {\n            \"name\": \"totalAmount\",\n            \"type\": \"u64\",\n            \"index\": false\n          }\n        ]\n      }\n    ],\n    \"errors\": [\n      {\n        \"code\": 6000,\n        \"name\": \"VaultIsDisabled\",\n        \"msg\": \"Vault is disabled\"\n      },\n      {\n        \"code\": 6001,\n        \"name\": \"ExceededSlippage\",\n        \"msg\": \"Exceeded slippage tolerance\"\n      },\n      {\n        \"code\": 6002,\n        \"name\": \"StrategyIsNotExisted\",\n        \"msg\": \"Strategy is not existed\"\n      },\n      {\n        \"code\": 6003,\n        \"name\": \"UnAuthorized\",\n        \"msg\": \"UnAuthorized\"\n      },\n      {\n        \"code\": 6004,\n        \"name\": \"MathOverflow\",\n        \"msg\": \"Math operation overflow\"\n      },\n      {\n        \"code\": 6005,\n        \"name\": \"ProtocolIsNotSupported\",\n        \"msg\": \"Protocol is not supported\"\n      },\n      {\n        \"code\": 6006,\n        \"name\": \"UnMatchReserve\",\n        \"msg\": \"Reserve does not support token mint\"\n      },\n      {\n        \"code\": 6007,\n        \"name\": \"InvalidLockedProfitDegradation\",\n        \"msg\": \"lockedProfitDegradation is invalid\"\n      },\n      {\n        \"code\": 6008,\n        \"name\": \"MaxStrategyReached\",\n        \"msg\": \"Maximum number of strategies have been reached\"\n      },\n      {\n        \"code\": 6009,\n        \"name\": \"StrategyExisted\",\n        \"msg\": \"Strategy existed\"\n      },\n      {\n        \"code\": 6010,\n        \"name\": \"InvalidUnmintAmount\",\n        \"msg\": \"Invalid unmint amount\"\n      },\n      {\n        \"code\": 6011,\n        \"name\": \"InvalidAccountsForStrategy\",\n        \"msg\": \"Invalid accounts for strategy\"\n      },\n      {\n        \"code\": 6012,\n        \"name\": \"InvalidBump\",\n        \"msg\": \"Invalid bump\"\n      },\n      {\n        \"code\": 6013,\n        \"name\": \"AmountMustGreaterThanZero\",\n        \"msg\": \"Amount must be greater than 0\"\n      },\n      {\n        \"code\": 6014,\n        \"name\": \"MangoIsNotSupportedAnymore\",\n        \"msg\": \"Mango is not supported anymore\"\n      },\n      {\n        \"code\": 6015,\n        \"name\": \"StrategyIsNotSupported\",\n        \"msg\": \"Strategy is not supported\"\n      },\n      {\n        \"code\": 6016,\n        \"name\": \"PayAmountIsExeeced\",\n        \"msg\": \"Pay amount is exceeded\"\n      },\n      {\n        \"code\": 6017,\n        \"name\": \"FeeVaultIsNotSet\",\n        \"msg\": \"Fee vault is not set\"\n      },\n      {\n        \"code\": 6018,\n        \"name\": \"LendingAssertionViolation\",\n        \"msg\": \"deposit amount in lending is not matched\"\n      },\n      {\n        \"code\": 6019,\n        \"name\": \"HaveMoneyInLending\",\n        \"msg\": \"Cannot remove strategy becase we have some in lending\"\n      }\n    ]\n  };\n  ","import { PublicKey } from \"@solana/web3.js\";\nimport BN from \"bn.js\";\nimport Decimal from \"decimal.js\";\nimport {\n  AccountStates,\n  FullBalanceListState,\n  StakeEscrow,\n  StakerBalance,\n  StakerMetadata,\n  TopStakerInfo,\n  TopStakerListState,\n  TopStakerListStateContext,\n} from \"../types\";\nimport { getLockedEscrowPendingFee } from \"./dynamic_amm\";\n\nexport function findLargestStakerNotInTopListFromFullBalanceList(\n  lookupNumber: number,\n  fullBalanceListState: FullBalanceListState\n) {\n  const largestStakers: Array<StakerBalance> = [];\n\n  // 1. Filter out top stakers and empty slot\n  const fullBalanceListWithoutTopStakers = [...fullBalanceListState.stakers]\n    .map<[number, StakerBalance]>((s, idx) => [idx, s])\n    .filter(\n      ([_idx, s]) => s.owner != PublicKey.default && !Boolean(s.isInTopList)\n    );\n\n  if (fullBalanceListWithoutTopStakers.length == 0) {\n    return largestStakers;\n  }\n\n  // 2. Sort based on stake amount + full balance index\n  const ascSortedFullBalanceList = fullBalanceListWithoutTopStakers.sort(\n    ([a_idx, a], [b_idx, b]) => {\n      if (a.balance.eq(b.balance)) {\n        return b_idx - a_idx;\n      } else {\n        return a.balance.cmp(b.balance);\n      }\n    }\n  );\n\n  // 3. Get largest N staker\n  for (let i = 0; i < lookupNumber; i++) {\n    const stakerWithIndex = ascSortedFullBalanceList.pop();\n    if (stakerWithIndex) {\n      const [_idx, staker] = stakerWithIndex;\n      largestStakers.push(staker);\n    } else {\n      break;\n    }\n  }\n\n  return largestStakers;\n}\n\nexport function findReplaceableTopStaker(\n  lookupNumber: number,\n  topStakerListState: TopStakerListState\n) {\n  const smallestStakers: Array<StakerMetadata> = [];\n\n  // 1. Filter out empty slot in top staker list\n  const actualTopStakers = [...topStakerListState.stakers].filter(\n    (s) => !s.fullBalanceIndex.isNeg()\n  );\n\n  if (actualTopStakers.length == 0) {\n    return smallestStakers;\n  }\n\n  // 2. Sort it based on full balance index + stake amount\n  const ascSortedTopStakers = actualTopStakers.sort((a, b) => {\n    if (a.stakeAmount.eq(b.stakeAmount)) {\n      // Late joiner consider smaller\n      return b.fullBalanceIndex.cmp(a.fullBalanceIndex);\n    } else {\n      return a.stakeAmount.cmp(b.stakeAmount);\n    }\n  });\n\n  // 3. Get N smallest top staker\n  for (let i = 0; i < lookupNumber; i++) {\n    const staker = ascSortedTopStakers.shift();\n    if (staker) {\n      smallestStakers.push(staker);\n    } else {\n      break;\n    }\n  }\n\n  return smallestStakers;\n}\n\nexport function getTopStakerListStateEntryStakeAmount(\n  topStakerListState: TopStakerListState\n) {\n  let smallestStakeAmount = new BN(\"18446744073709551615\");\n\n  if (topStakerListState.stakers.length === 0) {\n    return new BN(1);\n  }\n\n  for (const staker of topStakerListState.stakers) {\n    if (staker.stakeAmount.lt(smallestStakeAmount)) {\n      smallestStakeAmount = staker.stakeAmount;\n    }\n  }\n\n  return smallestStakeAmount.add(new BN(1));\n}\n\n/** Start of section which will be removed after keeper is done. */\ninterface RawFeeVaultContext {\n  totalRewardA: Decimal;\n  totalRewardB: Decimal;\n  dailyRewardA: Decimal;\n  dailyRewardB: Decimal;\n  totalStakers: Decimal;\n  totalStakedAmount: Decimal;\n}\n\ninterface FeeVaultPerformance {\n  apr: Decimal;\n  apy: Decimal;\n  usdPerDay: Decimal;\n}\n\nexport interface FeeVaultContext {\n  prizeUsd: Decimal;\n  totalStakeUsd: Decimal;\n  performance: FeeVaultPerformance;\n  minEntryUsd: Decimal;\n  rawContext: RawFeeVaultContext;\n}\n\nexport function calculateFeeFarmPerformance(\n  accountStatesT0: AccountStates,\n  accountStatesT1: AccountStates,\n  tokenAUIMultiplier: number,\n  tokenBUIMultiplier: number,\n  stakeTokenUIMultiplier: number,\n  tokenAUsdRate: Decimal,\n  tokenBUsdRate: Decimal,\n  stakeTokenUsdRate: Decimal\n): FeeVaultPerformance {\n  const secondsElapsed = new Decimal(\n    accountStatesT1.clock.unixTimestamp\n      .sub(accountStatesT0.clock.unixTimestamp)\n      .toString()\n  );\n\n  let totalFeeAAmountT1 = accountStatesT1.feeVault.metrics.totalFeeAAmount;\n  let totalFeeBAmountT1 = accountStatesT1.feeVault.metrics.totalFeeBAmount;\n  const totalFeeAAmountClaimableT1 = getLockedEscrowPendingFee(\n    accountStatesT1.clock.unixTimestamp,\n    accountStatesT1.feeVault,\n    accountStatesT1.lockEscrow,\n    accountStatesT1.aVault,\n    accountStatesT1.bVault,\n    accountStatesT1.aVaultLp,\n    accountStatesT1.bVaultLp,\n    accountStatesT1.aVaultLpMint,\n    accountStatesT1.bVaultLpMint,\n    accountStatesT1.poolLpMint\n  );\n  totalFeeAAmountT1 = totalFeeAAmountT1.add(totalFeeAAmountClaimableT1[0]);\n  totalFeeBAmountT1 = totalFeeBAmountT1.add(totalFeeAAmountClaimableT1[1]);\n\n  let totalFeeAAmountT0 = accountStatesT0.feeVault.metrics.totalFeeAAmount;\n  let totalFeeBAmountT0 = accountStatesT0.feeVault.metrics.totalFeeBAmount;\n  const totalFeeAAmountClaimableT0 = getLockedEscrowPendingFee(\n    accountStatesT0.clock.unixTimestamp,\n    accountStatesT0.feeVault,\n    accountStatesT0.lockEscrow,\n    accountStatesT0.aVault,\n    accountStatesT0.bVault,\n    accountStatesT0.aVaultLp,\n    accountStatesT0.bVaultLp,\n    accountStatesT0.aVaultLpMint,\n    accountStatesT0.bVaultLpMint,\n    accountStatesT0.poolLpMint\n  );\n  totalFeeAAmountT0 = totalFeeAAmountT0.add(totalFeeAAmountClaimableT0[0]);\n  totalFeeBAmountT0 = totalFeeBAmountT0.add(totalFeeAAmountClaimableT0[1]);\n\n  const feeAAmount = totalFeeAAmountT1.sub(totalFeeAAmountT0);\n  const feeBAmount = totalFeeBAmountT1.sub(totalFeeBAmountT0);\n\n  const feeAAmountUi = new Decimal(feeAAmount.toString()).div(\n    new Decimal(tokenAUIMultiplier)\n  );\n\n  const feeBAmountUi = new Decimal(feeBAmount.toString()).div(\n    new Decimal(tokenBUIMultiplier)\n  );\n\n  const feeUsd = feeAAmountUi\n    .mul(tokenAUsdRate)\n    .add(feeBAmountUi.mul(tokenBUsdRate));\n\n  const usdPerDay = feeUsd.div(secondsElapsed).mul(new Decimal(86400));\n  const annualizedFeeUsd = usdPerDay.mul(new Decimal(365));\n\n  const effectiveStakeAmountUi = new Decimal(\n    accountStatesT1.feeVault.topStakerInfo.effectiveStakeAmount.toString()\n  ).div(stakeTokenUIMultiplier);\n\n  const effectiveUsdAmount = effectiveStakeAmountUi.mul(stakeTokenUsdRate);\n  const nominalRate = annualizedFeeUsd.div(effectiveUsdAmount);\n\n  const effectiveRate = new Decimal(1)\n    .add(nominalRate.div(new Decimal(365)))\n    .pow(new Decimal(365))\n    .sub(new Decimal(1));\n\n  return {\n    usdPerDay,\n    apr: nominalRate.mul(new Decimal(100)),\n    apy: effectiveRate.mul(new Decimal(100)),\n  };\n}\n\nexport function parseFeeVaultInfo(\n  accountStatesT0: AccountStates,\n  accountStatesT1: AccountStates,\n  tokenAUsdRate: Decimal,\n  tokenBUsdRate: Decimal\n): FeeVaultContext {\n  const {\n    feeVault,\n    tokenAMint,\n    tokenBMint,\n    ammPool,\n    topStakerListState,\n    clock,\n    lockEscrow,\n    aVault,\n    bVault,\n    aVaultLp,\n    aVaultLpMint,\n    bVaultLp,\n    bVaultLpMint,\n    poolLpMint,\n  } = accountStatesT1;\n\n  const tokenAUIMultiplier = Math.floor(10 ** tokenAMint.decimals);\n  const tokenBUIMultiplier = Math.floor(10 ** tokenBMint.decimals);\n  const [stakeTokenUIMultiplier, stakeTokenUsdRate] = ammPool.tokenAMint.equals(\n    feeVault.stakeMint\n  )\n    ? [tokenAUIMultiplier, tokenAUsdRate]\n    : [tokenBUIMultiplier, tokenBUsdRate];\n\n  const [claimableFeeAAmount, claimableFeeBAmount] = getLockedEscrowPendingFee(\n    clock.unixTimestamp,\n    feeVault,\n    lockEscrow,\n    aVault,\n    bVault,\n    aVaultLp,\n    bVaultLp,\n    aVaultLpMint,\n    bVaultLpMint,\n    poolLpMint\n  );\n\n  const totalFeeAAmount = new Decimal(\n    feeVault.metrics.totalFeeAAmount.add(claimableFeeAAmount).toString()\n  ).div(tokenAUIMultiplier);\n\n  const totalFeeBAmount = new Decimal(\n    feeVault.metrics.totalFeeBAmount.add(claimableFeeBAmount).toString()\n  ).div(tokenBUIMultiplier);\n\n  const prizeUsd = totalFeeAAmount\n    .mul(tokenAUsdRate)\n    .add(totalFeeBAmount.mul(tokenBUsdRate));\n\n  const totalStakedAmount = new Decimal(\n    feeVault.metrics.totalStakedAmount.toString()\n  ).div(stakeTokenUIMultiplier);\n\n  const totalStakeUsd = totalStakedAmount.mul(stakeTokenUsdRate);\n  const performance = calculateFeeFarmPerformance(\n    accountStatesT0,\n    accountStatesT1,\n    tokenAUIMultiplier,\n    tokenBUIMultiplier,\n    stakeTokenUIMultiplier,\n    tokenAUsdRate,\n    tokenBUsdRate,\n    stakeTokenUsdRate\n  );\n\n  const entryStakeAmount = new Decimal(\n    getTopStakerListStateEntryStakeAmount(topStakerListState).toString()\n  ).div(stakeTokenUIMultiplier);\n\n  const minEntryUsd = entryStakeAmount.mul(stakeTokenUsdRate);\n\n  const secondsElapsedSinceCreated = new Decimal(\n    clock.unixTimestamp.sub(feeVault.createdAt).toString()\n  );\n\n  const rawContext: RawFeeVaultContext = {\n    totalRewardA: totalFeeAAmount,\n    totalRewardB: totalFeeBAmount,\n    dailyRewardA: totalFeeAAmount\n      .mul(new Decimal(86400))\n      .div(secondsElapsedSinceCreated),\n    dailyRewardB: totalFeeBAmount\n      .mul(new Decimal(86400))\n      .div(secondsElapsedSinceCreated),\n    totalStakers: new Decimal(\n      feeVault.metrics.totalStakeEscrowCount.toString()\n    ),\n    totalStakedAmount,\n  };\n\n  return {\n    prizeUsd,\n    minEntryUsd,\n    totalStakeUsd,\n    performance,\n    rawContext,\n  };\n}\n\nexport function parseTopStakerListState(\n  topStakerInfo: TopStakerInfo,\n  topStakerListState: TopStakerListState,\n  stakeTokenDecimal: number,\n  feeVaultUsdPerDay: Decimal\n): Array<TopStakerListStateContext> {\n  const stakeTokenUiMultiplier = new Decimal(\n    Math.floor(10 ** stakeTokenDecimal)\n  );\n  const effectiveStakeAmount = new Decimal(\n    topStakerInfo.effectiveStakeAmount.toString()\n  ).div(stakeTokenUiMultiplier);\n\n  const orderedTopStakers = [...topStakerListState.stakers].sort((a, b) => {\n    if (a.stakeAmount.eq(b.stakeAmount)) {\n      return a.fullBalanceIndex.cmp(b.fullBalanceIndex);\n    } else {\n      return b.stakeAmount.cmp(a.stakeAmount);\n    }\n  });\n\n  return orderedTopStakers.map((staker, idx) => {\n    const rank = idx + 1;\n    const totalStaked = new Decimal(staker.stakeAmount.toString()).div(\n      stakeTokenUiMultiplier\n    );\n\n    const earning = totalStaked\n      .mul(feeVaultUsdPerDay)\n      .div(effectiveStakeAmount);\n\n    return {\n      rank,\n      wallet: staker.owner,\n      totalStaked,\n      earning,\n    };\n  });\n}\n\nexport function getStakeEscrowEarningPerDay(\n  stakeEscrow: StakeEscrow,\n  topStakerInfo: TopStakerInfo,\n  feeVaultUsdPerDay: Decimal\n) {\n  if (Boolean(stakeEscrow.inTopList)) {\n    return new Decimal(stakeEscrow.stakeAmount.toString())\n      .mul(feeVaultUsdPerDay)\n      .div(new Decimal(topStakerInfo.effectiveStakeAmount.toString()));\n  }\n\n  return new Decimal(0);\n}\n\nexport function getStakeEscrowEarningPerDayAfterUnstake(\n  stakeEscrow: StakeEscrow,\n  topStakerInfo: TopStakerInfo,\n  unstakeAmount: BN,\n  feeVaultUsdPerDay: Decimal\n) {\n  const newStakeAmount = stakeEscrow.stakeAmount.sub(unstakeAmount);\n  const newEffectiveStakeAmount =\n    topStakerInfo.effectiveStakeAmount.sub(unstakeAmount);\n\n  if (Boolean(stakeEscrow.inTopList)) {\n    return new Decimal(newStakeAmount.toString())\n      .mul(feeVaultUsdPerDay)\n      .div(new Decimal(newEffectiveStakeAmount.toString()));\n  }\n\n  return new Decimal(0);\n}\n/** End of section which will be removed after keeper is done. */\n","import {\n  createCloseAccountInstruction,\n  getAssociatedTokenAddressSync,\n  NATIVE_MINT,\n} from \"@solana/spl-token\";\nimport { ComputeBudgetProgram, PublicKey } from \"@solana/web3.js\";\n\nexport const computeUnitIx = (units?: number) => {\n  return ComputeBudgetProgram.setComputeUnitLimit({\n    units: units ?? 1_400_000,\n  });\n};\n\nexport const unwrapSOLInstruction = async (owner: PublicKey) => {\n  const wSolATAAccount = getAssociatedTokenAddressSync(NATIVE_MINT, owner);\n  if (wSolATAAccount) {\n    const closedWrappedSolInstruction = createCloseAccountInstruction(\n      wSolATAAccount,\n      owner,\n      owner,\n    );\n    return closedWrappedSolInstruction;\n  }\n  return null;\n};\n","import { getSimulationComputeUnits } from \"@solana-developers/helpers\";\nimport { ComputeBudgetProgram, Connection, PublicKey, TransactionInstruction } from \"@solana/web3.js\";\n\n/**\n * Gets the estimated compute unit usage with a buffer.\n * @param connection A Solana connection object.\n * @param instructions The instructions of the transaction to simulate.\n * @param feePayer The public key of the fee payer.\n * @param buffer The buffer to add to the estimated compute unit usage. Max value is 1. Default value is 0.1 if not provided, and will be capped between 50k - 200k.\n * @returns The estimated compute unit usage with the buffer.\n */\nexport const getEstimatedComputeUnitUsageWithBuffer = async (\n    connection: Connection,\n    instructions: TransactionInstruction[],\n    feePayer: PublicKey,\n    buffer?: number\n  ) => {\n    if (!buffer) {\n      buffer = 0.1;}\n      // Avoid negative value\n      buffer = Math.max(0, buffer);\n      // Limit buffer to 1\n      buffer = Math.min(1, buffer);\n    \n      const estimatedComputeUnitUsage = await getSimulationComputeUnits(\n        connection,\n        instructions,\n        feePayer,\n        []\n      );\n    \n      const extraComputeUnitBuffer = estimatedComputeUnitUsage * buffer;\n    \n      return estimatedComputeUnitUsage + extraComputeUnitBuffer;\n    };\n    \n    /**\n     * Gets the estimated compute unit usage with a buffer and converts it to a SetComputeUnitLimit instruction.\n     * If the estimated compute unit usage cannot be retrieved, returns a SetComputeUnitLimit instruction with the fallback unit.\n     * @param connection A Solana connection object.\n     * @param instructions The instructions of the transaction to simulate.\n     * @param feePayer The public key of the fee payer.\n     * @param buffer The buffer to add to the estimated compute unit usage. Max value is 1. Default value is 0.1 if not provided, and will be capped between 50k - 200k.\n     * @returns A SetComputeUnitLimit instruction with the estimated compute unit usage.\n     */\n    export const getEstimatedComputeUnitIxWithBuffer = async (\n      connection: Connection,\n      instructions: TransactionInstruction[],\n      feePayer: PublicKey,\n      buffer?: number\n    ) => {\n      const units = await getEstimatedComputeUnitUsageWithBuffer(\n        connection,\n        instructions,\n        feePayer,\n        buffer\n      ).catch((error) => {\n        console.error(\"Error::getEstimatedComputeUnitUsageWithBuffer\", error);\n        return 400_000;\n      });\n    \n      return ComputeBudgetProgram.setComputeUnitLimit({ units });\n    };","import { StakeForFee } from \"./stake-for-fee\";\n\nexport default StakeForFee;\nexport * from \"./stake-for-fee/constants\";\nexport * from \"./stake-for-fee/types\";\nexport * from \"./stake-for-fee/helpers\";\nexport * from \"./stake-for-fee/idls/stake_for_fee\";\nexport type {\n  AccountStates,\n  StakeForFeeProgram,\n  FeeVault,\n  FullBalanceListMetadata,\n  StakeEscrow,\n  TopListMetadata,\n  StakerMetadata,\n  StakerBalance,\n  Metrics,\n  TopStakerInfo,\n  FullBalanceListState,\n  TopStakerListState,\n  TopStakerListStateContext,\n} from \"./stake-for-fee/types\";\nexport type { FeeVaultContext } from \"./stake-for-fee/helpers/staker_for_fee\";\n"],"mappings":"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AAA,MACN,KAAK;AAAA,IACP;AAAA,IACA;AAAA,MACE,MAAM;AAAA,MACN,MAAM;AAAA,MACN,KAAK;AAAA,IACP;AAAA,IACA;AAAA,MACE,MAAM;AAAA,MACN,MAAM;AAAA,MACN,KAAK;AAAA,IACP;AAAA,IACA;AAAA,MACE,MAAM;AAAA,MACN,MAAM;AAAA,MACN,KAAK;AAAA,IACP;AAAA,IACA;AAAA,MACE,MAAM;AAAA,MACN,MAAM;AAAA,MACN,KAAK;AAAA,IACP;AAAA,IACA;AAAA,MACE,MAAM;AAAA,MACN,MAAM;AAAA,MACN,KAAK;AAAA,IACP;AAAA,IACA;AAAA,MACE,MAAM;AAAA,MACN,MAAM;AAAA,MACN,KAAK;AAAA,IACP;AAAA,IACA;AAAA,MACE,MAAM;AAAA,MACN,MAAM;AAAA,MACN,KAAK;AAAA,IACP;AAAA,IACA;AAAA,MACE,MAAM;AAAA,MACN,MAAM;AAAA,MACN,KAAK;AAAA,IACP;AAAA,IACA;AAAA,MACE,MAAM;AAAA,MACN,MAAM;AAAA,MACN,KAAK;AAAA,IACP;AAAA,IACA;AAAA,MACE,MAAM;AAAA,MACN,MAAM;AAAA,MACN,KAAK;AAAA,IACP;AAAA,IACA;AAAA,MACE,MAAM;AAAA,MACN,MAAM;AAAA,MACN,KAAK;AAAA,IACP;AAAA,IACA;AAAA,MACE,MAAM;AAAA,MACN,MAAM;AAAA,MACN,KAAK;AAAA,IACP;AAAA,IACA;AAAA,MACE,MAAM;AAAA,MACN,MAAM;AAAA,MACN,KAAK;AAAA,IACP;AAAA,IACA;AAAA,MACE,MAAM;AAAA,MACN,MAAM;AAAA,MACN,KAAK;AAAA,IACP;AAAA,IACA;AAAA,MACE,MAAM;AAAA,MACN,MAAM;AAAA,MACN,KAAK;AAAA,IACP;AAAA,IACA;AAAA,MACE,MAAM;AAAA,MACN,MAAM;AAAA,MACN,KAAK;AAAA,IACP;AAAA,IACA;AAAA,MACE,MAAM;AAAA,MACN,MAAM;AAAA,MACN,KAAK;AAAA,IACP;AAAA,IACA;AAAA,MACE,MAAM;AAAA,MACN,MAAM;AAAA,MACN,KAAK;AAAA,IACP;AAAA,I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ACR,OAAO;AAAA,IACT;AAAA,IACA;AAAA,MACE,QAAQ;AAAA,MACR,QAAQ;AAAA,MACR,OAAO;AAAA,IACT;AAAA,IACA;AAAA,MACE,QAAQ;AAAA,MACR,QAAQ;AAAA,MACR,OAAO;AAAA,IACT;AAAA,IACA;AAAA,MACE,QAAQ;AAAA,MACR,QAAQ;AAAA,MACR,OAAO;AAAA,IACT;AAAA,IACA;AAAA,MACE,QAAQ;AAAA,MACR,QAAQ;AAAA,MACR,OAAO;AAAA,IACT;AAAA,IACA;AAAA,MACE,QAAQ;AAAA,MACR,QAAQ;AAAA,MACR,OAAO;AAAA,IACT;AAAA,IACA;AAAA,MACE,QAAQ;AAAA,MACR,QAAQ;AAAA,MACR,OAAO;AAAA,IACT;AAAA,IACA;AAAA,MACE,QAAQ;AAAA,MACR,QAAQ;AAAA,MACR,OAAO;AAAA,IACT;AAAA,IACA;AAAA,MACE,QAAQ;AAAA,MACR,QAAQ;AAAA,MACR,OAAO;AAAA,IACT;AAAA,IACA;AAAA,MACE,QAAQ;AAAA,MACR,QAAQ;AAAA,MACR,OAAO;AAAA,IACT;AAAA,IACA;AAAA,MACE,QAAQ;AAAA,MACR,QAAQ;AAAA,MACR,OAAO;AAAA,IACT;AAAA,IACA;AAAA,MACE,QAAQ;AAAA,MACR,QAAQ;AAAA,MACR,OAAO;AAAA,IACT;AAAA,IACA;AAAA,MACE,QAAQ;AAAA,MACR,QAAQ;AAAA,MACR,OAAO;AAAA,IACT;AAAA,IACA;AAAA,MACE,QAAQ;AAAA,MACR,QAAQ;AAAA,MACR,OAAO;AAAA,IACT;AAAA,IACA;AAAA,MACE,QAAQ;AAAA,MACR,QAAQ;AAAA,MACR,OAAO;AAAA,IACT;AAAA,IACA;AAAA,MACE,QAAQ;AAAA,MACR,QAAQ;AAAA,MACR,OAAO;AAAA,IACT;AAAA,IACA;AAAA,MACE,QAAQ;AAAA,MACR,QAAQ;AAAA,MACR,OAAO;AAAA,IACT;AAAA,IACA;AAAA,MACE,QAAQ;AAAA,MACR,QAAQ;AAAA,MACR,OAAO;AAAA,IACT;AAAA,IACA;AAAA,MACE,QAAQ;AAAA,MACR,QAAQ;AAAA,MACR,OAAO;AAAA,IACT;AAAA,EACF;A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","names":["BN","getAssociatedTokenAddressSync","SystemProgram","BN","BN","BN","BN","PublicKey","PublicKey","Program","IDL","IDL","Program","IDL","PublicKey","BN","Decimal","PublicKey","BN","Decimal","getAssociatedTokenAddressSync","getAssociatedTokenAddressSync","ComputeBudgetProgram","StakeForFee","getAssociatedTokenAddressSync","SystemProgram","BN","StakeForFee"]}