var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
import { Connection, PublicKey, Keypair, } from "@solana/web3.js";
import BN from "bn.js";
import { Wallet, AnchorProvider, Program } from '@coral-xyz/anchor';
import AmmImpl from '../amm';
import { IDL as AmmIDL } from '../amm/idl';
import { PROGRAM_ID } from "../amm/constants";
const mainnetConnection = new Connection('https://api.mainnet-beta.solana.com');
const mockWallet = new Wallet(new Keypair());
const provider = new AnchorProvider(mainnetConnection, mockWallet, {
    commitment: 'confirmed',
});
function swapQuote(poolAddress, swapAmount, swapAtoB) {
    return __awaiter(this, void 0, void 0, function* () {
        const ammProgram = new Program(AmmIDL, PROGRAM_ID, provider);
        let poolState = yield ammProgram.account.pool.fetch(poolAddress);
        const pool = yield AmmImpl.create(provider.connection, poolAddress);
        let inTokenMint = swapAtoB ? poolState.tokenAMint : poolState.tokenBMint;
        let swapQuote = pool.getSwapQuote(inTokenMint, swapAmount, 100);
        console.log("ðŸš€ ~ swapQuote:", swapQuote);
        console.log("SwapInAmount %s swapOutAmount %s", swapQuote.swapInAmount.toString(), swapQuote.swapOutAmount.toString());
    });
}
function main() {
    return __awaiter(this, void 0, void 0, function* () {
        yield swapQuote(new PublicKey("5yuefgbJJpmFNK2iiYbLSpv1aZXq7F9AUKkZKErTYCvs"), new BN(10000000000), true);
    });
}
main();
//# sourceMappingURL=swap_quote.js.map